
nucleol476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005584  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800586c  0800586c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005874  08005874  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800587c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000070  080058ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  080058ec  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e48e  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a6  00000000  00000000  0002e534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  000307e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  000313b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027072  00000000  00000000  000322d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d20b  00000000  00000000  00059342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec3d0  00000000  00000000  0006654d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015291d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034c8  00000000  00000000  00152970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_pubnames 000007ca  00000000  00000000  00155e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_pubtypes 00000048  00000000  00000000  00156602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056fc 	.word	0x080056fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080056fc 	.word	0x080056fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the huart2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1,0xFFFF);
 8000278:	1d39      	adds	r1, r7, #4
 800027a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800027e:	2201      	movs	r2, #1
 8000280:	4803      	ldr	r0, [pc, #12]	; (8000290 <__io_putchar+0x20>)
 8000282:	f002 fd1f 	bl	8002cc4 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart2, (uint8_t *)&ch, 1);
  return ch;
 8000286:	687b      	ldr	r3, [r7, #4]
}
 8000288:	4618      	mov	r0, r3
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	200004c8 	.word	0x200004c8

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fb9e 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f864 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f926 	bl	80004f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a4:	f000 f906 	bl	80004b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002a8:	f000 f8d4 	bl	8000454 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef x;
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)funBuffer, 1000);
 80002ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002b0:	4924      	ldr	r1, [pc, #144]	; (8000344 <main+0xb0>)
 80002b2:	4825      	ldr	r0, [pc, #148]	; (8000348 <main+0xb4>)
 80002b4:	f002 fe3a 	bl	8002f2c <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //printf("huart2.RxXferSize=%u\r\n",huart2.RxXferSize);
	  printf("hello wolrd");
 80002b8:	4824      	ldr	r0, [pc, #144]	; (800034c <main+0xb8>)
 80002ba:	f004 fcb7 	bl	8004c2c <iprintf>
      if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)!=GPIO_PIN_SET){
 80002be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c2:	4823      	ldr	r0, [pc, #140]	; (8000350 <main+0xbc>)
 80002c4:	f001 f95a 	bl	800157c <HAL_GPIO_ReadPin>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d009      	beq.n	80002e2 <main+0x4e>
    	  printf("button is pressed \r\n");
 80002ce:	4821      	ldr	r0, [pc, #132]	; (8000354 <main+0xc0>)
 80002d0:	f004 fd32 	bl	8004d38 <puts>
    	  printf("rust number:%u",test());
 80002d4:	f003 fff3 	bl	80042be <test>
 80002d8:	4603      	mov	r3, r0
 80002da:	4619      	mov	r1, r3
 80002dc:	481e      	ldr	r0, [pc, #120]	; (8000358 <main+0xc4>)
 80002de:	f004 fca5 	bl	8004c2c <iprintf>
      }
	  huart2.pRxBuffPtr  = funBuffer;
 80002e2:	4b19      	ldr	r3, [pc, #100]	; (8000348 <main+0xb4>)
 80002e4:	4a17      	ldr	r2, [pc, #92]	; (8000344 <main+0xb0>)
 80002e6:	655a      	str	r2, [r3, #84]	; 0x54
	  //printf("length of char %d",sizeof(char));
	  //printhexlikeshellcode(10,funBuffer);
	  printf("%s",funBuffer);
 80002e8:	4916      	ldr	r1, [pc, #88]	; (8000344 <main+0xb0>)
 80002ea:	481c      	ldr	r0, [pc, #112]	; (800035c <main+0xc8>)
 80002ec:	f004 fc9e 	bl	8004c2c <iprintf>
	  //printf("before transmit\n");
	  //HAL_UART_Transmit(&huart2,(uint8_t *)lel, 3,0xFFFF);
	  //printf("after transmit");
	  //putchar('x');
	  //printf("\r\n");
	  fflush(stdout);
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <main+0xcc>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f004 fabe 	bl	8004878 <fflush>
	  //printf("huart2.RxXferCount=%u\r\n",huart2.RxXferCount);
	  huart2.RxXferCount=1000;
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <main+0xb4>)
 80002fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000302:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  //huart2.Instance->TDR='d';
	  if (huart2.Instance->ISR>>3&1||huart2.Instance->CR1==13){
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <main+0xb4>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	69db      	ldr	r3, [r3, #28]
 800030c:	08db      	lsrs	r3, r3, #3
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d104      	bne.n	8000320 <main+0x8c>
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <main+0xb4>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b0d      	cmp	r3, #13
 800031e:	d107      	bne.n	8000330 <main+0x9c>
		  printf("I can't receive data anymore\r\n");
 8000320:	4810      	ldr	r0, [pc, #64]	; (8000364 <main+0xd0>)
 8000322:	f004 fd09 	bl	8004d38 <puts>
		  //printf("huart2.instance->ISR=%u\r\n",huart2.Instance->ISR);
		  //attempt to fix
		 // huart2.Instance->ISR&=(~(1<<3));
		 // huart2.Instance->CR1=301;
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)funBuffer, 100);
 8000326:	2264      	movs	r2, #100	; 0x64
 8000328:	4906      	ldr	r1, [pc, #24]	; (8000344 <main+0xb0>)
 800032a:	4807      	ldr	r0, [pc, #28]	; (8000348 <main+0xb4>)
 800032c:	f002 fdba 	bl	8002ea4 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, funBuffer, 255, 100);
	  sprintf((char*)funBuffer,"huart2.instance->RDR=%c\r\n",huart2.Instance->RDR);
	  HAL_UART_Transmit(&huart2, funBuffer, 255, 100);
	  memset(UART2_rxBuffer, 0, sizeof(UART2_rxBuffer));
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);*/
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000330:	2120      	movs	r1, #32
 8000332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000336:	f001 f951 	bl	80015dc <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_5);
	  HAL_Delay(1000);
 800033a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033e:	f000 fbc7 	bl	8000ad0 <HAL_Delay>
	  printf("hello wolrd");
 8000342:	e7b9      	b.n	80002b8 <main+0x24>
 8000344:	2000008c 	.word	0x2000008c
 8000348:	200004c8 	.word	0x200004c8
 800034c:	0800571c 	.word	0x0800571c
 8000350:	48000800 	.word	0x48000800
 8000354:	08005728 	.word	0x08005728
 8000358:	0800573c 	.word	0x0800573c
 800035c:	0800574c 	.word	0x0800574c
 8000360:	2000000c 	.word	0x2000000c
 8000364:	08005750 	.word	0x08005750

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b0b8      	sub	sp, #224	; 0xe0
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000372:	2244      	movs	r2, #68	; 0x44
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f003 ffa3 	bl	80042c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800038c:	463b      	mov	r3, r7
 800038e:	2288      	movs	r2, #136	; 0x88
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f003 ff95 	bl	80042c2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000398:	2302      	movs	r3, #2
 800039a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a6:	2310      	movs	r3, #16
 80003a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ac:	2302      	movs	r3, #2
 80003ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b2:	2302      	movs	r3, #2
 80003b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003b8:	2301      	movs	r3, #1
 80003ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003be:	230a      	movs	r3, #10
 80003c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003c4:	2307      	movs	r3, #7
 80003c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003ca:	2302      	movs	r3, #2
 80003cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003d0:	2302      	movs	r3, #2
 80003d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f97c 	bl	80016d8 <HAL_RCC_OscConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003e6:	f000 f913 	bl	8000610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	230f      	movs	r3, #15
 80003ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f0:	2303      	movs	r3, #3
 80003f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000408:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800040c:	2104      	movs	r1, #4
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fd48 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800041a:	f000 f8f9 	bl	8000610 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800041e:	2302      	movs	r3, #2
 8000420:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000422:	2300      	movs	r3, #0
 8000424:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000426:	463b      	mov	r3, r7
 8000428:	4618      	mov	r0, r3
 800042a:	f001 ff41 	bl	80022b0 <HAL_RCCEx_PeriphCLKConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000434:	f000 f8ec 	bl	8000610 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000438:	f44f 7000 	mov.w	r0, #512	; 0x200
 800043c:	f001 f8f6 	bl	800162c <HAL_PWREx_ControlVoltageScaling>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000446:	f000 f8e3 	bl	8000610 <Error_Handler>
  }
}
 800044a:	bf00      	nop
 800044c:	37e0      	adds	r7, #224	; 0xe0
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <MX_USART2_UART_Init+0x58>)
 800045a:	4a15      	ldr	r2, [pc, #84]	; (80004b0 <MX_USART2_UART_Init+0x5c>)
 800045c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_USART2_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_USART2_UART_Init+0x58>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_USART2_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000498:	f002 fbc6 	bl	8002c28 <HAL_UART_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004a2:	f000 f8b5 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200004c8 	.word	0x200004c8
 80004b0:	40004400 	.word	0x40004400

080004b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_DMA_Init+0x38>)
 80004bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <MX_DMA_Init+0x38>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6493      	str	r3, [r2, #72]	; 0x48
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_DMA_Init+0x38>)
 80004c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	2010      	movs	r0, #16
 80004d8:	f000 fbf9 	bl	8000cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004dc:	2010      	movs	r0, #16
 80004de:	f000 fc12 	bl	8000d06 <HAL_NVIC_EnableIRQ>

}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <MX_GPIO_Init+0xe4>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a32      	ldr	r2, [pc, #200]	; (80005d4 <MX_GPIO_Init+0xe4>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <MX_GPIO_Init+0xe4>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <MX_GPIO_Init+0xe4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <MX_GPIO_Init+0xe4>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <MX_GPIO_Init+0xe4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <MX_GPIO_Init+0xe4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <MX_GPIO_Init+0xe4>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <MX_GPIO_Init+0xe4>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <MX_GPIO_Init+0xe4>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a20      	ldr	r2, [pc, #128]	; (80005d4 <MX_GPIO_Init+0xe4>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <MX_GPIO_Init+0xe4>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2120      	movs	r1, #32
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f001 f81d 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_GPIO_Init+0xe8>)
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	4815      	ldr	r0, [pc, #84]	; (80005dc <MX_GPIO_Init+0xec>)
 8000588:	f000 fe4e 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 800058c:	2320      	movs	r3, #32
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 fe3f 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b0:	2312      	movs	r3, #18
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b8:	2303      	movs	r3, #3
 80005ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005bc:	2304      	movs	r3, #4
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <MX_GPIO_Init+0xf0>)
 80005c8:	f000 fe2e 	bl	8001228 <HAL_GPIO_Init>

}
 80005cc:	bf00      	nop
 80005ce:	3728      	adds	r7, #40	; 0x28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	10210000 	.word	0x10210000
 80005dc:	48000800 	.word	0x48000800
 80005e0:	48000400 	.word	0x48000400

080005e4 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
    //printf("Data has been uploaded!\r\n");
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)funBuffer, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	4906      	ldr	r1, [pc, #24]	; (8000608 <HAL_UART_RxCpltCallback+0x24>)
 80005f0:	4806      	ldr	r0, [pc, #24]	; (800060c <HAL_UART_RxCpltCallback+0x28>)
 80005f2:	f002 fbfb 	bl	8002dec <HAL_UART_Transmit_IT>
   // printf("I've been interrupted\r\n");
    HAL_UART_Receive_IT(&huart2, (uint8_t *)funBuffer, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	4903      	ldr	r1, [pc, #12]	; (8000608 <HAL_UART_RxCpltCallback+0x24>)
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <HAL_UART_RxCpltCallback+0x28>)
 80005fc:	f002 fc52 	bl	8002ea4 <HAL_UART_Receive_IT>
    //memset(funBuffer, 0, sizeof(funBuffer));
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000008c 	.word	0x2000008c
 800060c:	200004c8 	.word	0x200004c8

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("THERE HAS BEEN AN ERROR\r\n");
 8000618:	4801      	ldr	r0, [pc, #4]	; (8000620 <Error_Handler+0x10>)
 800061a:	f004 fb8d 	bl	8004d38 <puts>
 800061e:	e7fb      	b.n	8000618 <Error_Handler+0x8>
 8000620:	08005770 	.word	0x08005770

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_MspInit+0x44>)
 800062c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <HAL_MspInit+0x44>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6613      	str	r3, [r2, #96]	; 0x60
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_MspInit+0x44>)
 8000638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <HAL_MspInit+0x44>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <HAL_MspInit+0x44>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	6593      	str	r3, [r2, #88]	; 0x58
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_MspInit+0x44>)
 8000650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a30      	ldr	r2, [pc, #192]	; (800074c <HAL_UART_MspInit+0xe0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d159      	bne.n	8000742 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800068e:	4b30      	ldr	r3, [pc, #192]	; (8000750 <HAL_UART_MspInit+0xe4>)
 8000690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000692:	4a2f      	ldr	r2, [pc, #188]	; (8000750 <HAL_UART_MspInit+0xe4>)
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	6593      	str	r3, [r2, #88]	; 0x58
 800069a:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <HAL_UART_MspInit+0xe4>)
 800069c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <HAL_UART_MspInit+0xe4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a29      	ldr	r2, [pc, #164]	; (8000750 <HAL_UART_MspInit+0xe4>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b27      	ldr	r3, [pc, #156]	; (8000750 <HAL_UART_MspInit+0xe4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006be:	230c      	movs	r3, #12
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006ce:	2307      	movs	r3, #7
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f000 fda4 	bl	8001228 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_UART_MspInit+0xe8>)
 80006e2:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <HAL_UART_MspInit+0xec>)
 80006e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <HAL_UART_MspInit+0xe8>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_UART_MspInit+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_UART_MspInit+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <HAL_UART_MspInit+0xe8>)
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_UART_MspInit+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <HAL_UART_MspInit+0xe8>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_UART_MspInit+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_UART_MspInit+0xe8>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000716:	480f      	ldr	r0, [pc, #60]	; (8000754 <HAL_UART_MspInit+0xe8>)
 8000718:	f000 fb10 	bl	8000d3c <HAL_DMA_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8000722:	f7ff ff75 	bl	8000610 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <HAL_UART_MspInit+0xe8>)
 800072a:	671a      	str	r2, [r3, #112]	; 0x70
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <HAL_UART_MspInit+0xe8>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2026      	movs	r0, #38	; 0x26
 8000738:	f000 fac9 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800073c:	2026      	movs	r0, #38	; 0x26
 800073e:	f000 fae2 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40004400 	.word	0x40004400
 8000750:	40021000 	.word	0x40021000
 8000754:	20000480 	.word	0x20000480
 8000758:	4002006c 	.word	0x4002006c

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a8:	f000 f972 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <DMA1_Channel6_IRQHandler+0x10>)
 80007b6:	f000 fc58 	bl	800106a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000480 	.word	0x20000480

080007c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <USART2_IRQHandler+0x10>)
 80007ca:	f002 fbf3 	bl	8002fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200004c8 	.word	0x200004c8

080007d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	e00a      	b.n	8000800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ea:	f3af 8000 	nop.w
 80007ee:	4601      	mov	r1, r0
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	60ba      	str	r2, [r7, #8]
 80007f6:	b2ca      	uxtb	r2, r1
 80007f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3301      	adds	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	dbf0      	blt.n	80007ea <_read+0x12>
	}

return len;
 8000808:	687b      	ldr	r3, [r7, #4]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b086      	sub	sp, #24
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	e009      	b.n	8000838 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fd1f 	bl	8000270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3301      	adds	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697a      	ldr	r2, [r7, #20]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	dbf1      	blt.n	8000824 <_write+0x12>
	}
	return len;
 8000840:	687b      	ldr	r3, [r7, #4]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <_close>:

int _close(int file)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
	return -1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000872:	605a      	str	r2, [r3, #4]
	return 0;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <_isatty>:

int _isatty(int file)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
	return 1;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <_sbrk+0x5c>)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_sbrk+0x60>)
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x64>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <_sbrk+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e4:	f003 ff00 	bl	80046e8 <__errno>
 80008e8:	4603      	mov	r3, r0
 80008ea:	220c      	movs	r2, #12
 80008ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	e009      	b.n	8000908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <_sbrk+0x64>)
 8000904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20018000 	.word	0x20018000
 8000914:	00000400 	.word	0x00000400
 8000918:	20000474 	.word	0x20000474
 800091c:	20000560 	.word	0x20000560

08000920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <SystemInit+0x5c>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <SystemInit+0x5c>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <SystemInit+0x60>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a11      	ldr	r2, [pc, #68]	; (8000980 <SystemInit+0x60>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <SystemInit+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <SystemInit+0x60>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <SystemInit+0x60>)
 800094c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000950:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000954:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <SystemInit+0x60>)
 8000958:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800095c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <SystemInit+0x60>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a07      	ldr	r2, [pc, #28]	; (8000980 <SystemInit+0x60>)
 8000964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000968:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <SystemInit+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00
 8000980:	40021000 	.word	0x40021000

08000984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000988:	f7ff ffca 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800098c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800098e:	e003      	b.n	8000998 <LoopCopyDataInit>

08000990 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000992:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000994:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000996:	3104      	adds	r1, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000998:	480a      	ldr	r0, [pc, #40]	; (80009c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800099c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800099e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009a0:	d3f6      	bcc.n	8000990 <CopyDataInit>
	ldr	r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80009a4:	e002      	b.n	80009ac <LoopFillZerobss>

080009a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009a8:	f842 3b04 	str.w	r3, [r2], #4

080009ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <LoopForever+0x16>)
	cmp	r2, r3
 80009ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009b0:	d3f9      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f004 f869 	bl	8004a88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b6:	f7ff fc6d 	bl	8000294 <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009bc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80009c0:	0800587c 	.word	0x0800587c
	ldr	r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009c8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80009cc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80009d0:	20000560 	.word	0x20000560

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_Init+0x3c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <HAL_Init+0x3c>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ee:	2003      	movs	r0, #3
 80009f0:	f000 f962 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 f80f 	bl	8000a18 <HAL_InitTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	71fb      	strb	r3, [r7, #7]
 8000a04:	e001      	b.n	8000a0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a06:	f7ff fe0d 	bl	8000624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d023      	beq.n	8000a74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_InitTick+0x70>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f96d 	bl	8000d22 <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10f      	bne.n	8000a6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d809      	bhi.n	8000a68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 f937 	bl	8000cce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_InitTick+0x74>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e007      	b.n	8000a78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e004      	b.n	8000a78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e001      	b.n	8000a78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	2000054c 	.word	0x2000054c

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	2000054c 	.word	0x2000054c

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffde 	bl	8000ab8 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	; (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff29 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff3e 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff8e 	bl	8000c0c <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff31 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffa2 	bl	8000c74 <SysTick_Config>
 8000d30:	4603      	mov	r3, r0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e098      	b.n	8000e80 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b4d      	ldr	r3, [pc, #308]	; (8000e8c <HAL_DMA_Init+0x150>)
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d80f      	bhi.n	8000d7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b4b      	ldr	r3, [pc, #300]	; (8000e90 <HAL_DMA_Init+0x154>)
 8000d62:	4413      	add	r3, r2
 8000d64:	4a4b      	ldr	r2, [pc, #300]	; (8000e94 <HAL_DMA_Init+0x158>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	091b      	lsrs	r3, r3, #4
 8000d6c:	009a      	lsls	r2, r3, #2
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a48      	ldr	r2, [pc, #288]	; (8000e98 <HAL_DMA_Init+0x15c>)
 8000d76:	641a      	str	r2, [r3, #64]	; 0x40
 8000d78:	e00e      	b.n	8000d98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b46      	ldr	r3, [pc, #280]	; (8000e9c <HAL_DMA_Init+0x160>)
 8000d82:	4413      	add	r3, r2
 8000d84:	4a43      	ldr	r2, [pc, #268]	; (8000e94 <HAL_DMA_Init+0x158>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	009a      	lsls	r2, r3, #2
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a42      	ldr	r2, [pc, #264]	; (8000ea0 <HAL_DMA_Init+0x164>)
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000db2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000df2:	d039      	beq.n	8000e68 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	4a27      	ldr	r2, [pc, #156]	; (8000e98 <HAL_DMA_Init+0x15c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d11a      	bne.n	8000e34 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <HAL_DMA_Init+0x168>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f003 031c 	and.w	r3, r3, #28
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	4924      	ldr	r1, [pc, #144]	; (8000ea4 <HAL_DMA_Init+0x168>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <HAL_DMA_Init+0x168>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6859      	ldr	r1, [r3, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e24:	f003 031c 	and.w	r3, r3, #28
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	491d      	ldr	r1, [pc, #116]	; (8000ea4 <HAL_DMA_Init+0x168>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
 8000e32:	e019      	b.n	8000e68 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_DMA_Init+0x16c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3c:	f003 031c 	and.w	r3, r3, #28
 8000e40:	210f      	movs	r1, #15
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	4917      	ldr	r1, [pc, #92]	; (8000ea8 <HAL_DMA_Init+0x16c>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_DMA_Init+0x16c>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6859      	ldr	r1, [r3, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f003 031c 	and.w	r3, r3, #28
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	4911      	ldr	r1, [pc, #68]	; (8000ea8 <HAL_DMA_Init+0x16c>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40020407 	.word	0x40020407
 8000e90:	bffdfff8 	.word	0xbffdfff8
 8000e94:	cccccccd 	.word	0xcccccccd
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	bffdfbf8 	.word	0xbffdfbf8
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	400200a8 	.word	0x400200a8
 8000ea8:	400204a8 	.word	0x400204a8

08000eac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d101      	bne.n	8000ecc <HAL_DMA_Start_IT+0x20>
 8000ec8:	2302      	movs	r3, #2
 8000eca:	e04b      	b.n	8000f64 <HAL_DMA_Start_IT+0xb8>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d13a      	bne.n	8000f56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2200      	movs	r2, #0
 8000eec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f000 f95f 	bl	80011c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d008      	beq.n	8000f24 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 020e 	orr.w	r2, r2, #14
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e00f      	b.n	8000f44 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0204 	bic.w	r2, r2, #4
 8000f32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 020a 	orr.w	r2, r2, #10
 8000f42:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0201 	orr.w	r2, r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e005      	b.n	8000f62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d008      	beq.n	8000f96 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2204      	movs	r2, #4
 8000f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e022      	b.n	8000fdc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 020e 	bic.w	r2, r2, #14
 8000fa4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f003 021c 	and.w	r2, r3, #28
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d005      	beq.n	800100c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2204      	movs	r2, #4
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e029      	b.n	8001060 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 020e 	bic.w	r2, r2, #14
 800101a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	f003 021c 	and.w	r2, r3, #28
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	2101      	movs	r1, #1
 800103a:	fa01 f202 	lsl.w	r2, r1, r2
 800103e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	4798      	blx	r3
    }
  }
  return status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f003 031c 	and.w	r3, r3, #28
 800108a:	2204      	movs	r2, #4
 800108c:	409a      	lsls	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4013      	ands	r3, r2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d026      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x7a>
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d021      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d107      	bne.n	80010be <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0204 	bic.w	r2, r2, #4
 80010bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f003 021c 	and.w	r2, r3, #28
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2104      	movs	r1, #4
 80010cc:	fa01 f202 	lsl.w	r2, r1, r2
 80010d0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d071      	beq.n	80011be <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80010e2:	e06c      	b.n	80011be <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	f003 031c 	and.w	r3, r3, #28
 80010ec:	2202      	movs	r2, #2
 80010ee:	409a      	lsls	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4013      	ands	r3, r2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d02e      	beq.n	8001156 <HAL_DMA_IRQHandler+0xec>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d029      	beq.n	8001156 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10b      	bne.n	8001128 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 020a 	bic.w	r2, r2, #10
 800111e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f003 021c 	and.w	r2, r3, #28
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	2102      	movs	r1, #2
 8001136:	fa01 f202 	lsl.w	r2, r1, r2
 800113a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d038      	beq.n	80011be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001154:	e033      	b.n	80011be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f003 031c 	and.w	r3, r3, #28
 800115e:	2208      	movs	r2, #8
 8001160:	409a      	lsls	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d02a      	beq.n	80011c0 <HAL_DMA_IRQHandler+0x156>
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b00      	cmp	r3, #0
 8001172:	d025      	beq.n	80011c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 020e 	bic.w	r2, r2, #14
 8001182:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001188:	f003 021c 	and.w	r2, r3, #28
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	2101      	movs	r1, #1
 8001192:	fa01 f202 	lsl.w	r2, r1, r2
 8001196:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
}
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f003 021c 	and.w	r2, r3, #28
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	2101      	movs	r1, #1
 80011e4:	fa01 f202 	lsl.w	r2, r1, r2
 80011e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d108      	bne.n	800120c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800120a:	e007      	b.n	800121c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	60da      	str	r2, [r3, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	e17f      	b.n	8001538 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8171 	beq.w	8001532 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d00b      	beq.n	8001270 <HAL_GPIO_Init+0x48>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d007      	beq.n	8001270 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001264:	2b11      	cmp	r3, #17
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b12      	cmp	r3, #18
 800126e:	d130      	bne.n	80012d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012a6:	2201      	movs	r2, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f003 0201 	and.w	r2, r3, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d118      	bne.n	8001310 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012e4:	2201      	movs	r2, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	f003 0201 	and.w	r2, r3, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x128>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b12      	cmp	r3, #18
 800134e:	d123      	bne.n	8001398 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	6939      	ldr	r1, [r7, #16]
 8001394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80ac 	beq.w	8001532 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <HAL_GPIO_Init+0x330>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013de:	4a5e      	ldr	r2, [pc, #376]	; (8001558 <HAL_GPIO_Init+0x330>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6613      	str	r3, [r2, #96]	; 0x60
 80013e6:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <HAL_GPIO_Init+0x330>)
 80013e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013f2:	4a5a      	ldr	r2, [pc, #360]	; (800155c <HAL_GPIO_Init+0x334>)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3302      	adds	r3, #2
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800141c:	d025      	beq.n	800146a <HAL_GPIO_Init+0x242>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4f      	ldr	r2, [pc, #316]	; (8001560 <HAL_GPIO_Init+0x338>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d01f      	beq.n	8001466 <HAL_GPIO_Init+0x23e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <HAL_GPIO_Init+0x33c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x23a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4d      	ldr	r2, [pc, #308]	; (8001568 <HAL_GPIO_Init+0x340>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x236>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4c      	ldr	r2, [pc, #304]	; (800156c <HAL_GPIO_Init+0x344>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x232>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4b      	ldr	r2, [pc, #300]	; (8001570 <HAL_GPIO_Init+0x348>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x22e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4a      	ldr	r2, [pc, #296]	; (8001574 <HAL_GPIO_Init+0x34c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x22a>
 800144e:	2306      	movs	r3, #6
 8001450:	e00c      	b.n	800146c <HAL_GPIO_Init+0x244>
 8001452:	2307      	movs	r3, #7
 8001454:	e00a      	b.n	800146c <HAL_GPIO_Init+0x244>
 8001456:	2305      	movs	r3, #5
 8001458:	e008      	b.n	800146c <HAL_GPIO_Init+0x244>
 800145a:	2304      	movs	r3, #4
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x244>
 800145e:	2303      	movs	r3, #3
 8001460:	e004      	b.n	800146c <HAL_GPIO_Init+0x244>
 8001462:	2302      	movs	r3, #2
 8001464:	e002      	b.n	800146c <HAL_GPIO_Init+0x244>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x244>
 800146a:	2300      	movs	r3, #0
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	f002 0203 	and.w	r2, r2, #3
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	4093      	lsls	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800147c:	4937      	ldr	r1, [pc, #220]	; (800155c <HAL_GPIO_Init+0x334>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <HAL_GPIO_Init+0x350>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ae:	4a32      	ldr	r2, [pc, #200]	; (8001578 <HAL_GPIO_Init+0x350>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014b4:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_GPIO_Init+0x350>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d8:	4a27      	ldr	r2, [pc, #156]	; (8001578 <HAL_GPIO_Init+0x350>)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <HAL_GPIO_Init+0x350>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001502:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <HAL_GPIO_Init+0x350>)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_GPIO_Init+0x350>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <HAL_GPIO_Init+0x350>)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	f47f ae78 	bne.w	8001238 <HAL_GPIO_Init+0x10>
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000
 8001560:	48000400 	.word	0x48000400
 8001564:	48000800 	.word	0x48000800
 8001568:	48000c00 	.word	0x48000c00
 800156c:	48001000 	.word	0x48001000
 8001570:	48001400 	.word	0x48001400
 8001574:	48001800 	.word	0x48001800
 8001578:	40010400 	.word	0x40010400

0800157c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e001      	b.n	800159e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
 80015b8:	4613      	mov	r3, r2
 80015ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015bc:	787b      	ldrb	r3, [r7, #1]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c8:	e002      	b.n	80015d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	041a      	lsls	r2, r3, #16
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43d9      	mvns	r1, r3
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	400b      	ands	r3, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HAL_PWREx_GetVoltageRange+0x18>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40007000 	.word	0x40007000

0800162c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800163a:	d130      	bne.n	800169e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001648:	d038      	beq.n	80016bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001652:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001658:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2232      	movs	r2, #50	; 0x32
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0c9b      	lsrs	r3, r3, #18
 800166c:	3301      	adds	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001670:	e002      	b.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3b01      	subs	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001684:	d102      	bne.n	800168c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f2      	bne.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001698:	d110      	bne.n	80016bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e00f      	b.n	80016be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016aa:	d007      	beq.n	80016bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b4:	4a05      	ldr	r2, [pc, #20]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40007000 	.word	0x40007000
 80016d0:	20000000 	.word	0x20000000
 80016d4:	431bde83 	.word	0x431bde83

080016d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e3d4      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ea:	4ba1      	ldr	r3, [pc, #644]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f4:	4b9e      	ldr	r3, [pc, #632]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80e4 	beq.w	80018d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <HAL_RCC_OscConfig+0x4a>
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	2b0c      	cmp	r3, #12
 8001716:	f040 808b 	bne.w	8001830 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b01      	cmp	r3, #1
 800171e:	f040 8087 	bne.w	8001830 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001722:	4b93      	ldr	r3, [pc, #588]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <HAL_RCC_OscConfig+0x62>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e3ac      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1a      	ldr	r2, [r3, #32]
 800173e:	4b8c      	ldr	r3, [pc, #560]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d004      	beq.n	8001754 <HAL_RCC_OscConfig+0x7c>
 800174a:	4b89      	ldr	r3, [pc, #548]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001752:	e005      	b.n	8001760 <HAL_RCC_OscConfig+0x88>
 8001754:	4b86      	ldr	r3, [pc, #536]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001760:	4293      	cmp	r3, r2
 8001762:	d223      	bcs.n	80017ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fd41 	bl	80021f0 <RCC_SetFlashLatencyFromMSIRange>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e38d      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001778:	4b7d      	ldr	r3, [pc, #500]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a7c      	ldr	r2, [pc, #496]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800177e:	f043 0308 	orr.w	r3, r3, #8
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4977      	ldr	r1, [pc, #476]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001796:	4b76      	ldr	r3, [pc, #472]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	4972      	ldr	r1, [pc, #456]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	604b      	str	r3, [r1, #4]
 80017aa:	e025      	b.n	80017f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ac:	4b70      	ldr	r3, [pc, #448]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a6f      	ldr	r2, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b6d      	ldr	r3, [pc, #436]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	496a      	ldr	r1, [pc, #424]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ca:	4b69      	ldr	r3, [pc, #420]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	4965      	ldr	r1, [pc, #404]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fd01 	bl	80021f0 <RCC_SetFlashLatencyFromMSIRange>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e34d      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017f8:	f000 fc36 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b5c      	ldr	r3, [pc, #368]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	495a      	ldr	r1, [pc, #360]	; (8001974 <HAL_RCC_OscConfig+0x29c>)
 800180a:	5ccb      	ldrb	r3, [r1, r3]
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
 8001814:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_RCC_OscConfig+0x2a0>)
 8001816:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001818:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_RCC_OscConfig+0x2a4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff f8fb 	bl	8000a18 <HAL_InitTick>
 8001822:	4603      	mov	r3, r0
 8001824:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d052      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	e331      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d032      	beq.n	800189e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001838:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a4c      	ldr	r2, [pc, #304]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001844:	f7ff f938 	bl	8000ab8 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184c:	f7ff f934 	bl	8000ab8 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e31a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800185e:	4b44      	ldr	r3, [pc, #272]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186a:	4b41      	ldr	r3, [pc, #260]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a40      	ldr	r2, [pc, #256]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001870:	f043 0308 	orr.w	r3, r3, #8
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	493b      	ldr	r1, [pc, #236]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001888:	4b39      	ldr	r3, [pc, #228]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	4936      	ldr	r1, [pc, #216]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
 800189c:	e01a      	b.n	80018d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800189e:	4b34      	ldr	r3, [pc, #208]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a33      	ldr	r2, [pc, #204]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018aa:	f7ff f905 	bl	8000ab8 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b2:	f7ff f901 	bl	8000ab8 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e2e7      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x1da>
 80018d0:	e000      	b.n	80018d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d074      	beq.n	80019ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d005      	beq.n	80018f2 <HAL_RCC_OscConfig+0x21a>
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b0c      	cmp	r3, #12
 80018ea:	d10e      	bne.n	800190a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d10b      	bne.n	800190a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d064      	beq.n	80019c8 <HAL_RCC_OscConfig+0x2f0>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d160      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e2c4      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x24a>
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a15      	ldr	r2, [pc, #84]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800191a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	e01d      	b.n	800195e <HAL_RCC_OscConfig+0x286>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800192a:	d10c      	bne.n	8001946 <HAL_RCC_OscConfig+0x26e>
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0f      	ldr	r2, [pc, #60]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e00b      	b.n	800195e <HAL_RCC_OscConfig+0x286>
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 800194c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a06      	ldr	r2, [pc, #24]	; (8001970 <HAL_RCC_OscConfig+0x298>)
 8001958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d01c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff f8a7 	bl	8000ab8 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196c:	e011      	b.n	8001992 <HAL_RCC_OscConfig+0x2ba>
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	0800578c 	.word	0x0800578c
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff f89a 	bl	8000ab8 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e280      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001992:	4baf      	ldr	r3, [pc, #700]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x2a8>
 800199e:	e014      	b.n	80019ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff f88a 	bl	8000ab8 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff f886 	bl	8000ab8 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e26c      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ba:	4ba5      	ldr	r3, [pc, #660]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x2d0>
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d060      	beq.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_OscConfig+0x310>
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d119      	bne.n	8001a16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d116      	bne.n	8001a16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e8:	4b99      	ldr	r3, [pc, #612]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_OscConfig+0x328>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e249      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b93      	ldr	r3, [pc, #588]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	4990      	ldr	r1, [pc, #576]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a14:	e040      	b.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d023      	beq.n	8001a66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1e:	4b8c      	ldr	r3, [pc, #560]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a8b      	ldr	r2, [pc, #556]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f845 	bl	8000ab8 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff f841 	bl	8000ab8 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e227      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a44:	4b82      	ldr	r3, [pc, #520]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b7f      	ldr	r3, [pc, #508]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	061b      	lsls	r3, r3, #24
 8001a5e:	497c      	ldr	r1, [pc, #496]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
 8001a64:	e018      	b.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a66:	4b7a      	ldr	r3, [pc, #488]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a79      	ldr	r2, [pc, #484]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff f821 	bl	8000ab8 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f81d 	bl	8000ab8 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e203      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a8c:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d03c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01c      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aac:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab2:	4a67      	ldr	r2, [pc, #412]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7fe fffc 	bl	8000ab8 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7fe fff8 	bl	8000ab8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1de      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad6:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ef      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x3ec>
 8001ae4:	e01b      	b.n	8001b1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae6:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aec:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af6:	f7fe ffdf 	bl	8000ab8 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afe:	f7fe ffdb 	bl	8000ab8 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1c1      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b10:	4b4f      	ldr	r3, [pc, #316]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1ef      	bne.n	8001afe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80a6 	beq.w	8001c78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b30:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10d      	bne.n	8001b58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3c:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	4a43      	ldr	r2, [pc, #268]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b46:	6593      	str	r3, [r2, #88]	; 0x58
 8001b48:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b54:	2301      	movs	r3, #1
 8001b56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b58:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HAL_RCC_OscConfig+0x57c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d118      	bne.n	8001b96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b64:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <HAL_RCC_OscConfig+0x57c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a3a      	ldr	r2, [pc, #232]	; (8001c54 <HAL_RCC_OscConfig+0x57c>)
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b70:	f7fe ffa2 	bl	8000ab8 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b78:	f7fe ff9e 	bl	8000ab8 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e184      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_RCC_OscConfig+0x57c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d108      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x4d8>
 8001b9e:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bae:	e024      	b.n	8001bfa <HAL_RCC_OscConfig+0x522>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d110      	bne.n	8001bda <HAL_RCC_OscConfig+0x502>
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	4a20      	ldr	r2, [pc, #128]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd8:	e00f      	b.n	8001bfa <HAL_RCC_OscConfig+0x522>
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf0:	4a17      	ldr	r2, [pc, #92]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001bf2:	f023 0304 	bic.w	r3, r3, #4
 8001bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d016      	beq.n	8001c30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7fe ff59 	bl	8000ab8 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7fe ff55 	bl	8000ab8 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e139      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_OscConfig+0x578>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0ed      	beq.n	8001c0a <HAL_RCC_OscConfig+0x532>
 8001c2e:	e01a      	b.n	8001c66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7fe ff42 	bl	8000ab8 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c36:	e00f      	b.n	8001c58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c38:	f7fe ff3e 	bl	8000ab8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d906      	bls.n	8001c58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e122      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c58:	4b90      	ldr	r3, [pc, #576]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1e8      	bne.n	8001c38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c66:	7ffb      	ldrb	r3, [r7, #31]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6c:	4b8b      	ldr	r3, [pc, #556]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	4a8a      	ldr	r2, [pc, #552]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8108 	beq.w	8001e92 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	f040 80d0 	bne.w	8001e2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c8c:	4b83      	ldr	r3, [pc, #524]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d130      	bne.n	8001d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	3b01      	subs	r3, #1
 8001cac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d127      	bne.n	8001d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d11f      	bne.n	8001d02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ccc:	2a07      	cmp	r2, #7
 8001cce:	bf14      	ite	ne
 8001cd0:	2201      	movne	r2, #1
 8001cd2:	2200      	moveq	r2, #0
 8001cd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d113      	bne.n	8001d02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d06e      	beq.n	8001de0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	d069      	beq.n	8001ddc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d08:	4b64      	ldr	r3, [pc, #400]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d14:	4b61      	ldr	r3, [pc, #388]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0b7      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d24:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a5c      	ldr	r2, [pc, #368]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d30:	f7fe fec2 	bl	8000ab8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7fe febe 	bl	8000ab8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0a4      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4a:	4b54      	ldr	r3, [pc, #336]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d56:	4b51      	ldr	r3, [pc, #324]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_RCC_OscConfig+0x7c8>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d66:	3a01      	subs	r2, #1
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d70:	0212      	lsls	r2, r2, #8
 8001d72:	4311      	orrs	r1, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d78:	0852      	lsrs	r2, r2, #1
 8001d7a:	3a01      	subs	r2, #1
 8001d7c:	0552      	lsls	r2, r2, #21
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d84:	0852      	lsrs	r2, r2, #1
 8001d86:	3a01      	subs	r2, #1
 8001d88:	0652      	lsls	r2, r2, #25
 8001d8a:	4311      	orrs	r1, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d90:	0912      	lsrs	r2, r2, #4
 8001d92:	0452      	lsls	r2, r2, #17
 8001d94:	430a      	orrs	r2, r1
 8001d96:	4941      	ldr	r1, [pc, #260]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d9c:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a3e      	ldr	r2, [pc, #248]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da8:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001db4:	f7fe fe80 	bl	8000ab8 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7fe fe7c 	bl	8000ab8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e062      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dce:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dda:	e05a      	b.n	8001e92 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e059      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de0:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d152      	bne.n	8001e92 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2a      	ldr	r2, [pc, #168]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e04:	f7fe fe58 	bl	8000ab8 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe fe54 	bl	8000ab8 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e03a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x734>
 8001e2a:	e032      	b.n	8001e92 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d02d      	beq.n	8001e8e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001e38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e4a:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001e50:	f023 0303 	bic.w	r3, r3, #3
 8001e54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001e5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7fe fe27 	bl	8000ab8 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe fe23 	bl	8000ab8 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e009      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_OscConfig+0x7c4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x796>
 8001e8c:	e001      	b.n	8001e92 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	f99d808c 	.word	0xf99d808c

08001ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0c8      	b.n	800204a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b66      	ldr	r3, [pc, #408]	; (8002054 <HAL_RCC_ClockConfig+0x1b0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b63      	ldr	r3, [pc, #396]	; (8002054 <HAL_RCC_ClockConfig+0x1b0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4961      	ldr	r1, [pc, #388]	; (8002054 <HAL_RCC_ClockConfig+0x1b0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <HAL_RCC_ClockConfig+0x1b0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0b0      	b.n	800204a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d04c      	beq.n	8001f8e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efc:	4b56      	ldr	r3, [pc, #344]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d121      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e09e      	b.n	800204a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d115      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e092      	b.n	800204a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f2c:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e086      	b.n	800204a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f3c:	4b46      	ldr	r3, [pc, #280]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e07e      	b.n	800204a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f4c:	4b42      	ldr	r3, [pc, #264]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 0203 	bic.w	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	493f      	ldr	r1, [pc, #252]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f5e:	f7fe fdab 	bl	8000ab8 <HAL_GetTick>
 8001f62:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f66:	f7fe fda7 	bl	8000ab8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e066      	b.n	800204a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 020c 	and.w	r2, r3, #12
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d1eb      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	492c      	ldr	r1, [pc, #176]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fac:	4b29      	ldr	r3, [pc, #164]	; (8002054 <HAL_RCC_ClockConfig+0x1b0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d210      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_RCC_ClockConfig+0x1b0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4924      	ldr	r1, [pc, #144]	; (8002054 <HAL_RCC_ClockConfig+0x1b0>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCC_ClockConfig+0x1b0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e036      	b.n	800204a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4918      	ldr	r1, [pc, #96]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4910      	ldr	r1, [pc, #64]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800201a:	f000 f825 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800201e:	4602      	mov	r2, r0
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_RCC_ClockConfig+0x1b4>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	490c      	ldr	r1, [pc, #48]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	5ccb      	ldrb	r3, [r1, r3]
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fcea 	bl	8000a18 <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
 8002046:	72fb      	strb	r3, [r7, #11]

  return status;
 8002048:	7afb      	ldrb	r3, [r7, #11]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40022000 	.word	0x40022000
 8002058:	40021000 	.word	0x40021000
 800205c:	0800578c 	.word	0x0800578c
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x34>
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d121      	bne.n	80020da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d11e      	bne.n	80020da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	e005      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020b8:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020c4:	4a2b      	ldr	r2, [pc, #172]	; (8002174 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10d      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d102      	bne.n	80020e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_RCC_GetSysClockFreq+0x110>)
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e004      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <HAL_RCC_GetSysClockFreq+0x114>)
 80020ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d134      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d003      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0xa6>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d003      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0xac>
 800210c:	e005      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_RCC_GetSysClockFreq+0x110>)
 8002110:	617b      	str	r3, [r7, #20]
      break;
 8002112:	e005      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_RCC_GetSysClockFreq+0x114>)
 8002116:	617b      	str	r3, [r7, #20]
      break;
 8002118:	e002      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	617b      	str	r3, [r7, #20]
      break;
 800211e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	3301      	adds	r3, #1
 800212c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	fb02 f203 	mul.w	r2, r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	0e5b      	lsrs	r3, r3, #25
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	3301      	adds	r3, #1
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002160:	69bb      	ldr	r3, [r7, #24]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	080057a4 	.word	0x080057a4
 8002178:	00f42400 	.word	0x00f42400
 800217c:	007a1200 	.word	0x007a1200

08002180 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_RCC_GetHCLKFreq+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000000 	.word	0x20000000

08002198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800219c:	f7ff fff0 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	4904      	ldr	r1, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	0800579c 	.word	0x0800579c

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021c8:	f7ff ffda 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0adb      	lsrs	r3, r3, #11
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4904      	ldr	r1, [pc, #16]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	0800579c 	.word	0x0800579c

080021f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002208:	f7ff fa02 	bl	8001610 <HAL_PWREx_GetVoltageRange>
 800220c:	6178      	str	r0, [r7, #20]
 800220e:	e014      	b.n	800223a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002228:	f7ff f9f2 	bl	8001610 <HAL_PWREx_GetVoltageRange>
 800222c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002240:	d10b      	bne.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b80      	cmp	r3, #128	; 0x80
 8002246:	d919      	bls.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2ba0      	cmp	r3, #160	; 0xa0
 800224c:	d902      	bls.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800224e:	2302      	movs	r3, #2
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	e013      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e010      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d902      	bls.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002260:	2303      	movs	r3, #3
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e00a      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d102      	bne.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800226c:	2302      	movs	r3, #2
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	e004      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b70      	cmp	r3, #112	; 0x70
 8002276:	d101      	bne.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002278:	2301      	movs	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 0207 	bic.w	r2, r3, #7
 8002284:	4909      	ldr	r1, [pc, #36]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40022000 	.word	0x40022000

080022b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022b8:	2300      	movs	r3, #0
 80022ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022bc:	2300      	movs	r3, #0
 80022be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d041      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022d4:	d02a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022da:	d824      	bhi.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022e0:	d008      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022e6:	d81e      	bhi.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f0:	d010      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022f2:	e018      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022f4:	4b86      	ldr	r3, [pc, #536]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a85      	ldr	r2, [pc, #532]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002300:	e015      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fabb 	bl	8002884 <RCCEx_PLLSAI1_Config>
 800230e:	4603      	mov	r3, r0
 8002310:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002312:	e00c      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3320      	adds	r3, #32
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fba6 	bl	8002a6c <RCCEx_PLLSAI2_Config>
 8002320:	4603      	mov	r3, r0
 8002322:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002324:	e003      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	74fb      	strb	r3, [r7, #19]
      break;
 800232a:	e000      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800232c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800232e:	7cfb      	ldrb	r3, [r7, #19]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002334:	4b76      	ldr	r3, [pc, #472]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002342:	4973      	ldr	r1, [pc, #460]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800234a:	e001      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800234c:	7cfb      	ldrb	r3, [r7, #19]
 800234e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d041      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002360:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002364:	d02a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002366:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800236a:	d824      	bhi.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800236c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002370:	d008      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002376:	d81e      	bhi.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002380:	d010      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002382:	e018      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002384:	4b62      	ldr	r3, [pc, #392]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a61      	ldr	r2, [pc, #388]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002390:	e015      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fa73 	bl	8002884 <RCCEx_PLLSAI1_Config>
 800239e:	4603      	mov	r3, r0
 80023a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023a2:	e00c      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3320      	adds	r3, #32
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fb5e 	bl	8002a6c <RCCEx_PLLSAI2_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023b4:	e003      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	74fb      	strb	r3, [r7, #19]
      break;
 80023ba:	e000      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10b      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023c4:	4b52      	ldr	r3, [pc, #328]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023d2:	494f      	ldr	r1, [pc, #316]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023da:	e001      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a0 	beq.w	800252e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002402:	2300      	movs	r3, #0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00d      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002408:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	4a40      	ldr	r2, [pc, #256]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002412:	6593      	str	r3, [r2, #88]	; 0x58
 8002414:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002420:	2301      	movs	r3, #1
 8002422:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002424:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800242a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002430:	f7fe fb42 	bl	8000ab8 <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002436:	e009      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002438:	f7fe fb3e 	bl	8000ab8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d902      	bls.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	74fb      	strb	r3, [r7, #19]
        break;
 800244a:	e005      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800244c:	4b31      	ldr	r3, [pc, #196]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ef      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d15c      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800245e:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002468:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01f      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	d019      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002486:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	4a20      	ldr	r2, [pc, #128]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a8:	4a19      	ldr	r2, [pc, #100]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fafd 	bl	8000ab8 <HAL_GetTick>
 80024be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c0:	e00b      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe faf9 	bl	8000ab8 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d902      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	74fb      	strb	r3, [r7, #19]
            break;
 80024d8:	e006      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ec      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024fe:	4904      	ldr	r1, [pc, #16]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002506:	e009      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	74bb      	strb	r3, [r7, #18]
 800250c:	e006      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800251c:	7c7b      	ldrb	r3, [r7, #17]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002522:	4b9e      	ldr	r3, [pc, #632]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	4a9d      	ldr	r2, [pc, #628]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800253a:	4b98      	ldr	r3, [pc, #608]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f023 0203 	bic.w	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	4994      	ldr	r1, [pc, #592]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800255c:	4b8f      	ldr	r3, [pc, #572]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 020c 	bic.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	498c      	ldr	r1, [pc, #560]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800257e:	4b87      	ldr	r3, [pc, #540]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4983      	ldr	r1, [pc, #524]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025a0:	4b7e      	ldr	r3, [pc, #504]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	497b      	ldr	r1, [pc, #492]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025c2:	4b76      	ldr	r3, [pc, #472]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d0:	4972      	ldr	r1, [pc, #456]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025e4:	4b6d      	ldr	r3, [pc, #436]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	496a      	ldr	r1, [pc, #424]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002606:	4b65      	ldr	r3, [pc, #404]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	4961      	ldr	r1, [pc, #388]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002628:	4b5c      	ldr	r3, [pc, #368]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002636:	4959      	ldr	r1, [pc, #356]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002658:	4950      	ldr	r1, [pc, #320]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800266c:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	4948      	ldr	r1, [pc, #288]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800268e:	4b43      	ldr	r3, [pc, #268]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269c:	493f      	ldr	r1, [pc, #252]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d028      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b0:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026be:	4937      	ldr	r1, [pc, #220]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ce:	d106      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4a31      	ldr	r2, [pc, #196]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026da:	60d3      	str	r3, [r2, #12]
 80026dc:	e011      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e6:	d10c      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3304      	adds	r3, #4
 80026ec:	2101      	movs	r1, #1
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f8c8 	bl	8002884 <RCCEx_PLLSAI1_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d028      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	491f      	ldr	r1, [pc, #124]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272c:	d106      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a1a      	ldr	r2, [pc, #104]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002738:	60d3      	str	r3, [r2, #12]
 800273a:	e011      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002744:	d10c      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f899 	bl	8002884 <RCCEx_PLLSAI1_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d02b      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277a:	4908      	ldr	r1, [pc, #32]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800278a:	d109      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a02      	ldr	r2, [pc, #8]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002796:	60d3      	str	r3, [r2, #12]
 8002798:	e014      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 f867 	bl	8002884 <RCCEx_PLLSAI1_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02f      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027de:	4928      	ldr	r1, [pc, #160]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ee:	d10d      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	2102      	movs	r1, #2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f844 	bl	8002884 <RCCEx_PLLSAI1_Config>
 80027fc:	4603      	mov	r3, r0
 80027fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d014      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	74bb      	strb	r3, [r7, #18]
 800280a:	e011      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002814:	d10c      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3320      	adds	r3, #32
 800281a:	2102      	movs	r1, #2
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f925 	bl	8002a6c <RCCEx_PLLSAI2_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286e:	4904      	ldr	r1, [pc, #16]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002876:	7cbb      	ldrb	r3, [r7, #18]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000

08002884 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002892:	4b75      	ldr	r3, [pc, #468]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d018      	beq.n	80028d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800289e:	4b72      	ldr	r3, [pc, #456]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0203 	and.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d10d      	bne.n	80028ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
       ||
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028b6:	4b6c      	ldr	r3, [pc, #432]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
       ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d047      	beq.n	800295a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
 80028ce:	e044      	b.n	800295a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d018      	beq.n	800290a <RCCEx_PLLSAI1_Config+0x86>
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d825      	bhi.n	8002928 <RCCEx_PLLSAI1_Config+0xa4>
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d002      	beq.n	80028e6 <RCCEx_PLLSAI1_Config+0x62>
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d009      	beq.n	80028f8 <RCCEx_PLLSAI1_Config+0x74>
 80028e4:	e020      	b.n	8002928 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028e6:	4b60      	ldr	r3, [pc, #384]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d11d      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f6:	e01a      	b.n	800292e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028f8:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d116      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002908:	e013      	b.n	8002932 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800290a:	4b57      	ldr	r3, [pc, #348]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10f      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002916:	4b54      	ldr	r3, [pc, #336]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002926:	e006      	b.n	8002936 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e004      	b.n	8002938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292e:	bf00      	nop
 8002930:	e002      	b.n	8002938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002932:	bf00      	nop
 8002934:	e000      	b.n	8002938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002936:	bf00      	nop
    }

    if(status == HAL_OK)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10d      	bne.n	800295a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	430b      	orrs	r3, r1
 8002954:	4944      	ldr	r1, [pc, #272]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002956:	4313      	orrs	r3, r2
 8002958:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d17d      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002960:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a40      	ldr	r2, [pc, #256]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800296a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296c:	f7fe f8a4 	bl	8000ab8 <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002972:	e009      	b.n	8002988 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002974:	f7fe f8a0 	bl	8000ab8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d902      	bls.n	8002988 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	73fb      	strb	r3, [r7, #15]
        break;
 8002986:	e005      	b.n	8002994 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002988:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ef      	bne.n	8002974 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d160      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d111      	bne.n	80029c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a0:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6892      	ldr	r2, [r2, #8]
 80029b0:	0211      	lsls	r1, r2, #8
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68d2      	ldr	r2, [r2, #12]
 80029b6:	0912      	lsrs	r2, r2, #4
 80029b8:	0452      	lsls	r2, r2, #17
 80029ba:	430a      	orrs	r2, r1
 80029bc:	492a      	ldr	r1, [pc, #168]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	610b      	str	r3, [r1, #16]
 80029c2:	e027      	b.n	8002a14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d112      	bne.n	80029f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6892      	ldr	r2, [r2, #8]
 80029da:	0211      	lsls	r1, r2, #8
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6912      	ldr	r2, [r2, #16]
 80029e0:	0852      	lsrs	r2, r2, #1
 80029e2:	3a01      	subs	r2, #1
 80029e4:	0552      	lsls	r2, r2, #21
 80029e6:	430a      	orrs	r2, r1
 80029e8:	491f      	ldr	r1, [pc, #124]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	610b      	str	r3, [r1, #16]
 80029ee:	e011      	b.n	8002a14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6892      	ldr	r2, [r2, #8]
 8002a00:	0211      	lsls	r1, r2, #8
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6952      	ldr	r2, [r2, #20]
 8002a06:	0852      	lsrs	r2, r2, #1
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	0652      	lsls	r2, r2, #25
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	4916      	ldr	r1, [pc, #88]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fe f84a 	bl	8000ab8 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a26:	e009      	b.n	8002a3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a28:	f7fe f846 	bl	8000ab8 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d902      	bls.n	8002a3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	73fb      	strb	r3, [r7, #15]
          break;
 8002a3a:	e005      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ef      	beq.n	8002a28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	4904      	ldr	r1, [pc, #16]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000

08002a6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a7a:	4b6a      	ldr	r3, [pc, #424]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d018      	beq.n	8002ab8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a86:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0203 	and.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d10d      	bne.n	8002ab2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
       ||
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a9e:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
       ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d047      	beq.n	8002b42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e044      	b.n	8002b42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d018      	beq.n	8002af2 <RCCEx_PLLSAI2_Config+0x86>
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d825      	bhi.n	8002b10 <RCCEx_PLLSAI2_Config+0xa4>
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d002      	beq.n	8002ace <RCCEx_PLLSAI2_Config+0x62>
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d009      	beq.n	8002ae0 <RCCEx_PLLSAI2_Config+0x74>
 8002acc:	e020      	b.n	8002b10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ace:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d11d      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ade:	e01a      	b.n	8002b16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ae0:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d116      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af0:	e013      	b.n	8002b1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002af2:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10f      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002afe:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b0e:	e006      	b.n	8002b1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	e004      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b16:	bf00      	nop
 8002b18:	e002      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e000      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b26:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	4939      	ldr	r1, [pc, #228]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d167      	bne.n	8002c18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a35      	ldr	r2, [pc, #212]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b54:	f7fd ffb0 	bl	8000ab8 <HAL_GetTick>
 8002b58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b5a:	e009      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b5c:	f7fd ffac 	bl	8000ab8 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d902      	bls.n	8002b70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b6e:	e005      	b.n	8002b7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b70:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ef      	bne.n	8002b5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d14a      	bne.n	8002c18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d111      	bne.n	8002bac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b88:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6892      	ldr	r2, [r2, #8]
 8002b98:	0211      	lsls	r1, r2, #8
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	0912      	lsrs	r2, r2, #4
 8002ba0:	0452      	lsls	r2, r2, #17
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	491f      	ldr	r1, [pc, #124]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	614b      	str	r3, [r1, #20]
 8002baa:	e011      	b.n	8002bd0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6892      	ldr	r2, [r2, #8]
 8002bbc:	0211      	lsls	r1, r2, #8
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6912      	ldr	r2, [r2, #16]
 8002bc2:	0852      	lsrs	r2, r2, #1
 8002bc4:	3a01      	subs	r2, #1
 8002bc6:	0652      	lsls	r2, r2, #25
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	4916      	ldr	r1, [pc, #88]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fd ff6c 	bl	8000ab8 <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002be2:	e009      	b.n	8002bf8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002be4:	f7fd ff68 	bl	8000ab8 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d902      	bls.n	8002bf8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	73fb      	strb	r3, [r7, #15]
          break;
 8002bf6:	e005      	b.n	8002c04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ef      	beq.n	8002be4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	4904      	ldr	r1, [pc, #16]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000

08002c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e040      	b.n	8002cbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fd fd0e 	bl	800066c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2224      	movs	r2, #36	; 0x24
 8002c54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fbd0 	bl	800340c <UART_SetConfig>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e022      	b.n	8002cbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fe4e 	bl	8003920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fed5 	bl	8003a64 <UART_CheckIdleState>
 8002cba:	4603      	mov	r3, r0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	f040 8082 	bne.w	8002de2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_UART_Transmit+0x26>
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e07a      	b.n	8002de4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_UART_Transmit+0x38>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e073      	b.n	8002de4 <HAL_UART_Transmit+0x120>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2221      	movs	r2, #33	; 0x21
 8002d10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d12:	f7fd fed1 	bl	8000ab8 <HAL_GetTick>
 8002d16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d30:	d108      	bne.n	8002d44 <HAL_UART_Transmit+0x80>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d104      	bne.n	8002d44 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	e003      	b.n	8002d4c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002d54:	e02d      	b.n	8002db2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2180      	movs	r1, #128	; 0x80
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fec8 	bl	8003af6 <UART_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e039      	b.n	8002de4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10b      	bne.n	8002d8e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	881a      	ldrh	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d82:	b292      	uxth	r2, r2
 8002d84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	3302      	adds	r3, #2
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	e008      	b.n	8002da0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	b292      	uxth	r2, r2
 8002d98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1cb      	bne.n	8002d56 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2140      	movs	r1, #64	; 0x40
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fe94 	bl	8003af6 <UART_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e005      	b.n	8002de4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d145      	bne.n	8002e8e <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_UART_Transmit_IT+0x22>
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e03e      	b.n	8002e90 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_UART_Transmit_IT+0x34>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e037      	b.n	8002e90 <HAL_UART_Transmit_IT+0xa4>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	88fa      	ldrh	r2, [r7, #6]
 8002e32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2221      	movs	r2, #33	; 0x21
 8002e50:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	d107      	bne.n	8002e6c <HAL_UART_Transmit_IT+0x80>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <HAL_UART_Transmit_IT+0xb0>)
 8002e68:	669a      	str	r2, [r3, #104]	; 0x68
 8002e6a:	e002      	b.n	8002e72 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <HAL_UART_Transmit_IT+0xb4>)
 8002e70:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e88:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
  }
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	0800404d 	.word	0x0800404d
 8002ea0:	08003fd9 	.word	0x08003fd9

08002ea4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d131      	bne.n	8002f1e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_UART_Receive_IT+0x22>
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e02a      	b.n	8002f20 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_UART_Receive_IT+0x34>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e023      	b.n	8002f20 <HAL_UART_Receive_IT+0x7c>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a0f      	ldr	r2, [pc, #60]	; (8002f28 <HAL_UART_Receive_IT+0x84>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00e      	beq.n	8002f0e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f0c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	461a      	mov	r2, r3
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fe6b 	bl	8003bf0 <UART_Start_Receive_IT>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	e000      	b.n	8002f20 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
  }
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40008000 	.word	0x40008000

08002f2c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d131      	bne.n	8002fa6 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_UART_Receive_DMA+0x22>
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e02a      	b.n	8002fa8 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_UART_Receive_DMA+0x34>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e023      	b.n	8002fa8 <HAL_UART_Receive_DMA+0x7c>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <HAL_UART_Receive_DMA+0x84>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00e      	beq.n	8002f96 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f94:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 feaf 	bl	8003d00 <UART_Start_Receive_DMA>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	e000      	b.n	8002fa8 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40008000 	.word	0x40008000

08002fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d113      	bne.n	800300c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00e      	beq.n	800300c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d009      	beq.n	800300c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 81ce 	beq.w	800339e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
      }
      return;
 800300a:	e1c8      	b.n	800339e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80e3 	beq.w	80031da <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d105      	bne.n	800302a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4ba6      	ldr	r3, [pc, #664]	; (80032bc <HAL_UART_IRQHandler+0x308>)
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80d8 	beq.w	80031da <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d010      	beq.n	8003056 <HAL_UART_IRQHandler+0xa2>
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d010      	beq.n	8003082 <HAL_UART_IRQHandler+0xce>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2202      	movs	r2, #2
 8003070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d010      	beq.n	80030ae <HAL_UART_IRQHandler+0xfa>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2204      	movs	r2, #4
 800309c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a4:	f043 0202 	orr.w	r2, r3, #2
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d015      	beq.n	80030e4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2208      	movs	r2, #8
 80030d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030da:	f043 0208 	orr.w	r2, r3, #8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d011      	beq.n	8003112 <HAL_UART_IRQHandler+0x15e>
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00c      	beq.n	8003112 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8142 	beq.w	80033a2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00c      	beq.n	8003142 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003148:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	d004      	beq.n	8003162 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800315e:	2b00      	cmp	r3, #0
 8003160:	d031      	beq.n	80031c6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fe4d 	bl	8003e02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	d123      	bne.n	80031be <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003184:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	2b00      	cmp	r3, #0
 800318c:	d013      	beq.n	80031b6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	4a4b      	ldr	r2, [pc, #300]	; (80032c0 <HAL_UART_IRQHandler+0x30c>)
 8003194:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd ff24 	bl	8000fe8 <HAL_DMA_Abort_IT>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d017      	beq.n	80031d6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80031b0:	4610      	mov	r0, r2
 80031b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	e00f      	b.n	80031d6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f912 	bl	80033e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	e00b      	b.n	80031d6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f90e 	bl	80033e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c4:	e007      	b.n	80031d6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f90a 	bl	80033e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80031d4:	e0e5      	b.n	80033a2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d6:	bf00      	nop
    return;
 80031d8:	e0e3      	b.n	80033a2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	2b01      	cmp	r3, #1
 80031e0:	f040 80a9 	bne.w	8003336 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80a3 	beq.w	8003336 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 809d 	beq.w	8003336 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2210      	movs	r2, #16
 8003202:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d158      	bne.n	80032c4 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800321c:	893b      	ldrh	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80c1 	beq.w	80033a6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800322a:	893a      	ldrh	r2, [r7, #8]
 800322c:	429a      	cmp	r2, r3
 800322e:	f080 80ba 	bcs.w	80033a6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	893a      	ldrh	r2, [r7, #8]
 8003236:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d12a      	bne.n	80032a0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003258:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003278:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0210 	bic.w	r2, r2, #16
 8003294:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd fe66 	bl	8000f6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	4619      	mov	r1, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f89d 	bl	80033f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032ba:	e074      	b.n	80033a6 <HAL_UART_IRQHandler+0x3f2>
 80032bc:	04000120 	.word	0x04000120
 80032c0:	08003fad 	.word	0x08003fad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d063      	beq.n	80033aa <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d060      	beq.n	80033aa <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032f6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0210 	bic.w	r2, r2, #16
 8003328:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800332a:	897b      	ldrh	r3, [r7, #10]
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f860 	bl	80033f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003334:	e039      	b.n	80033aa <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <HAL_UART_IRQHandler+0x3a8>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 ffa8 	bl	80042aa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800335a:	e029      	b.n	80033b0 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01a      	beq.n	80033ae <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
    }
    return;
 8003380:	e015      	b.n	80033ae <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d011      	beq.n	80033b0 <HAL_UART_IRQHandler+0x3fc>
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00c      	beq.n	80033b0 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fe96 	bl	80040c8 <UART_EndTransmit_IT>
    return;
 800339c:	e008      	b.n	80033b0 <HAL_UART_IRQHandler+0x3fc>
      return;
 800339e:	bf00      	nop
 80033a0:	e006      	b.n	80033b0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80033a2:	bf00      	nop
 80033a4:	e004      	b.n	80033b0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80033a6:	bf00      	nop
 80033a8:	e002      	b.n	80033b0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80033ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop

080033b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800340c:	b5b0      	push	{r4, r5, r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	4313      	orrs	r3, r2
 800342e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4bad      	ldr	r3, [pc, #692]	; (80036ec <UART_SetConfig+0x2e0>)
 8003438:	4013      	ands	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	69f9      	ldr	r1, [r7, #28]
 8003440:	430b      	orrs	r3, r1
 8003442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4aa2      	ldr	r2, [pc, #648]	; (80036f0 <UART_SetConfig+0x2e4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	4313      	orrs	r3, r2
 8003472:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	430a      	orrs	r2, r1
 8003486:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a99      	ldr	r2, [pc, #612]	; (80036f4 <UART_SetConfig+0x2e8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d121      	bne.n	80034d6 <UART_SetConfig+0xca>
 8003492:	4b99      	ldr	r3, [pc, #612]	; (80036f8 <UART_SetConfig+0x2ec>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b03      	cmp	r3, #3
 800349e:	d817      	bhi.n	80034d0 <UART_SetConfig+0xc4>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <UART_SetConfig+0x9c>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034c5 	.word	0x080034c5
 80034b0:	080034bf 	.word	0x080034bf
 80034b4:	080034cb 	.word	0x080034cb
 80034b8:	2301      	movs	r3, #1
 80034ba:	76fb      	strb	r3, [r7, #27]
 80034bc:	e0e7      	b.n	800368e <UART_SetConfig+0x282>
 80034be:	2302      	movs	r3, #2
 80034c0:	76fb      	strb	r3, [r7, #27]
 80034c2:	e0e4      	b.n	800368e <UART_SetConfig+0x282>
 80034c4:	2304      	movs	r3, #4
 80034c6:	76fb      	strb	r3, [r7, #27]
 80034c8:	e0e1      	b.n	800368e <UART_SetConfig+0x282>
 80034ca:	2308      	movs	r3, #8
 80034cc:	76fb      	strb	r3, [r7, #27]
 80034ce:	e0de      	b.n	800368e <UART_SetConfig+0x282>
 80034d0:	2310      	movs	r3, #16
 80034d2:	76fb      	strb	r3, [r7, #27]
 80034d4:	e0db      	b.n	800368e <UART_SetConfig+0x282>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a88      	ldr	r2, [pc, #544]	; (80036fc <UART_SetConfig+0x2f0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d132      	bne.n	8003546 <UART_SetConfig+0x13a>
 80034e0:	4b85      	ldr	r3, [pc, #532]	; (80036f8 <UART_SetConfig+0x2ec>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d828      	bhi.n	8003540 <UART_SetConfig+0x134>
 80034ee:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <UART_SetConfig+0xe8>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003529 	.word	0x08003529
 80034f8:	08003541 	.word	0x08003541
 80034fc:	08003541 	.word	0x08003541
 8003500:	08003541 	.word	0x08003541
 8003504:	08003535 	.word	0x08003535
 8003508:	08003541 	.word	0x08003541
 800350c:	08003541 	.word	0x08003541
 8003510:	08003541 	.word	0x08003541
 8003514:	0800352f 	.word	0x0800352f
 8003518:	08003541 	.word	0x08003541
 800351c:	08003541 	.word	0x08003541
 8003520:	08003541 	.word	0x08003541
 8003524:	0800353b 	.word	0x0800353b
 8003528:	2300      	movs	r3, #0
 800352a:	76fb      	strb	r3, [r7, #27]
 800352c:	e0af      	b.n	800368e <UART_SetConfig+0x282>
 800352e:	2302      	movs	r3, #2
 8003530:	76fb      	strb	r3, [r7, #27]
 8003532:	e0ac      	b.n	800368e <UART_SetConfig+0x282>
 8003534:	2304      	movs	r3, #4
 8003536:	76fb      	strb	r3, [r7, #27]
 8003538:	e0a9      	b.n	800368e <UART_SetConfig+0x282>
 800353a:	2308      	movs	r3, #8
 800353c:	76fb      	strb	r3, [r7, #27]
 800353e:	e0a6      	b.n	800368e <UART_SetConfig+0x282>
 8003540:	2310      	movs	r3, #16
 8003542:	76fb      	strb	r3, [r7, #27]
 8003544:	e0a3      	b.n	800368e <UART_SetConfig+0x282>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a6d      	ldr	r2, [pc, #436]	; (8003700 <UART_SetConfig+0x2f4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d120      	bne.n	8003592 <UART_SetConfig+0x186>
 8003550:	4b69      	ldr	r3, [pc, #420]	; (80036f8 <UART_SetConfig+0x2ec>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800355a:	2b30      	cmp	r3, #48	; 0x30
 800355c:	d013      	beq.n	8003586 <UART_SetConfig+0x17a>
 800355e:	2b30      	cmp	r3, #48	; 0x30
 8003560:	d814      	bhi.n	800358c <UART_SetConfig+0x180>
 8003562:	2b20      	cmp	r3, #32
 8003564:	d009      	beq.n	800357a <UART_SetConfig+0x16e>
 8003566:	2b20      	cmp	r3, #32
 8003568:	d810      	bhi.n	800358c <UART_SetConfig+0x180>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <UART_SetConfig+0x168>
 800356e:	2b10      	cmp	r3, #16
 8003570:	d006      	beq.n	8003580 <UART_SetConfig+0x174>
 8003572:	e00b      	b.n	800358c <UART_SetConfig+0x180>
 8003574:	2300      	movs	r3, #0
 8003576:	76fb      	strb	r3, [r7, #27]
 8003578:	e089      	b.n	800368e <UART_SetConfig+0x282>
 800357a:	2302      	movs	r3, #2
 800357c:	76fb      	strb	r3, [r7, #27]
 800357e:	e086      	b.n	800368e <UART_SetConfig+0x282>
 8003580:	2304      	movs	r3, #4
 8003582:	76fb      	strb	r3, [r7, #27]
 8003584:	e083      	b.n	800368e <UART_SetConfig+0x282>
 8003586:	2308      	movs	r3, #8
 8003588:	76fb      	strb	r3, [r7, #27]
 800358a:	e080      	b.n	800368e <UART_SetConfig+0x282>
 800358c:	2310      	movs	r3, #16
 800358e:	76fb      	strb	r3, [r7, #27]
 8003590:	e07d      	b.n	800368e <UART_SetConfig+0x282>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a5b      	ldr	r2, [pc, #364]	; (8003704 <UART_SetConfig+0x2f8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d120      	bne.n	80035de <UART_SetConfig+0x1d2>
 800359c:	4b56      	ldr	r3, [pc, #344]	; (80036f8 <UART_SetConfig+0x2ec>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035a6:	2bc0      	cmp	r3, #192	; 0xc0
 80035a8:	d013      	beq.n	80035d2 <UART_SetConfig+0x1c6>
 80035aa:	2bc0      	cmp	r3, #192	; 0xc0
 80035ac:	d814      	bhi.n	80035d8 <UART_SetConfig+0x1cc>
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	d009      	beq.n	80035c6 <UART_SetConfig+0x1ba>
 80035b2:	2b80      	cmp	r3, #128	; 0x80
 80035b4:	d810      	bhi.n	80035d8 <UART_SetConfig+0x1cc>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <UART_SetConfig+0x1b4>
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d006      	beq.n	80035cc <UART_SetConfig+0x1c0>
 80035be:	e00b      	b.n	80035d8 <UART_SetConfig+0x1cc>
 80035c0:	2300      	movs	r3, #0
 80035c2:	76fb      	strb	r3, [r7, #27]
 80035c4:	e063      	b.n	800368e <UART_SetConfig+0x282>
 80035c6:	2302      	movs	r3, #2
 80035c8:	76fb      	strb	r3, [r7, #27]
 80035ca:	e060      	b.n	800368e <UART_SetConfig+0x282>
 80035cc:	2304      	movs	r3, #4
 80035ce:	76fb      	strb	r3, [r7, #27]
 80035d0:	e05d      	b.n	800368e <UART_SetConfig+0x282>
 80035d2:	2308      	movs	r3, #8
 80035d4:	76fb      	strb	r3, [r7, #27]
 80035d6:	e05a      	b.n	800368e <UART_SetConfig+0x282>
 80035d8:	2310      	movs	r3, #16
 80035da:	76fb      	strb	r3, [r7, #27]
 80035dc:	e057      	b.n	800368e <UART_SetConfig+0x282>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a49      	ldr	r2, [pc, #292]	; (8003708 <UART_SetConfig+0x2fc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d125      	bne.n	8003634 <UART_SetConfig+0x228>
 80035e8:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <UART_SetConfig+0x2ec>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035f6:	d017      	beq.n	8003628 <UART_SetConfig+0x21c>
 80035f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035fc:	d817      	bhi.n	800362e <UART_SetConfig+0x222>
 80035fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003602:	d00b      	beq.n	800361c <UART_SetConfig+0x210>
 8003604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003608:	d811      	bhi.n	800362e <UART_SetConfig+0x222>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <UART_SetConfig+0x20a>
 800360e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003612:	d006      	beq.n	8003622 <UART_SetConfig+0x216>
 8003614:	e00b      	b.n	800362e <UART_SetConfig+0x222>
 8003616:	2300      	movs	r3, #0
 8003618:	76fb      	strb	r3, [r7, #27]
 800361a:	e038      	b.n	800368e <UART_SetConfig+0x282>
 800361c:	2302      	movs	r3, #2
 800361e:	76fb      	strb	r3, [r7, #27]
 8003620:	e035      	b.n	800368e <UART_SetConfig+0x282>
 8003622:	2304      	movs	r3, #4
 8003624:	76fb      	strb	r3, [r7, #27]
 8003626:	e032      	b.n	800368e <UART_SetConfig+0x282>
 8003628:	2308      	movs	r3, #8
 800362a:	76fb      	strb	r3, [r7, #27]
 800362c:	e02f      	b.n	800368e <UART_SetConfig+0x282>
 800362e:	2310      	movs	r3, #16
 8003630:	76fb      	strb	r3, [r7, #27]
 8003632:	e02c      	b.n	800368e <UART_SetConfig+0x282>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a2d      	ldr	r2, [pc, #180]	; (80036f0 <UART_SetConfig+0x2e4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d125      	bne.n	800368a <UART_SetConfig+0x27e>
 800363e:	4b2e      	ldr	r3, [pc, #184]	; (80036f8 <UART_SetConfig+0x2ec>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800364c:	d017      	beq.n	800367e <UART_SetConfig+0x272>
 800364e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003652:	d817      	bhi.n	8003684 <UART_SetConfig+0x278>
 8003654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003658:	d00b      	beq.n	8003672 <UART_SetConfig+0x266>
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365e:	d811      	bhi.n	8003684 <UART_SetConfig+0x278>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <UART_SetConfig+0x260>
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003668:	d006      	beq.n	8003678 <UART_SetConfig+0x26c>
 800366a:	e00b      	b.n	8003684 <UART_SetConfig+0x278>
 800366c:	2300      	movs	r3, #0
 800366e:	76fb      	strb	r3, [r7, #27]
 8003670:	e00d      	b.n	800368e <UART_SetConfig+0x282>
 8003672:	2302      	movs	r3, #2
 8003674:	76fb      	strb	r3, [r7, #27]
 8003676:	e00a      	b.n	800368e <UART_SetConfig+0x282>
 8003678:	2304      	movs	r3, #4
 800367a:	76fb      	strb	r3, [r7, #27]
 800367c:	e007      	b.n	800368e <UART_SetConfig+0x282>
 800367e:	2308      	movs	r3, #8
 8003680:	76fb      	strb	r3, [r7, #27]
 8003682:	e004      	b.n	800368e <UART_SetConfig+0x282>
 8003684:	2310      	movs	r3, #16
 8003686:	76fb      	strb	r3, [r7, #27]
 8003688:	e001      	b.n	800368e <UART_SetConfig+0x282>
 800368a:	2310      	movs	r3, #16
 800368c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a17      	ldr	r2, [pc, #92]	; (80036f0 <UART_SetConfig+0x2e4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	f040 8087 	bne.w	80037a8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800369a:	7efb      	ldrb	r3, [r7, #27]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d837      	bhi.n	8003710 <UART_SetConfig+0x304>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <UART_SetConfig+0x29c>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036cd 	.word	0x080036cd
 80036ac:	08003711 	.word	0x08003711
 80036b0:	080036d5 	.word	0x080036d5
 80036b4:	08003711 	.word	0x08003711
 80036b8:	080036db 	.word	0x080036db
 80036bc:	08003711 	.word	0x08003711
 80036c0:	08003711 	.word	0x08003711
 80036c4:	08003711 	.word	0x08003711
 80036c8:	080036e3 	.word	0x080036e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036cc:	f7fe fd64 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 80036d0:	6178      	str	r0, [r7, #20]
        break;
 80036d2:	e022      	b.n	800371a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <UART_SetConfig+0x300>)
 80036d6:	617b      	str	r3, [r7, #20]
        break;
 80036d8:	e01f      	b.n	800371a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036da:	f7fe fcc5 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 80036de:	6178      	str	r0, [r7, #20]
        break;
 80036e0:	e01b      	b.n	800371a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e6:	617b      	str	r3, [r7, #20]
        break;
 80036e8:	e017      	b.n	800371a <UART_SetConfig+0x30e>
 80036ea:	bf00      	nop
 80036ec:	efff69f3 	.word	0xefff69f3
 80036f0:	40008000 	.word	0x40008000
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40004400 	.word	0x40004400
 8003700:	40004800 	.word	0x40004800
 8003704:	40004c00 	.word	0x40004c00
 8003708:	40005000 	.word	0x40005000
 800370c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	76bb      	strb	r3, [r7, #26]
        break;
 8003718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80f1 	beq.w	8003904 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	429a      	cmp	r2, r3
 8003730:	d305      	bcc.n	800373e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	429a      	cmp	r2, r3
 800373c:	d902      	bls.n	8003744 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	76bb      	strb	r3, [r7, #26]
 8003742:	e0df      	b.n	8003904 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	4618      	mov	r0, r3
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	020b      	lsls	r3, r1, #8
 8003756:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800375a:	0202      	lsls	r2, r0, #8
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	6849      	ldr	r1, [r1, #4]
 8003760:	0849      	lsrs	r1, r1, #1
 8003762:	4608      	mov	r0, r1
 8003764:	f04f 0100 	mov.w	r1, #0
 8003768:	1814      	adds	r4, r2, r0
 800376a:	eb43 0501 	adc.w	r5, r3, r1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	461a      	mov	r2, r3
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	4620      	mov	r0, r4
 800377a:	4629      	mov	r1, r5
 800377c:	f000 fdcc 	bl	8004318 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4613      	mov	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800378e:	d308      	bcc.n	80037a2 <UART_SetConfig+0x396>
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003796:	d204      	bcs.n	80037a2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	60da      	str	r2, [r3, #12]
 80037a0:	e0b0      	b.n	8003904 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	76bb      	strb	r3, [r7, #26]
 80037a6:	e0ad      	b.n	8003904 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b0:	d15c      	bne.n	800386c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80037b2:	7efb      	ldrb	r3, [r7, #27]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d828      	bhi.n	800380a <UART_SetConfig+0x3fe>
 80037b8:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <UART_SetConfig+0x3b4>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	080037e5 	.word	0x080037e5
 80037c4:	080037ed 	.word	0x080037ed
 80037c8:	080037f5 	.word	0x080037f5
 80037cc:	0800380b 	.word	0x0800380b
 80037d0:	080037fb 	.word	0x080037fb
 80037d4:	0800380b 	.word	0x0800380b
 80037d8:	0800380b 	.word	0x0800380b
 80037dc:	0800380b 	.word	0x0800380b
 80037e0:	08003803 	.word	0x08003803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e4:	f7fe fcd8 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 80037e8:	6178      	str	r0, [r7, #20]
        break;
 80037ea:	e013      	b.n	8003814 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ec:	f7fe fcea 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80037f0:	6178      	str	r0, [r7, #20]
        break;
 80037f2:	e00f      	b.n	8003814 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f4:	4b49      	ldr	r3, [pc, #292]	; (800391c <UART_SetConfig+0x510>)
 80037f6:	617b      	str	r3, [r7, #20]
        break;
 80037f8:	e00c      	b.n	8003814 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fa:	f7fe fc35 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 80037fe:	6178      	str	r0, [r7, #20]
        break;
 8003800:	e008      	b.n	8003814 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003806:	617b      	str	r3, [r7, #20]
        break;
 8003808:	e004      	b.n	8003814 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	76bb      	strb	r3, [r7, #26]
        break;
 8003812:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d074      	beq.n	8003904 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	005a      	lsls	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	441a      	add	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	b29b      	uxth	r3, r3
 8003830:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b0f      	cmp	r3, #15
 8003836:	d916      	bls.n	8003866 <UART_SetConfig+0x45a>
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383e:	d212      	bcs.n	8003866 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	b29b      	uxth	r3, r3
 8003844:	f023 030f 	bic.w	r3, r3, #15
 8003848:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	085b      	lsrs	r3, r3, #1
 800384e:	b29b      	uxth	r3, r3
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	b29a      	uxth	r2, r3
 8003856:	89fb      	ldrh	r3, [r7, #14]
 8003858:	4313      	orrs	r3, r2
 800385a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	89fa      	ldrh	r2, [r7, #14]
 8003862:	60da      	str	r2, [r3, #12]
 8003864:	e04e      	b.n	8003904 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	76bb      	strb	r3, [r7, #26]
 800386a:	e04b      	b.n	8003904 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800386c:	7efb      	ldrb	r3, [r7, #27]
 800386e:	2b08      	cmp	r3, #8
 8003870:	d827      	bhi.n	80038c2 <UART_SetConfig+0x4b6>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0x46c>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	0800389d 	.word	0x0800389d
 800387c:	080038a5 	.word	0x080038a5
 8003880:	080038ad 	.word	0x080038ad
 8003884:	080038c3 	.word	0x080038c3
 8003888:	080038b3 	.word	0x080038b3
 800388c:	080038c3 	.word	0x080038c3
 8003890:	080038c3 	.word	0x080038c3
 8003894:	080038c3 	.word	0x080038c3
 8003898:	080038bb 	.word	0x080038bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800389c:	f7fe fc7c 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 80038a0:	6178      	str	r0, [r7, #20]
        break;
 80038a2:	e013      	b.n	80038cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a4:	f7fe fc8e 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80038a8:	6178      	str	r0, [r7, #20]
        break;
 80038aa:	e00f      	b.n	80038cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <UART_SetConfig+0x510>)
 80038ae:	617b      	str	r3, [r7, #20]
        break;
 80038b0:	e00c      	b.n	80038cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b2:	f7fe fbd9 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 80038b6:	6178      	str	r0, [r7, #20]
        break;
 80038b8:	e008      	b.n	80038cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038be:	617b      	str	r3, [r7, #20]
        break;
 80038c0:	e004      	b.n	80038cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	76bb      	strb	r3, [r7, #26]
        break;
 80038ca:	bf00      	nop
    }

    if (pclk != 0U)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d018      	beq.n	8003904 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	085a      	lsrs	r2, r3, #1
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	441a      	add	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	d908      	bls.n	8003900 <UART_SetConfig+0x4f4>
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d204      	bcs.n	8003900 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	e001      	b.n	8003904 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003910:	7ebb      	ldrb	r3, [r7, #26]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3720      	adds	r7, #32
 8003916:	46bd      	mov	sp, r7
 8003918:	bdb0      	pop	{r4, r5, r7, pc}
 800391a:	bf00      	nop
 800391c:	00f42400 	.word	0x00f42400

08003920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01a      	beq.n	8003a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1e:	d10a      	bne.n	8003a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a74:	f7fd f820 	bl	8000ab8 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d10e      	bne.n	8003aa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f82d 	bl	8003af6 <UART_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e023      	b.n	8003aee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d10e      	bne.n	8003ad2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f817 	bl	8003af6 <UART_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e00d      	b.n	8003aee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	4613      	mov	r3, r2
 8003b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b06:	e05e      	b.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d05a      	beq.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b10:	f7fc ffd2 	bl	8000ab8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d302      	bcc.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11b      	bne.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e043      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02c      	beq.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b7a:	d124      	bne.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b84:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e00f      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	bf0c      	ite	eq
 8003bd6:	2301      	moveq	r3, #1
 8003bd8:	2300      	movne	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d091      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	88fa      	ldrh	r2, [r7, #6]
 8003c10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c22:	d10e      	bne.n	8003c42 <UART_Start_Receive_IT+0x52>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <UART_Start_Receive_IT+0x48>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c36:	e02d      	b.n	8003c94 <UART_Start_Receive_IT+0xa4>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	22ff      	movs	r2, #255	; 0xff
 8003c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c40:	e028      	b.n	8003c94 <UART_Start_Receive_IT+0xa4>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10d      	bne.n	8003c66 <UART_Start_Receive_IT+0x76>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d104      	bne.n	8003c5c <UART_Start_Receive_IT+0x6c>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	22ff      	movs	r2, #255	; 0xff
 8003c56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c5a:	e01b      	b.n	8003c94 <UART_Start_Receive_IT+0xa4>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	227f      	movs	r2, #127	; 0x7f
 8003c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c64:	e016      	b.n	8003c94 <UART_Start_Receive_IT+0xa4>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c6e:	d10d      	bne.n	8003c8c <UART_Start_Receive_IT+0x9c>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d104      	bne.n	8003c82 <UART_Start_Receive_IT+0x92>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	227f      	movs	r2, #127	; 0x7f
 8003c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c80:	e008      	b.n	8003c94 <UART_Start_Receive_IT+0xa4>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	223f      	movs	r2, #63	; 0x3f
 8003c86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c8a:	e003      	b.n	8003c94 <UART_Start_Receive_IT+0xa4>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2222      	movs	r2, #34	; 0x22
 8003ca0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cba:	d107      	bne.n	8003ccc <UART_Start_Receive_IT+0xdc>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d103      	bne.n	8003ccc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a0c      	ldr	r2, [pc, #48]	; (8003cf8 <UART_Start_Receive_IT+0x108>)
 8003cc8:	665a      	str	r2, [r3, #100]	; 0x64
 8003cca:	e002      	b.n	8003cd2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <UART_Start_Receive_IT+0x10c>)
 8003cd0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003ce8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	080041d3 	.word	0x080041d3
 8003cfc:	080040fb 	.word	0x080040fb

08003d00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2222      	movs	r2, #34	; 0x22
 8003d28:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d02b      	beq.n	8003d8a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <UART_Start_Receive_DMA+0xcc>)
 8003d38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	4a24      	ldr	r2, [pc, #144]	; (8003dd0 <UART_Start_Receive_DMA+0xd0>)
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a23      	ldr	r2, [pc, #140]	; (8003dd4 <UART_Start_Receive_DMA+0xd4>)
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	2200      	movs	r2, #0
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3324      	adds	r3, #36	; 0x24
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	461a      	mov	r2, r3
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	f7fd f8a1 	bl	8000eac <HAL_DMA_Start_IT>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00c      	beq.n	8003d8a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2210      	movs	r2, #16
 8003d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e01c      	b.n	8003dc4 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	08003e61 	.word	0x08003e61
 8003dd0:	08003ef9 	.word	0x08003ef9
 8003dd4:	08003f31 	.word	0x08003f31

08003dd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003dee:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e18:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0201 	bic.w	r2, r2, #1
 8003e28:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d107      	bne.n	8003e42 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0210 	bic.w	r2, r2, #16
 8003e40:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d12a      	bne.n	8003ed2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e92:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d107      	bne.n	8003ed2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0210 	bic.w	r2, r2, #16
 8003ed0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d107      	bne.n	8003eea <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f7ff fa86 	bl	80033f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ee8:	e002      	b.n	8003ef0 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7fc fb7a 	bl	80005e4 <HAL_UART_RxCpltCallback>
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d109      	bne.n	8003f22 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	4619      	mov	r1, r3
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff fa6a 	bl	80033f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f20:	e002      	b.n	8003f28 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7ff fa52 	bl	80033cc <HAL_UART_RxHalfCpltCallback>
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f54:	2b80      	cmp	r3, #128	; 0x80
 8003f56:	d109      	bne.n	8003f6c <UART_DMAError+0x3c>
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b21      	cmp	r3, #33	; 0x21
 8003f5c:	d106      	bne.n	8003f6c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff ff36 	bl	8003dd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b40      	cmp	r3, #64	; 0x40
 8003f78:	d109      	bne.n	8003f8e <UART_DMAError+0x5e>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b22      	cmp	r3, #34	; 0x22
 8003f7e:	d106      	bne.n	8003f8e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003f88:	6978      	ldr	r0, [r7, #20]
 8003f8a:	f7ff ff3a 	bl	8003e02 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f94:	f043 0210 	orr.w	r2, r3, #16
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f9e:	6978      	ldr	r0, [r7, #20]
 8003fa0:	f7ff fa1e 	bl	80033e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa4:	bf00      	nop
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff fa08 	bl	80033e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe4:	2b21      	cmp	r3, #33	; 0x21
 8003fe6:	d12b      	bne.n	8004040 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d110      	bne.n	8004016 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004002:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004012:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004014:	e014      	b.n	8004040 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	b292      	uxth	r2, r2
 8004022:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004058:	2b21      	cmp	r3, #33	; 0x21
 800405a:	d12f      	bne.n	80040bc <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d110      	bne.n	800408a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004076:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004088:	e018      	b.n	80040bc <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	881a      	ldrh	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800409c:	b292      	uxth	r2, r2
 800409e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a4:	1c9a      	adds	r2, r3, #2
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040de:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff f963 	bl	80033b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004108:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800410e:	2b22      	cmp	r3, #34	; 0x22
 8004110:	d151      	bne.n	80041b6 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004118:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800411a:	89bb      	ldrh	r3, [r7, #12]
 800411c:	b2d9      	uxtb	r1, r3
 800411e:	89fb      	ldrh	r3, [r7, #14]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	400a      	ands	r2, r1
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d13a      	bne.n	80041ca <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004162:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004184:	2b01      	cmp	r3, #1
 8004186:	d10f      	bne.n	80041a8 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0210 	bic.w	r2, r2, #16
 8004196:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff f927 	bl	80033f4 <HAL_UARTEx_RxEventCallback>
 80041a6:	e002      	b.n	80041ae <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7fc fa1b 	bl	80005e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041b4:	e009      	b.n	80041ca <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	8b1b      	ldrh	r3, [r3, #24]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0208 	orr.w	r2, r2, #8
 80041c6:	b292      	uxth	r2, r2
 80041c8:	831a      	strh	r2, [r3, #24]
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041e0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e6:	2b22      	cmp	r3, #34	; 0x22
 80041e8:	d151      	bne.n	800428e <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041f0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80041f8:	89ba      	ldrh	r2, [r7, #12]
 80041fa:	89fb      	ldrh	r3, [r7, #14]
 80041fc:	4013      	ands	r3, r2
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	1c9a      	adds	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d13a      	bne.n	80042a2 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800423a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10f      	bne.n	8004280 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0210 	bic.w	r2, r2, #16
 800426e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004276:	4619      	mov	r1, r3
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff f8bb 	bl	80033f4 <HAL_UARTEx_RxEventCallback>
 800427e:	e002      	b.n	8004286 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fc f9af 	bl	80005e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800428c:	e009      	b.n	80042a2 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	8b1b      	ldrh	r3, [r3, #24]
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0208 	orr.w	r2, r2, #8
 800429e:	b292      	uxth	r2, r2
 80042a0:	831a      	strh	r2, [r3, #24]
}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <test>:
 80042be:	2004      	movs	r0, #4
 80042c0:	4770      	bx	lr

080042c2 <memset>:
 80042c2:	b5d0      	push	{r4, r6, r7, lr}
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	b1fa      	cbz	r2, 8004308 <memset+0x46>
 80042c8:	1e53      	subs	r3, r2, #1
 80042ca:	f002 0c03 	and.w	ip, r2, #3
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d201      	bcs.n	80042d6 <memset+0x14>
 80042d2:	2200      	movs	r2, #0
 80042d4:	e011      	b.n	80042fa <memset+0x38>
 80042d6:	f022 0203 	bic.w	r2, r2, #3
 80042da:	f100 0e01 	add.w	lr, r0, #1
 80042de:	4253      	negs	r3, r2
 80042e0:	f06f 0203 	mvn.w	r2, #3
 80042e4:	eb0e 0402 	add.w	r4, lr, r2
 80042e8:	3204      	adds	r2, #4
 80042ea:	71a1      	strb	r1, [r4, #6]
 80042ec:	7161      	strb	r1, [r4, #5]
 80042ee:	7121      	strb	r1, [r4, #4]
 80042f0:	70e1      	strb	r1, [r4, #3]
 80042f2:	189c      	adds	r4, r3, r2
 80042f4:	3404      	adds	r4, #4
 80042f6:	d1f5      	bne.n	80042e4 <memset+0x22>
 80042f8:	3204      	adds	r2, #4
 80042fa:	f1bc 0f00 	cmp.w	ip, #0
 80042fe:	bf1c      	itt	ne
 8004300:	5481      	strbne	r1, [r0, r2]
 8004302:	f1bc 0f01 	cmpne.w	ip, #1
 8004306:	d100      	bne.n	800430a <memset+0x48>
 8004308:	bdd0      	pop	{r4, r6, r7, pc}
 800430a:	4402      	add	r2, r0
 800430c:	f1bc 0f02 	cmp.w	ip, #2
 8004310:	7051      	strb	r1, [r2, #1]
 8004312:	bf18      	it	ne
 8004314:	7091      	strbne	r1, [r2, #2]
 8004316:	bdd0      	pop	{r4, r6, r7, pc}

08004318 <__aeabi_uldivmod>:
 8004318:	b510      	push	{r4, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	ac02      	add	r4, sp, #8
 800431e:	9400      	str	r4, [sp, #0]
 8004320:	f000 f9d5 	bl	80046ce <__udivmoddi4>
 8004324:	9a02      	ldr	r2, [sp, #8]
 8004326:	9b03      	ldr	r3, [sp, #12]
 8004328:	b004      	add	sp, #16
 800432a:	bd10      	pop	{r4, pc}
 800432c:	defe      	udf	#254	; 0xfe

0800432e <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E>:
 800432e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004330:	af03      	add	r7, sp, #12
 8004332:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
 8004336:	469e      	mov	lr, r3
 8004338:	468b      	mov	fp, r1
 800433a:	4684      	mov	ip, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8095 	beq.w	800446c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x13e>
 8004342:	ebbc 0102 	subs.w	r1, ip, r2
 8004346:	f04f 0000 	mov.w	r0, #0
 800434a:	eb7b 010e 	sbcs.w	r1, fp, lr
 800434e:	f0c0 8113 	bcc.w	8004578 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x24a>
 8004352:	f1bb 0f00 	cmp.w	fp, #0
 8004356:	f000 810f 	beq.w	8004578 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x24a>
 800435a:	fabb f08b 	clz	r0, fp
 800435e:	fabe f18e 	clz	r1, lr
 8004362:	1a08      	subs	r0, r1, r0
 8004364:	f04f 38ff 	mov.w	r8, #4294967295
 8004368:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800436c:	f000 001f 	and.w	r0, r0, #31
 8004370:	f1c3 0520 	rsb	r5, r3, #32
 8004374:	4666      	mov	r6, ip
 8004376:	fa0e f103 	lsl.w	r1, lr, r3
 800437a:	fa02 fa03 	lsl.w	sl, r2, r3
 800437e:	fa22 f505 	lsr.w	r5, r2, r5
 8004382:	4329      	orrs	r1, r5
 8004384:	f1b3 0520 	subs.w	r5, r3, #32
 8004388:	f04f 0301 	mov.w	r3, #1
 800438c:	fa03 f900 	lsl.w	r9, r3, r0
 8004390:	f04f 0000 	mov.w	r0, #0
 8004394:	bf58      	it	pl
 8004396:	fa02 f105 	lslpl.w	r1, r2, r5
 800439a:	bf58      	it	pl
 800439c:	f04f 0a00 	movpl.w	sl, #0
 80043a0:	e008      	b.n	80043b4 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x86>
 80043a2:	4666      	mov	r6, ip
 80043a4:	469b      	mov	fp, r3
 80043a6:	ea4f 131a 	mov.w	r3, sl, lsr #4
 80043aa:	ea43 7a01 	orr.w	sl, r3, r1, lsl #28
 80043ae:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80043b2:	0909      	lsrs	r1, r1, #4
 80043b4:	ebb6 0c0a 	subs.w	ip, r6, sl
 80043b8:	eb6b 0301 	sbc.w	r3, fp, r1
 80043bc:	ebb8 040c 	subs.w	r4, r8, ip
 80043c0:	eb78 0403 	sbcs.w	r4, r8, r3
 80043c4:	da07      	bge.n	80043d6 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0xa8>
 80043c6:	ebbc 0402 	subs.w	r4, ip, r2
 80043ca:	ea40 0009 	orr.w	r0, r0, r9
 80043ce:	eb73 040e 	sbcs.w	r4, r3, lr
 80043d2:	d202      	bcs.n	80043da <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0xac>
 80043d4:	e045      	b.n	8004462 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x134>
 80043d6:	46b4      	mov	ip, r6
 80043d8:	465b      	mov	r3, fp
 80043da:	ea5f 0651 	movs.w	r6, r1, lsr #1
 80043de:	ea4f 043a 	mov.w	r4, sl, rrx
 80043e2:	ebbc 0404 	subs.w	r4, ip, r4
 80043e6:	eb63 0606 	sbc.w	r6, r3, r6
 80043ea:	ebb8 0504 	subs.w	r5, r8, r4
 80043ee:	eb78 0506 	sbcs.w	r5, r8, r6
 80043f2:	da08      	bge.n	8004406 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0xd8>
 80043f4:	1aa3      	subs	r3, r4, r2
 80043f6:	ea40 0059 	orr.w	r0, r0, r9, lsr #1
 80043fa:	eb76 030e 	sbcs.w	r3, r6, lr
 80043fe:	46a4      	mov	ip, r4
 8004400:	4633      	mov	r3, r6
 8004402:	d202      	bcs.n	800440a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0xdc>
 8004404:	e02d      	b.n	8004462 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x134>
 8004406:	4664      	mov	r4, ip
 8004408:	461e      	mov	r6, r3
 800440a:	ea4f 039a 	mov.w	r3, sl, lsr #2
 800440e:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8004412:	ebb4 0c03 	subs.w	ip, r4, r3
 8004416:	eb66 0391 	sbc.w	r3, r6, r1, lsr #2
 800441a:	ebb8 050c 	subs.w	r5, r8, ip
 800441e:	eb78 0503 	sbcs.w	r5, r8, r3
 8004422:	da07      	bge.n	8004434 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x106>
 8004424:	ebbc 0402 	subs.w	r4, ip, r2
 8004428:	ea40 0099 	orr.w	r0, r0, r9, lsr #2
 800442c:	eb73 040e 	sbcs.w	r4, r3, lr
 8004430:	d202      	bcs.n	8004438 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x10a>
 8004432:	e016      	b.n	8004462 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x134>
 8004434:	46a4      	mov	ip, r4
 8004436:	4633      	mov	r3, r6
 8004438:	ea4f 04da 	mov.w	r4, sl, lsr #3
 800443c:	ea44 7441 	orr.w	r4, r4, r1, lsl #29
 8004440:	ebbc 0604 	subs.w	r6, ip, r4
 8004444:	eb63 0bd1 	sbc.w	fp, r3, r1, lsr #3
 8004448:	ebb8 0406 	subs.w	r4, r8, r6
 800444c:	eb78 040b 	sbcs.w	r4, r8, fp
 8004450:	daa7      	bge.n	80043a2 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x74>
 8004452:	1ab3      	subs	r3, r6, r2
 8004454:	ea40 00d9 	orr.w	r0, r0, r9, lsr #3
 8004458:	eb7b 030e 	sbcs.w	r3, fp, lr
 800445c:	46b4      	mov	ip, r6
 800445e:	465b      	mov	r3, fp
 8004460:	d2a1      	bcs.n	80043a6 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x78>
 8004462:	2100      	movs	r1, #0
 8004464:	4662      	mov	r2, ip
 8004466:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 800446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800446c:	f1bb 0f00 	cmp.w	fp, #0
 8004470:	f000 8088 	beq.w	8004584 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x256>
 8004474:	4593      	cmp	fp, r2
 8004476:	f080 808f 	bcs.w	8004598 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x26a>
 800447a:	fab2 f082 	clz	r0, r2
 800447e:	fabb f18b 	clz	r1, fp
 8004482:	1a08      	subs	r0, r1, r0
 8004484:	f1c0 0120 	rsb	r1, r0, #32
 8004488:	bf08      	it	eq
 800448a:	211f      	moveq	r1, #31
 800448c:	f001 033f 	and.w	r3, r1, #63	; 0x3f
 8004490:	f1c3 0620 	rsb	r6, r3, #32
 8004494:	f001 011f 	and.w	r1, r1, #31
 8004498:	fa0e f003 	lsl.w	r0, lr, r3
 800449c:	fa02 f903 	lsl.w	r9, r2, r3
 80044a0:	fa22 f606 	lsr.w	r6, r2, r6
 80044a4:	ea46 0a00 	orr.w	sl, r6, r0
 80044a8:	f1b3 0620 	subs.w	r6, r3, #32
 80044ac:	f04f 0301 	mov.w	r3, #1
 80044b0:	fa03 f801 	lsl.w	r8, r3, r1
 80044b4:	f04f 3eff 	mov.w	lr, #4294967295
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	bf58      	it	pl
 80044be:	fa02 fa06 	lslpl.w	sl, r2, r6
 80044c2:	bf58      	it	pl
 80044c4:	f04f 0900 	movpl.w	r9, #0
 80044c8:	e009      	b.n	80044de <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1b0>
 80044ca:	46ac      	mov	ip, r5
 80044cc:	46b3      	mov	fp, r6
 80044ce:	ea4f 1019 	mov.w	r0, r9, lsr #4
 80044d2:	ea40 790a 	orr.w	r9, r0, sl, lsl #28
 80044d6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80044da:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 80044de:	ebbc 0509 	subs.w	r5, ip, r9
 80044e2:	eb6b 060a 	sbc.w	r6, fp, sl
 80044e6:	ebbe 0105 	subs.w	r1, lr, r5
 80044ea:	eb7e 0106 	sbcs.w	r1, lr, r6
 80044ee:	da03      	bge.n	80044f8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1ca>
 80044f0:	ea43 0308 	orr.w	r3, r3, r8
 80044f4:	b916      	cbnz	r6, 80044fc <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1ce>
 80044f6:	e039      	b.n	800456c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x23e>
 80044f8:	4665      	mov	r5, ip
 80044fa:	465e      	mov	r6, fp
 80044fc:	ea5f 015a 	movs.w	r1, sl, lsr #1
 8004500:	ea4f 0439 	mov.w	r4, r9, rrx
 8004504:	1b2c      	subs	r4, r5, r4
 8004506:	eb66 0101 	sbc.w	r1, r6, r1
 800450a:	ebbe 0004 	subs.w	r0, lr, r4
 800450e:	eb7e 0001 	sbcs.w	r0, lr, r1
 8004512:	da04      	bge.n	800451e <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1f0>
 8004514:	ea43 0358 	orr.w	r3, r3, r8, lsr #1
 8004518:	4625      	mov	r5, r4
 800451a:	b911      	cbnz	r1, 8004522 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1f4>
 800451c:	e026      	b.n	800456c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x23e>
 800451e:	462c      	mov	r4, r5
 8004520:	4631      	mov	r1, r6
 8004522:	ea4f 0099 	mov.w	r0, r9, lsr #2
 8004526:	ea40 708a 	orr.w	r0, r0, sl, lsl #30
 800452a:	1a25      	subs	r5, r4, r0
 800452c:	eb61 069a 	sbc.w	r6, r1, sl, lsr #2
 8004530:	ebbe 0005 	subs.w	r0, lr, r5
 8004534:	eb7e 0006 	sbcs.w	r0, lr, r6
 8004538:	da03      	bge.n	8004542 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x214>
 800453a:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
 800453e:	b916      	cbnz	r6, 8004546 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x218>
 8004540:	e014      	b.n	800456c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x23e>
 8004542:	4625      	mov	r5, r4
 8004544:	460e      	mov	r6, r1
 8004546:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 800454a:	ea40 704a 	orr.w	r0, r0, sl, lsl #29
 800454e:	ebb5 0c00 	subs.w	ip, r5, r0
 8004552:	eb66 0bda 	sbc.w	fp, r6, sl, lsr #3
 8004556:	ebbe 000c 	subs.w	r0, lr, ip
 800455a:	eb7e 000b 	sbcs.w	r0, lr, fp
 800455e:	dab4      	bge.n	80044ca <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x19c>
 8004560:	ea43 03d8 	orr.w	r3, r3, r8, lsr #3
 8004564:	f1bb 0f00 	cmp.w	fp, #0
 8004568:	4665      	mov	r5, ip
 800456a:	d1b0      	bne.n	80044ce <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1a0>
 800456c:	fbb5 f0f2 	udiv	r0, r5, r2
 8004570:	fb00 5c12 	mls	ip, r0, r2, r5
 8004574:	4318      	orrs	r0, r3
 8004576:	e009      	b.n	800458c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x25e>
 8004578:	465b      	mov	r3, fp
 800457a:	2100      	movs	r1, #0
 800457c:	4662      	mov	r2, ip
 800457e:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 8004582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004584:	fbbc f0f2 	udiv	r0, ip, r2
 8004588:	fb00 cc12 	mls	ip, r0, r2, ip
 800458c:	2300      	movs	r3, #0
 800458e:	2100      	movs	r1, #0
 8004590:	4662      	mov	r2, ip
 8004592:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 8004596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004598:	d109      	bne.n	80045ae <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x280>
 800459a:	fbbc f0fb 	udiv	r0, ip, fp
 800459e:	2300      	movs	r3, #0
 80045a0:	fb00 cc1b 	mls	ip, r0, fp, ip
 80045a4:	2101      	movs	r1, #1
 80045a6:	4662      	mov	r2, ip
 80045a8:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 80045ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ae:	fbbb f1f2 	udiv	r1, fp, r2
 80045b2:	2000      	movs	r0, #0
 80045b4:	fb01 b312 	mls	r3, r1, r2, fp
 80045b8:	ebb0 4f12 	cmp.w	r0, r2, lsr #16
 80045bc:	d115      	bne.n	80045ea <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x2bc>
 80045be:	0418      	lsls	r0, r3, #16
 80045c0:	ea40 401c 	orr.w	r0, r0, ip, lsr #16
 80045c4:	fbb0 f3f2 	udiv	r3, r0, r2
 80045c8:	fb03 0012 	mls	r0, r3, r2, r0
 80045cc:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 80045d0:	eacc 4000 	pkhbt	r0, ip, r0, lsl #16
 80045d4:	fbb0 f6f2 	udiv	r6, r0, r2
 80045d8:	fb06 0c12 	mls	ip, r6, r2, r0
 80045dc:	ea46 4003 	orr.w	r0, r6, r3, lsl #16
 80045e0:	2300      	movs	r3, #0
 80045e2:	4662      	mov	r2, ip
 80045e4:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 80045e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ea:	ebbc 0002 	subs.w	r0, ip, r2
 80045ee:	eb73 000e 	sbcs.w	r0, r3, lr
 80045f2:	d204      	bcs.n	80045fe <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x2d0>
 80045f4:	2000      	movs	r0, #0
 80045f6:	4662      	mov	r2, ip
 80045f8:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 80045fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fe:	ea4f 70ce 	mov.w	r0, lr, lsl #31
 8004602:	ea40 0a52 	orr.w	sl, r0, r2, lsr #1
 8004606:	ea4f 79c2 	mov.w	r9, r2, lsl #31
 800460a:	f04f 3eff 	mov.w	lr, #4294967295
 800460e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004612:	2000      	movs	r0, #0
 8004614:	e009      	b.n	800462a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x2fc>
 8004616:	46a4      	mov	ip, r4
 8004618:	462b      	mov	r3, r5
 800461a:	ea4f 1419 	mov.w	r4, r9, lsr #4
 800461e:	ea44 790a 	orr.w	r9, r4, sl, lsl #28
 8004622:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8004626:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 800462a:	ebbc 0409 	subs.w	r4, ip, r9
 800462e:	eb63 050a 	sbc.w	r5, r3, sl
 8004632:	ebbe 0604 	subs.w	r6, lr, r4
 8004636:	eb7e 0605 	sbcs.w	r6, lr, r5
 800463a:	da03      	bge.n	8004644 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x316>
 800463c:	ea40 0008 	orr.w	r0, r0, r8
 8004640:	b915      	cbnz	r5, 8004648 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x31a>
 8004642:	e03a      	b.n	80046ba <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x38c>
 8004644:	4664      	mov	r4, ip
 8004646:	461d      	mov	r5, r3
 8004648:	ea5f 065a 	movs.w	r6, sl, lsr #1
 800464c:	ea4f 0339 	mov.w	r3, r9, rrx
 8004650:	ebb4 0c03 	subs.w	ip, r4, r3
 8004654:	eb65 0606 	sbc.w	r6, r5, r6
 8004658:	ebbe 030c 	subs.w	r3, lr, ip
 800465c:	eb7e 0306 	sbcs.w	r3, lr, r6
 8004660:	da04      	bge.n	800466c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x33e>
 8004662:	ea40 0058 	orr.w	r0, r0, r8, lsr #1
 8004666:	4664      	mov	r4, ip
 8004668:	b916      	cbnz	r6, 8004670 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x342>
 800466a:	e026      	b.n	80046ba <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x38c>
 800466c:	46a4      	mov	ip, r4
 800466e:	462e      	mov	r6, r5
 8004670:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8004674:	ea43 738a 	orr.w	r3, r3, sl, lsl #30
 8004678:	ebbc 0403 	subs.w	r4, ip, r3
 800467c:	eb66 059a 	sbc.w	r5, r6, sl, lsr #2
 8004680:	ebbe 0304 	subs.w	r3, lr, r4
 8004684:	eb7e 0305 	sbcs.w	r3, lr, r5
 8004688:	da03      	bge.n	8004692 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x364>
 800468a:	ea40 0098 	orr.w	r0, r0, r8, lsr #2
 800468e:	b915      	cbnz	r5, 8004696 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x368>
 8004690:	e013      	b.n	80046ba <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x38c>
 8004692:	4664      	mov	r4, ip
 8004694:	4635      	mov	r5, r6
 8004696:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 800469a:	ea43 734a 	orr.w	r3, r3, sl, lsl #29
 800469e:	ebb4 0c03 	subs.w	ip, r4, r3
 80046a2:	eb65 03da 	sbc.w	r3, r5, sl, lsr #3
 80046a6:	ebbe 060c 	subs.w	r6, lr, ip
 80046aa:	eb7e 0603 	sbcs.w	r6, lr, r3
 80046ae:	dab2      	bge.n	8004616 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x2e8>
 80046b0:	ea40 00d8 	orr.w	r0, r0, r8, lsr #3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	4664      	mov	r4, ip
 80046b8:	d1af      	bne.n	800461a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x2ec>
 80046ba:	fbb4 f3f2 	udiv	r3, r4, r2
 80046be:	fb03 4c12 	mls	ip, r3, r2, r4
 80046c2:	4318      	orrs	r0, r3
 80046c4:	2300      	movs	r3, #0
 80046c6:	4662      	mov	r2, ip
 80046c8:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 80046cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046ce <__udivmoddi4>:
 80046ce:	b580      	push	{r7, lr}
 80046d0:	466f      	mov	r7, sp
 80046d2:	f7ff fe2c 	bl	800432e <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E>
 80046d6:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80046da:	f1bc 0f00 	cmp.w	ip, #0
 80046de:	bf18      	it	ne
 80046e0:	e9cc 2300 	strdne	r2, r3, [ip]
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <__errno>:
 80046e8:	4b01      	ldr	r3, [pc, #4]	; (80046f0 <__errno+0x8>)
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	2000000c 	.word	0x2000000c

080046f4 <__sflush_r>:
 80046f4:	898a      	ldrh	r2, [r1, #12]
 80046f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fa:	4605      	mov	r5, r0
 80046fc:	0710      	lsls	r0, r2, #28
 80046fe:	460c      	mov	r4, r1
 8004700:	d458      	bmi.n	80047b4 <__sflush_r+0xc0>
 8004702:	684b      	ldr	r3, [r1, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	dc05      	bgt.n	8004714 <__sflush_r+0x20>
 8004708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	dc02      	bgt.n	8004714 <__sflush_r+0x20>
 800470e:	2000      	movs	r0, #0
 8004710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004716:	2e00      	cmp	r6, #0
 8004718:	d0f9      	beq.n	800470e <__sflush_r+0x1a>
 800471a:	2300      	movs	r3, #0
 800471c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004720:	682f      	ldr	r7, [r5, #0]
 8004722:	602b      	str	r3, [r5, #0]
 8004724:	d032      	beq.n	800478c <__sflush_r+0x98>
 8004726:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	075a      	lsls	r2, r3, #29
 800472c:	d505      	bpl.n	800473a <__sflush_r+0x46>
 800472e:	6863      	ldr	r3, [r4, #4]
 8004730:	1ac0      	subs	r0, r0, r3
 8004732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004734:	b10b      	cbz	r3, 800473a <__sflush_r+0x46>
 8004736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004738:	1ac0      	subs	r0, r0, r3
 800473a:	2300      	movs	r3, #0
 800473c:	4602      	mov	r2, r0
 800473e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004740:	6a21      	ldr	r1, [r4, #32]
 8004742:	4628      	mov	r0, r5
 8004744:	47b0      	blx	r6
 8004746:	1c43      	adds	r3, r0, #1
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	d106      	bne.n	800475a <__sflush_r+0x66>
 800474c:	6829      	ldr	r1, [r5, #0]
 800474e:	291d      	cmp	r1, #29
 8004750:	d82c      	bhi.n	80047ac <__sflush_r+0xb8>
 8004752:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <__sflush_r+0x108>)
 8004754:	40ca      	lsrs	r2, r1
 8004756:	07d6      	lsls	r6, r2, #31
 8004758:	d528      	bpl.n	80047ac <__sflush_r+0xb8>
 800475a:	2200      	movs	r2, #0
 800475c:	6062      	str	r2, [r4, #4]
 800475e:	04d9      	lsls	r1, r3, #19
 8004760:	6922      	ldr	r2, [r4, #16]
 8004762:	6022      	str	r2, [r4, #0]
 8004764:	d504      	bpl.n	8004770 <__sflush_r+0x7c>
 8004766:	1c42      	adds	r2, r0, #1
 8004768:	d101      	bne.n	800476e <__sflush_r+0x7a>
 800476a:	682b      	ldr	r3, [r5, #0]
 800476c:	b903      	cbnz	r3, 8004770 <__sflush_r+0x7c>
 800476e:	6560      	str	r0, [r4, #84]	; 0x54
 8004770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004772:	602f      	str	r7, [r5, #0]
 8004774:	2900      	cmp	r1, #0
 8004776:	d0ca      	beq.n	800470e <__sflush_r+0x1a>
 8004778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800477c:	4299      	cmp	r1, r3
 800477e:	d002      	beq.n	8004786 <__sflush_r+0x92>
 8004780:	4628      	mov	r0, r5
 8004782:	f000 f9a9 	bl	8004ad8 <_free_r>
 8004786:	2000      	movs	r0, #0
 8004788:	6360      	str	r0, [r4, #52]	; 0x34
 800478a:	e7c1      	b.n	8004710 <__sflush_r+0x1c>
 800478c:	6a21      	ldr	r1, [r4, #32]
 800478e:	2301      	movs	r3, #1
 8004790:	4628      	mov	r0, r5
 8004792:	47b0      	blx	r6
 8004794:	1c41      	adds	r1, r0, #1
 8004796:	d1c7      	bne.n	8004728 <__sflush_r+0x34>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0c4      	beq.n	8004728 <__sflush_r+0x34>
 800479e:	2b1d      	cmp	r3, #29
 80047a0:	d001      	beq.n	80047a6 <__sflush_r+0xb2>
 80047a2:	2b16      	cmp	r3, #22
 80047a4:	d101      	bne.n	80047aa <__sflush_r+0xb6>
 80047a6:	602f      	str	r7, [r5, #0]
 80047a8:	e7b1      	b.n	800470e <__sflush_r+0x1a>
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b0:	81a3      	strh	r3, [r4, #12]
 80047b2:	e7ad      	b.n	8004710 <__sflush_r+0x1c>
 80047b4:	690f      	ldr	r7, [r1, #16]
 80047b6:	2f00      	cmp	r7, #0
 80047b8:	d0a9      	beq.n	800470e <__sflush_r+0x1a>
 80047ba:	0793      	lsls	r3, r2, #30
 80047bc:	680e      	ldr	r6, [r1, #0]
 80047be:	bf08      	it	eq
 80047c0:	694b      	ldreq	r3, [r1, #20]
 80047c2:	600f      	str	r7, [r1, #0]
 80047c4:	bf18      	it	ne
 80047c6:	2300      	movne	r3, #0
 80047c8:	eba6 0807 	sub.w	r8, r6, r7
 80047cc:	608b      	str	r3, [r1, #8]
 80047ce:	f1b8 0f00 	cmp.w	r8, #0
 80047d2:	dd9c      	ble.n	800470e <__sflush_r+0x1a>
 80047d4:	6a21      	ldr	r1, [r4, #32]
 80047d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047d8:	4643      	mov	r3, r8
 80047da:	463a      	mov	r2, r7
 80047dc:	4628      	mov	r0, r5
 80047de:	47b0      	blx	r6
 80047e0:	2800      	cmp	r0, #0
 80047e2:	dc06      	bgt.n	80047f2 <__sflush_r+0xfe>
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ea:	81a3      	strh	r3, [r4, #12]
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	e78e      	b.n	8004710 <__sflush_r+0x1c>
 80047f2:	4407      	add	r7, r0
 80047f4:	eba8 0800 	sub.w	r8, r8, r0
 80047f8:	e7e9      	b.n	80047ce <__sflush_r+0xda>
 80047fa:	bf00      	nop
 80047fc:	20400001 	.word	0x20400001

08004800 <_fflush_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	690b      	ldr	r3, [r1, #16]
 8004804:	4605      	mov	r5, r0
 8004806:	460c      	mov	r4, r1
 8004808:	b913      	cbnz	r3, 8004810 <_fflush_r+0x10>
 800480a:	2500      	movs	r5, #0
 800480c:	4628      	mov	r0, r5
 800480e:	bd38      	pop	{r3, r4, r5, pc}
 8004810:	b118      	cbz	r0, 800481a <_fflush_r+0x1a>
 8004812:	6983      	ldr	r3, [r0, #24]
 8004814:	b90b      	cbnz	r3, 800481a <_fflush_r+0x1a>
 8004816:	f000 f899 	bl	800494c <__sinit>
 800481a:	4b14      	ldr	r3, [pc, #80]	; (800486c <_fflush_r+0x6c>)
 800481c:	429c      	cmp	r4, r3
 800481e:	d11b      	bne.n	8004858 <_fflush_r+0x58>
 8004820:	686c      	ldr	r4, [r5, #4]
 8004822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0ef      	beq.n	800480a <_fflush_r+0xa>
 800482a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800482c:	07d0      	lsls	r0, r2, #31
 800482e:	d404      	bmi.n	800483a <_fflush_r+0x3a>
 8004830:	0599      	lsls	r1, r3, #22
 8004832:	d402      	bmi.n	800483a <_fflush_r+0x3a>
 8004834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004836:	f000 f94c 	bl	8004ad2 <__retarget_lock_acquire_recursive>
 800483a:	4628      	mov	r0, r5
 800483c:	4621      	mov	r1, r4
 800483e:	f7ff ff59 	bl	80046f4 <__sflush_r>
 8004842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004844:	07da      	lsls	r2, r3, #31
 8004846:	4605      	mov	r5, r0
 8004848:	d4e0      	bmi.n	800480c <_fflush_r+0xc>
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	059b      	lsls	r3, r3, #22
 800484e:	d4dd      	bmi.n	800480c <_fflush_r+0xc>
 8004850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004852:	f000 f93f 	bl	8004ad4 <__retarget_lock_release_recursive>
 8004856:	e7d9      	b.n	800480c <_fflush_r+0xc>
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <_fflush_r+0x70>)
 800485a:	429c      	cmp	r4, r3
 800485c:	d101      	bne.n	8004862 <_fflush_r+0x62>
 800485e:	68ac      	ldr	r4, [r5, #8]
 8004860:	e7df      	b.n	8004822 <_fflush_r+0x22>
 8004862:	4b04      	ldr	r3, [pc, #16]	; (8004874 <_fflush_r+0x74>)
 8004864:	429c      	cmp	r4, r3
 8004866:	bf08      	it	eq
 8004868:	68ec      	ldreq	r4, [r5, #12]
 800486a:	e7da      	b.n	8004822 <_fflush_r+0x22>
 800486c:	080057f4 	.word	0x080057f4
 8004870:	08005814 	.word	0x08005814
 8004874:	080057d4 	.word	0x080057d4

08004878 <fflush>:
 8004878:	4601      	mov	r1, r0
 800487a:	b920      	cbnz	r0, 8004886 <fflush+0xe>
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <fflush+0x18>)
 800487e:	4905      	ldr	r1, [pc, #20]	; (8004894 <fflush+0x1c>)
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	f000 b8e1 	b.w	8004a48 <_fwalk_reent>
 8004886:	4b04      	ldr	r3, [pc, #16]	; (8004898 <fflush+0x20>)
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	f7ff bfb9 	b.w	8004800 <_fflush_r>
 800488e:	bf00      	nop
 8004890:	08005834 	.word	0x08005834
 8004894:	08004801 	.word	0x08004801
 8004898:	2000000c 	.word	0x2000000c

0800489c <std>:
 800489c:	2300      	movs	r3, #0
 800489e:	b510      	push	{r4, lr}
 80048a0:	4604      	mov	r4, r0
 80048a2:	e9c0 3300 	strd	r3, r3, [r0]
 80048a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048aa:	6083      	str	r3, [r0, #8]
 80048ac:	8181      	strh	r1, [r0, #12]
 80048ae:	6643      	str	r3, [r0, #100]	; 0x64
 80048b0:	81c2      	strh	r2, [r0, #14]
 80048b2:	6183      	str	r3, [r0, #24]
 80048b4:	4619      	mov	r1, r3
 80048b6:	2208      	movs	r2, #8
 80048b8:	305c      	adds	r0, #92	; 0x5c
 80048ba:	f7ff fd02 	bl	80042c2 <memset>
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <std+0x38>)
 80048c0:	6263      	str	r3, [r4, #36]	; 0x24
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <std+0x3c>)
 80048c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80048c6:	4b05      	ldr	r3, [pc, #20]	; (80048dc <std+0x40>)
 80048c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <std+0x44>)
 80048cc:	6224      	str	r4, [r4, #32]
 80048ce:	6323      	str	r3, [r4, #48]	; 0x30
 80048d0:	bd10      	pop	{r4, pc}
 80048d2:	bf00      	nop
 80048d4:	08004d69 	.word	0x08004d69
 80048d8:	08004d8b 	.word	0x08004d8b
 80048dc:	08004dc3 	.word	0x08004dc3
 80048e0:	08004de7 	.word	0x08004de7

080048e4 <_cleanup_r>:
 80048e4:	4901      	ldr	r1, [pc, #4]	; (80048ec <_cleanup_r+0x8>)
 80048e6:	f000 b8af 	b.w	8004a48 <_fwalk_reent>
 80048ea:	bf00      	nop
 80048ec:	08004801 	.word	0x08004801

080048f0 <__sfmoreglue>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	1e4a      	subs	r2, r1, #1
 80048f4:	2568      	movs	r5, #104	; 0x68
 80048f6:	4355      	muls	r5, r2
 80048f8:	460e      	mov	r6, r1
 80048fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80048fe:	f000 f93b 	bl	8004b78 <_malloc_r>
 8004902:	4604      	mov	r4, r0
 8004904:	b140      	cbz	r0, 8004918 <__sfmoreglue+0x28>
 8004906:	2100      	movs	r1, #0
 8004908:	e9c0 1600 	strd	r1, r6, [r0]
 800490c:	300c      	adds	r0, #12
 800490e:	60a0      	str	r0, [r4, #8]
 8004910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004914:	f7ff fcd5 	bl	80042c2 <memset>
 8004918:	4620      	mov	r0, r4
 800491a:	bd70      	pop	{r4, r5, r6, pc}

0800491c <__sfp_lock_acquire>:
 800491c:	4801      	ldr	r0, [pc, #4]	; (8004924 <__sfp_lock_acquire+0x8>)
 800491e:	f000 b8d8 	b.w	8004ad2 <__retarget_lock_acquire_recursive>
 8004922:	bf00      	nop
 8004924:	20000558 	.word	0x20000558

08004928 <__sfp_lock_release>:
 8004928:	4801      	ldr	r0, [pc, #4]	; (8004930 <__sfp_lock_release+0x8>)
 800492a:	f000 b8d3 	b.w	8004ad4 <__retarget_lock_release_recursive>
 800492e:	bf00      	nop
 8004930:	20000558 	.word	0x20000558

08004934 <__sinit_lock_acquire>:
 8004934:	4801      	ldr	r0, [pc, #4]	; (800493c <__sinit_lock_acquire+0x8>)
 8004936:	f000 b8cc 	b.w	8004ad2 <__retarget_lock_acquire_recursive>
 800493a:	bf00      	nop
 800493c:	20000553 	.word	0x20000553

08004940 <__sinit_lock_release>:
 8004940:	4801      	ldr	r0, [pc, #4]	; (8004948 <__sinit_lock_release+0x8>)
 8004942:	f000 b8c7 	b.w	8004ad4 <__retarget_lock_release_recursive>
 8004946:	bf00      	nop
 8004948:	20000553 	.word	0x20000553

0800494c <__sinit>:
 800494c:	b510      	push	{r4, lr}
 800494e:	4604      	mov	r4, r0
 8004950:	f7ff fff0 	bl	8004934 <__sinit_lock_acquire>
 8004954:	69a3      	ldr	r3, [r4, #24]
 8004956:	b11b      	cbz	r3, 8004960 <__sinit+0x14>
 8004958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800495c:	f7ff bff0 	b.w	8004940 <__sinit_lock_release>
 8004960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004964:	6523      	str	r3, [r4, #80]	; 0x50
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <__sinit+0x68>)
 8004968:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <__sinit+0x6c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	62a2      	str	r2, [r4, #40]	; 0x28
 800496e:	42a3      	cmp	r3, r4
 8004970:	bf04      	itt	eq
 8004972:	2301      	moveq	r3, #1
 8004974:	61a3      	streq	r3, [r4, #24]
 8004976:	4620      	mov	r0, r4
 8004978:	f000 f820 	bl	80049bc <__sfp>
 800497c:	6060      	str	r0, [r4, #4]
 800497e:	4620      	mov	r0, r4
 8004980:	f000 f81c 	bl	80049bc <__sfp>
 8004984:	60a0      	str	r0, [r4, #8]
 8004986:	4620      	mov	r0, r4
 8004988:	f000 f818 	bl	80049bc <__sfp>
 800498c:	2200      	movs	r2, #0
 800498e:	60e0      	str	r0, [r4, #12]
 8004990:	2104      	movs	r1, #4
 8004992:	6860      	ldr	r0, [r4, #4]
 8004994:	f7ff ff82 	bl	800489c <std>
 8004998:	68a0      	ldr	r0, [r4, #8]
 800499a:	2201      	movs	r2, #1
 800499c:	2109      	movs	r1, #9
 800499e:	f7ff ff7d 	bl	800489c <std>
 80049a2:	68e0      	ldr	r0, [r4, #12]
 80049a4:	2202      	movs	r2, #2
 80049a6:	2112      	movs	r1, #18
 80049a8:	f7ff ff78 	bl	800489c <std>
 80049ac:	2301      	movs	r3, #1
 80049ae:	61a3      	str	r3, [r4, #24]
 80049b0:	e7d2      	b.n	8004958 <__sinit+0xc>
 80049b2:	bf00      	nop
 80049b4:	08005834 	.word	0x08005834
 80049b8:	080048e5 	.word	0x080048e5

080049bc <__sfp>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	4607      	mov	r7, r0
 80049c0:	f7ff ffac 	bl	800491c <__sfp_lock_acquire>
 80049c4:	4b1e      	ldr	r3, [pc, #120]	; (8004a40 <__sfp+0x84>)
 80049c6:	681e      	ldr	r6, [r3, #0]
 80049c8:	69b3      	ldr	r3, [r6, #24]
 80049ca:	b913      	cbnz	r3, 80049d2 <__sfp+0x16>
 80049cc:	4630      	mov	r0, r6
 80049ce:	f7ff ffbd 	bl	800494c <__sinit>
 80049d2:	3648      	adds	r6, #72	; 0x48
 80049d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049d8:	3b01      	subs	r3, #1
 80049da:	d503      	bpl.n	80049e4 <__sfp+0x28>
 80049dc:	6833      	ldr	r3, [r6, #0]
 80049de:	b30b      	cbz	r3, 8004a24 <__sfp+0x68>
 80049e0:	6836      	ldr	r6, [r6, #0]
 80049e2:	e7f7      	b.n	80049d4 <__sfp+0x18>
 80049e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049e8:	b9d5      	cbnz	r5, 8004a20 <__sfp+0x64>
 80049ea:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <__sfp+0x88>)
 80049ec:	60e3      	str	r3, [r4, #12]
 80049ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049f2:	6665      	str	r5, [r4, #100]	; 0x64
 80049f4:	f000 f86c 	bl	8004ad0 <__retarget_lock_init_recursive>
 80049f8:	f7ff ff96 	bl	8004928 <__sfp_lock_release>
 80049fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a04:	6025      	str	r5, [r4, #0]
 8004a06:	61a5      	str	r5, [r4, #24]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a10:	f7ff fc57 	bl	80042c2 <memset>
 8004a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a20:	3468      	adds	r4, #104	; 0x68
 8004a22:	e7d9      	b.n	80049d8 <__sfp+0x1c>
 8004a24:	2104      	movs	r1, #4
 8004a26:	4638      	mov	r0, r7
 8004a28:	f7ff ff62 	bl	80048f0 <__sfmoreglue>
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	6030      	str	r0, [r6, #0]
 8004a30:	2800      	cmp	r0, #0
 8004a32:	d1d5      	bne.n	80049e0 <__sfp+0x24>
 8004a34:	f7ff ff78 	bl	8004928 <__sfp_lock_release>
 8004a38:	230c      	movs	r3, #12
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	e7ee      	b.n	8004a1c <__sfp+0x60>
 8004a3e:	bf00      	nop
 8004a40:	08005834 	.word	0x08005834
 8004a44:	ffff0001 	.word	0xffff0001

08004a48 <_fwalk_reent>:
 8004a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	4688      	mov	r8, r1
 8004a50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a54:	2700      	movs	r7, #0
 8004a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a5a:	f1b9 0901 	subs.w	r9, r9, #1
 8004a5e:	d505      	bpl.n	8004a6c <_fwalk_reent+0x24>
 8004a60:	6824      	ldr	r4, [r4, #0]
 8004a62:	2c00      	cmp	r4, #0
 8004a64:	d1f7      	bne.n	8004a56 <_fwalk_reent+0xe>
 8004a66:	4638      	mov	r0, r7
 8004a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a6c:	89ab      	ldrh	r3, [r5, #12]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d907      	bls.n	8004a82 <_fwalk_reent+0x3a>
 8004a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a76:	3301      	adds	r3, #1
 8004a78:	d003      	beq.n	8004a82 <_fwalk_reent+0x3a>
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	47c0      	blx	r8
 8004a80:	4307      	orrs	r7, r0
 8004a82:	3568      	adds	r5, #104	; 0x68
 8004a84:	e7e9      	b.n	8004a5a <_fwalk_reent+0x12>
	...

08004a88 <__libc_init_array>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	4d0d      	ldr	r5, [pc, #52]	; (8004ac0 <__libc_init_array+0x38>)
 8004a8c:	4c0d      	ldr	r4, [pc, #52]	; (8004ac4 <__libc_init_array+0x3c>)
 8004a8e:	1b64      	subs	r4, r4, r5
 8004a90:	10a4      	asrs	r4, r4, #2
 8004a92:	2600      	movs	r6, #0
 8004a94:	42a6      	cmp	r6, r4
 8004a96:	d109      	bne.n	8004aac <__libc_init_array+0x24>
 8004a98:	4d0b      	ldr	r5, [pc, #44]	; (8004ac8 <__libc_init_array+0x40>)
 8004a9a:	4c0c      	ldr	r4, [pc, #48]	; (8004acc <__libc_init_array+0x44>)
 8004a9c:	f000 fe2e 	bl	80056fc <_init>
 8004aa0:	1b64      	subs	r4, r4, r5
 8004aa2:	10a4      	asrs	r4, r4, #2
 8004aa4:	2600      	movs	r6, #0
 8004aa6:	42a6      	cmp	r6, r4
 8004aa8:	d105      	bne.n	8004ab6 <__libc_init_array+0x2e>
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
 8004aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab0:	4798      	blx	r3
 8004ab2:	3601      	adds	r6, #1
 8004ab4:	e7ee      	b.n	8004a94 <__libc_init_array+0xc>
 8004ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aba:	4798      	blx	r3
 8004abc:	3601      	adds	r6, #1
 8004abe:	e7f2      	b.n	8004aa6 <__libc_init_array+0x1e>
 8004ac0:	08005874 	.word	0x08005874
 8004ac4:	08005874 	.word	0x08005874
 8004ac8:	08005874 	.word	0x08005874
 8004acc:	08005878 	.word	0x08005878

08004ad0 <__retarget_lock_init_recursive>:
 8004ad0:	4770      	bx	lr

08004ad2 <__retarget_lock_acquire_recursive>:
 8004ad2:	4770      	bx	lr

08004ad4 <__retarget_lock_release_recursive>:
 8004ad4:	4770      	bx	lr
	...

08004ad8 <_free_r>:
 8004ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ada:	2900      	cmp	r1, #0
 8004adc:	d048      	beq.n	8004b70 <_free_r+0x98>
 8004ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ae2:	9001      	str	r0, [sp, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f1a1 0404 	sub.w	r4, r1, #4
 8004aea:	bfb8      	it	lt
 8004aec:	18e4      	addlt	r4, r4, r3
 8004aee:	f000 fad7 	bl	80050a0 <__malloc_lock>
 8004af2:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <_free_r+0x9c>)
 8004af4:	9801      	ldr	r0, [sp, #4]
 8004af6:	6813      	ldr	r3, [r2, #0]
 8004af8:	4615      	mov	r5, r2
 8004afa:	b933      	cbnz	r3, 8004b0a <_free_r+0x32>
 8004afc:	6063      	str	r3, [r4, #4]
 8004afe:	6014      	str	r4, [r2, #0]
 8004b00:	b003      	add	sp, #12
 8004b02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b06:	f000 bad1 	b.w	80050ac <__malloc_unlock>
 8004b0a:	42a3      	cmp	r3, r4
 8004b0c:	d90b      	bls.n	8004b26 <_free_r+0x4e>
 8004b0e:	6821      	ldr	r1, [r4, #0]
 8004b10:	1862      	adds	r2, r4, r1
 8004b12:	4293      	cmp	r3, r2
 8004b14:	bf04      	itt	eq
 8004b16:	681a      	ldreq	r2, [r3, #0]
 8004b18:	685b      	ldreq	r3, [r3, #4]
 8004b1a:	6063      	str	r3, [r4, #4]
 8004b1c:	bf04      	itt	eq
 8004b1e:	1852      	addeq	r2, r2, r1
 8004b20:	6022      	streq	r2, [r4, #0]
 8004b22:	602c      	str	r4, [r5, #0]
 8004b24:	e7ec      	b.n	8004b00 <_free_r+0x28>
 8004b26:	461a      	mov	r2, r3
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	b10b      	cbz	r3, 8004b30 <_free_r+0x58>
 8004b2c:	42a3      	cmp	r3, r4
 8004b2e:	d9fa      	bls.n	8004b26 <_free_r+0x4e>
 8004b30:	6811      	ldr	r1, [r2, #0]
 8004b32:	1855      	adds	r5, r2, r1
 8004b34:	42a5      	cmp	r5, r4
 8004b36:	d10b      	bne.n	8004b50 <_free_r+0x78>
 8004b38:	6824      	ldr	r4, [r4, #0]
 8004b3a:	4421      	add	r1, r4
 8004b3c:	1854      	adds	r4, r2, r1
 8004b3e:	42a3      	cmp	r3, r4
 8004b40:	6011      	str	r1, [r2, #0]
 8004b42:	d1dd      	bne.n	8004b00 <_free_r+0x28>
 8004b44:	681c      	ldr	r4, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	6053      	str	r3, [r2, #4]
 8004b4a:	4421      	add	r1, r4
 8004b4c:	6011      	str	r1, [r2, #0]
 8004b4e:	e7d7      	b.n	8004b00 <_free_r+0x28>
 8004b50:	d902      	bls.n	8004b58 <_free_r+0x80>
 8004b52:	230c      	movs	r3, #12
 8004b54:	6003      	str	r3, [r0, #0]
 8004b56:	e7d3      	b.n	8004b00 <_free_r+0x28>
 8004b58:	6825      	ldr	r5, [r4, #0]
 8004b5a:	1961      	adds	r1, r4, r5
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	bf04      	itt	eq
 8004b60:	6819      	ldreq	r1, [r3, #0]
 8004b62:	685b      	ldreq	r3, [r3, #4]
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	bf04      	itt	eq
 8004b68:	1949      	addeq	r1, r1, r5
 8004b6a:	6021      	streq	r1, [r4, #0]
 8004b6c:	6054      	str	r4, [r2, #4]
 8004b6e:	e7c7      	b.n	8004b00 <_free_r+0x28>
 8004b70:	b003      	add	sp, #12
 8004b72:	bd30      	pop	{r4, r5, pc}
 8004b74:	20000478 	.word	0x20000478

08004b78 <_malloc_r>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	1ccd      	adds	r5, r1, #3
 8004b7c:	f025 0503 	bic.w	r5, r5, #3
 8004b80:	3508      	adds	r5, #8
 8004b82:	2d0c      	cmp	r5, #12
 8004b84:	bf38      	it	cc
 8004b86:	250c      	movcc	r5, #12
 8004b88:	2d00      	cmp	r5, #0
 8004b8a:	4606      	mov	r6, r0
 8004b8c:	db01      	blt.n	8004b92 <_malloc_r+0x1a>
 8004b8e:	42a9      	cmp	r1, r5
 8004b90:	d903      	bls.n	8004b9a <_malloc_r+0x22>
 8004b92:	230c      	movs	r3, #12
 8004b94:	6033      	str	r3, [r6, #0]
 8004b96:	2000      	movs	r0, #0
 8004b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b9a:	f000 fa81 	bl	80050a0 <__malloc_lock>
 8004b9e:	4921      	ldr	r1, [pc, #132]	; (8004c24 <_malloc_r+0xac>)
 8004ba0:	680a      	ldr	r2, [r1, #0]
 8004ba2:	4614      	mov	r4, r2
 8004ba4:	b99c      	cbnz	r4, 8004bce <_malloc_r+0x56>
 8004ba6:	4f20      	ldr	r7, [pc, #128]	; (8004c28 <_malloc_r+0xb0>)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	b923      	cbnz	r3, 8004bb6 <_malloc_r+0x3e>
 8004bac:	4621      	mov	r1, r4
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f000 f8ca 	bl	8004d48 <_sbrk_r>
 8004bb4:	6038      	str	r0, [r7, #0]
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f000 f8c5 	bl	8004d48 <_sbrk_r>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	d123      	bne.n	8004c0a <_malloc_r+0x92>
 8004bc2:	230c      	movs	r3, #12
 8004bc4:	6033      	str	r3, [r6, #0]
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f000 fa70 	bl	80050ac <__malloc_unlock>
 8004bcc:	e7e3      	b.n	8004b96 <_malloc_r+0x1e>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	1b5b      	subs	r3, r3, r5
 8004bd2:	d417      	bmi.n	8004c04 <_malloc_r+0x8c>
 8004bd4:	2b0b      	cmp	r3, #11
 8004bd6:	d903      	bls.n	8004be0 <_malloc_r+0x68>
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	441c      	add	r4, r3
 8004bdc:	6025      	str	r5, [r4, #0]
 8004bde:	e004      	b.n	8004bea <_malloc_r+0x72>
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	42a2      	cmp	r2, r4
 8004be4:	bf0c      	ite	eq
 8004be6:	600b      	streq	r3, [r1, #0]
 8004be8:	6053      	strne	r3, [r2, #4]
 8004bea:	4630      	mov	r0, r6
 8004bec:	f000 fa5e 	bl	80050ac <__malloc_unlock>
 8004bf0:	f104 000b 	add.w	r0, r4, #11
 8004bf4:	1d23      	adds	r3, r4, #4
 8004bf6:	f020 0007 	bic.w	r0, r0, #7
 8004bfa:	1ac2      	subs	r2, r0, r3
 8004bfc:	d0cc      	beq.n	8004b98 <_malloc_r+0x20>
 8004bfe:	1a1b      	subs	r3, r3, r0
 8004c00:	50a3      	str	r3, [r4, r2]
 8004c02:	e7c9      	b.n	8004b98 <_malloc_r+0x20>
 8004c04:	4622      	mov	r2, r4
 8004c06:	6864      	ldr	r4, [r4, #4]
 8004c08:	e7cc      	b.n	8004ba4 <_malloc_r+0x2c>
 8004c0a:	1cc4      	adds	r4, r0, #3
 8004c0c:	f024 0403 	bic.w	r4, r4, #3
 8004c10:	42a0      	cmp	r0, r4
 8004c12:	d0e3      	beq.n	8004bdc <_malloc_r+0x64>
 8004c14:	1a21      	subs	r1, r4, r0
 8004c16:	4630      	mov	r0, r6
 8004c18:	f000 f896 	bl	8004d48 <_sbrk_r>
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d1dd      	bne.n	8004bdc <_malloc_r+0x64>
 8004c20:	e7cf      	b.n	8004bc2 <_malloc_r+0x4a>
 8004c22:	bf00      	nop
 8004c24:	20000478 	.word	0x20000478
 8004c28:	2000047c 	.word	0x2000047c

08004c2c <iprintf>:
 8004c2c:	b40f      	push	{r0, r1, r2, r3}
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <iprintf+0x2c>)
 8004c30:	b513      	push	{r0, r1, r4, lr}
 8004c32:	681c      	ldr	r4, [r3, #0]
 8004c34:	b124      	cbz	r4, 8004c40 <iprintf+0x14>
 8004c36:	69a3      	ldr	r3, [r4, #24]
 8004c38:	b913      	cbnz	r3, 8004c40 <iprintf+0x14>
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f7ff fe86 	bl	800494c <__sinit>
 8004c40:	ab05      	add	r3, sp, #20
 8004c42:	9a04      	ldr	r2, [sp, #16]
 8004c44:	68a1      	ldr	r1, [r4, #8]
 8004c46:	9301      	str	r3, [sp, #4]
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f000 fa5f 	bl	800510c <_vfiprintf_r>
 8004c4e:	b002      	add	sp, #8
 8004c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c54:	b004      	add	sp, #16
 8004c56:	4770      	bx	lr
 8004c58:	2000000c 	.word	0x2000000c

08004c5c <_puts_r>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	460e      	mov	r6, r1
 8004c60:	4605      	mov	r5, r0
 8004c62:	b118      	cbz	r0, 8004c6c <_puts_r+0x10>
 8004c64:	6983      	ldr	r3, [r0, #24]
 8004c66:	b90b      	cbnz	r3, 8004c6c <_puts_r+0x10>
 8004c68:	f7ff fe70 	bl	800494c <__sinit>
 8004c6c:	69ab      	ldr	r3, [r5, #24]
 8004c6e:	68ac      	ldr	r4, [r5, #8]
 8004c70:	b913      	cbnz	r3, 8004c78 <_puts_r+0x1c>
 8004c72:	4628      	mov	r0, r5
 8004c74:	f7ff fe6a 	bl	800494c <__sinit>
 8004c78:	4b2c      	ldr	r3, [pc, #176]	; (8004d2c <_puts_r+0xd0>)
 8004c7a:	429c      	cmp	r4, r3
 8004c7c:	d120      	bne.n	8004cc0 <_puts_r+0x64>
 8004c7e:	686c      	ldr	r4, [r5, #4]
 8004c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c82:	07db      	lsls	r3, r3, #31
 8004c84:	d405      	bmi.n	8004c92 <_puts_r+0x36>
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	0598      	lsls	r0, r3, #22
 8004c8a:	d402      	bmi.n	8004c92 <_puts_r+0x36>
 8004c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c8e:	f7ff ff20 	bl	8004ad2 <__retarget_lock_acquire_recursive>
 8004c92:	89a3      	ldrh	r3, [r4, #12]
 8004c94:	0719      	lsls	r1, r3, #28
 8004c96:	d51d      	bpl.n	8004cd4 <_puts_r+0x78>
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	b1db      	cbz	r3, 8004cd4 <_puts_r+0x78>
 8004c9c:	3e01      	subs	r6, #1
 8004c9e:	68a3      	ldr	r3, [r4, #8]
 8004ca0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	60a3      	str	r3, [r4, #8]
 8004ca8:	bb39      	cbnz	r1, 8004cfa <_puts_r+0x9e>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da38      	bge.n	8004d20 <_puts_r+0xc4>
 8004cae:	4622      	mov	r2, r4
 8004cb0:	210a      	movs	r1, #10
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f000 f89c 	bl	8004df0 <__swbuf_r>
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d011      	beq.n	8004ce0 <_puts_r+0x84>
 8004cbc:	250a      	movs	r5, #10
 8004cbe:	e011      	b.n	8004ce4 <_puts_r+0x88>
 8004cc0:	4b1b      	ldr	r3, [pc, #108]	; (8004d30 <_puts_r+0xd4>)
 8004cc2:	429c      	cmp	r4, r3
 8004cc4:	d101      	bne.n	8004cca <_puts_r+0x6e>
 8004cc6:	68ac      	ldr	r4, [r5, #8]
 8004cc8:	e7da      	b.n	8004c80 <_puts_r+0x24>
 8004cca:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <_puts_r+0xd8>)
 8004ccc:	429c      	cmp	r4, r3
 8004cce:	bf08      	it	eq
 8004cd0:	68ec      	ldreq	r4, [r5, #12]
 8004cd2:	e7d5      	b.n	8004c80 <_puts_r+0x24>
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 f8ee 	bl	8004eb8 <__swsetup_r>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d0dd      	beq.n	8004c9c <_puts_r+0x40>
 8004ce0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ce6:	07da      	lsls	r2, r3, #31
 8004ce8:	d405      	bmi.n	8004cf6 <_puts_r+0x9a>
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	059b      	lsls	r3, r3, #22
 8004cee:	d402      	bmi.n	8004cf6 <_puts_r+0x9a>
 8004cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf2:	f7ff feef 	bl	8004ad4 <__retarget_lock_release_recursive>
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da04      	bge.n	8004d08 <_puts_r+0xac>
 8004cfe:	69a2      	ldr	r2, [r4, #24]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	dc06      	bgt.n	8004d12 <_puts_r+0xb6>
 8004d04:	290a      	cmp	r1, #10
 8004d06:	d004      	beq.n	8004d12 <_puts_r+0xb6>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	6022      	str	r2, [r4, #0]
 8004d0e:	7019      	strb	r1, [r3, #0]
 8004d10:	e7c5      	b.n	8004c9e <_puts_r+0x42>
 8004d12:	4622      	mov	r2, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 f86b 	bl	8004df0 <__swbuf_r>
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d1bf      	bne.n	8004c9e <_puts_r+0x42>
 8004d1e:	e7df      	b.n	8004ce0 <_puts_r+0x84>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	250a      	movs	r5, #10
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	6022      	str	r2, [r4, #0]
 8004d28:	701d      	strb	r5, [r3, #0]
 8004d2a:	e7db      	b.n	8004ce4 <_puts_r+0x88>
 8004d2c:	080057f4 	.word	0x080057f4
 8004d30:	08005814 	.word	0x08005814
 8004d34:	080057d4 	.word	0x080057d4

08004d38 <puts>:
 8004d38:	4b02      	ldr	r3, [pc, #8]	; (8004d44 <puts+0xc>)
 8004d3a:	4601      	mov	r1, r0
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	f7ff bf8d 	b.w	8004c5c <_puts_r>
 8004d42:	bf00      	nop
 8004d44:	2000000c 	.word	0x2000000c

08004d48 <_sbrk_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4d06      	ldr	r5, [pc, #24]	; (8004d64 <_sbrk_r+0x1c>)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	4604      	mov	r4, r0
 8004d50:	4608      	mov	r0, r1
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	f7fb fdae 	bl	80008b4 <_sbrk>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	d102      	bne.n	8004d62 <_sbrk_r+0x1a>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	b103      	cbz	r3, 8004d62 <_sbrk_r+0x1a>
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
 8004d64:	2000055c 	.word	0x2000055c

08004d68 <__sread>:
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d70:	f000 fc90 	bl	8005694 <_read_r>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	bfab      	itete	ge
 8004d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d7c:	181b      	addge	r3, r3, r0
 8004d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d82:	bfac      	ite	ge
 8004d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d86:	81a3      	strhlt	r3, [r4, #12]
 8004d88:	bd10      	pop	{r4, pc}

08004d8a <__swrite>:
 8004d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8e:	461f      	mov	r7, r3
 8004d90:	898b      	ldrh	r3, [r1, #12]
 8004d92:	05db      	lsls	r3, r3, #23
 8004d94:	4605      	mov	r5, r0
 8004d96:	460c      	mov	r4, r1
 8004d98:	4616      	mov	r6, r2
 8004d9a:	d505      	bpl.n	8004da8 <__swrite+0x1e>
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	2302      	movs	r3, #2
 8004da2:	2200      	movs	r2, #0
 8004da4:	f000 f906 	bl	8004fb4 <_lseek_r>
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004db2:	81a3      	strh	r3, [r4, #12]
 8004db4:	4632      	mov	r2, r6
 8004db6:	463b      	mov	r3, r7
 8004db8:	4628      	mov	r0, r5
 8004dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbe:	f000 b869 	b.w	8004e94 <_write_r>

08004dc2 <__sseek>:
 8004dc2:	b510      	push	{r4, lr}
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dca:	f000 f8f3 	bl	8004fb4 <_lseek_r>
 8004dce:	1c43      	adds	r3, r0, #1
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	bf15      	itete	ne
 8004dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dde:	81a3      	strheq	r3, [r4, #12]
 8004de0:	bf18      	it	ne
 8004de2:	81a3      	strhne	r3, [r4, #12]
 8004de4:	bd10      	pop	{r4, pc}

08004de6 <__sclose>:
 8004de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dea:	f000 b8d3 	b.w	8004f94 <_close_r>
	...

08004df0 <__swbuf_r>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	460e      	mov	r6, r1
 8004df4:	4614      	mov	r4, r2
 8004df6:	4605      	mov	r5, r0
 8004df8:	b118      	cbz	r0, 8004e02 <__swbuf_r+0x12>
 8004dfa:	6983      	ldr	r3, [r0, #24]
 8004dfc:	b90b      	cbnz	r3, 8004e02 <__swbuf_r+0x12>
 8004dfe:	f7ff fda5 	bl	800494c <__sinit>
 8004e02:	4b21      	ldr	r3, [pc, #132]	; (8004e88 <__swbuf_r+0x98>)
 8004e04:	429c      	cmp	r4, r3
 8004e06:	d12b      	bne.n	8004e60 <__swbuf_r+0x70>
 8004e08:	686c      	ldr	r4, [r5, #4]
 8004e0a:	69a3      	ldr	r3, [r4, #24]
 8004e0c:	60a3      	str	r3, [r4, #8]
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	071a      	lsls	r2, r3, #28
 8004e12:	d52f      	bpl.n	8004e74 <__swbuf_r+0x84>
 8004e14:	6923      	ldr	r3, [r4, #16]
 8004e16:	b36b      	cbz	r3, 8004e74 <__swbuf_r+0x84>
 8004e18:	6923      	ldr	r3, [r4, #16]
 8004e1a:	6820      	ldr	r0, [r4, #0]
 8004e1c:	1ac0      	subs	r0, r0, r3
 8004e1e:	6963      	ldr	r3, [r4, #20]
 8004e20:	b2f6      	uxtb	r6, r6
 8004e22:	4283      	cmp	r3, r0
 8004e24:	4637      	mov	r7, r6
 8004e26:	dc04      	bgt.n	8004e32 <__swbuf_r+0x42>
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f7ff fce8 	bl	8004800 <_fflush_r>
 8004e30:	bb30      	cbnz	r0, 8004e80 <__swbuf_r+0x90>
 8004e32:	68a3      	ldr	r3, [r4, #8]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	60a3      	str	r3, [r4, #8]
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	6022      	str	r2, [r4, #0]
 8004e3e:	701e      	strb	r6, [r3, #0]
 8004e40:	6963      	ldr	r3, [r4, #20]
 8004e42:	3001      	adds	r0, #1
 8004e44:	4283      	cmp	r3, r0
 8004e46:	d004      	beq.n	8004e52 <__swbuf_r+0x62>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	07db      	lsls	r3, r3, #31
 8004e4c:	d506      	bpl.n	8004e5c <__swbuf_r+0x6c>
 8004e4e:	2e0a      	cmp	r6, #10
 8004e50:	d104      	bne.n	8004e5c <__swbuf_r+0x6c>
 8004e52:	4621      	mov	r1, r4
 8004e54:	4628      	mov	r0, r5
 8004e56:	f7ff fcd3 	bl	8004800 <_fflush_r>
 8004e5a:	b988      	cbnz	r0, 8004e80 <__swbuf_r+0x90>
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e60:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <__swbuf_r+0x9c>)
 8004e62:	429c      	cmp	r4, r3
 8004e64:	d101      	bne.n	8004e6a <__swbuf_r+0x7a>
 8004e66:	68ac      	ldr	r4, [r5, #8]
 8004e68:	e7cf      	b.n	8004e0a <__swbuf_r+0x1a>
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <__swbuf_r+0xa0>)
 8004e6c:	429c      	cmp	r4, r3
 8004e6e:	bf08      	it	eq
 8004e70:	68ec      	ldreq	r4, [r5, #12]
 8004e72:	e7ca      	b.n	8004e0a <__swbuf_r+0x1a>
 8004e74:	4621      	mov	r1, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	f000 f81e 	bl	8004eb8 <__swsetup_r>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d0cb      	beq.n	8004e18 <__swbuf_r+0x28>
 8004e80:	f04f 37ff 	mov.w	r7, #4294967295
 8004e84:	e7ea      	b.n	8004e5c <__swbuf_r+0x6c>
 8004e86:	bf00      	nop
 8004e88:	080057f4 	.word	0x080057f4
 8004e8c:	08005814 	.word	0x08005814
 8004e90:	080057d4 	.word	0x080057d4

08004e94 <_write_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d07      	ldr	r5, [pc, #28]	; (8004eb4 <_write_r+0x20>)
 8004e98:	4604      	mov	r4, r0
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	602a      	str	r2, [r5, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f7fb fcb5 	bl	8000812 <_write>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_write_r+0x1e>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_write_r+0x1e>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	2000055c 	.word	0x2000055c

08004eb8 <__swsetup_r>:
 8004eb8:	4b32      	ldr	r3, [pc, #200]	; (8004f84 <__swsetup_r+0xcc>)
 8004eba:	b570      	push	{r4, r5, r6, lr}
 8004ebc:	681d      	ldr	r5, [r3, #0]
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	b125      	cbz	r5, 8004ece <__swsetup_r+0x16>
 8004ec4:	69ab      	ldr	r3, [r5, #24]
 8004ec6:	b913      	cbnz	r3, 8004ece <__swsetup_r+0x16>
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f7ff fd3f 	bl	800494c <__sinit>
 8004ece:	4b2e      	ldr	r3, [pc, #184]	; (8004f88 <__swsetup_r+0xd0>)
 8004ed0:	429c      	cmp	r4, r3
 8004ed2:	d10f      	bne.n	8004ef4 <__swsetup_r+0x3c>
 8004ed4:	686c      	ldr	r4, [r5, #4]
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004edc:	0719      	lsls	r1, r3, #28
 8004ede:	d42c      	bmi.n	8004f3a <__swsetup_r+0x82>
 8004ee0:	06dd      	lsls	r5, r3, #27
 8004ee2:	d411      	bmi.n	8004f08 <__swsetup_r+0x50>
 8004ee4:	2309      	movs	r3, #9
 8004ee6:	6033      	str	r3, [r6, #0]
 8004ee8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eec:	81a3      	strh	r3, [r4, #12]
 8004eee:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef2:	e03e      	b.n	8004f72 <__swsetup_r+0xba>
 8004ef4:	4b25      	ldr	r3, [pc, #148]	; (8004f8c <__swsetup_r+0xd4>)
 8004ef6:	429c      	cmp	r4, r3
 8004ef8:	d101      	bne.n	8004efe <__swsetup_r+0x46>
 8004efa:	68ac      	ldr	r4, [r5, #8]
 8004efc:	e7eb      	b.n	8004ed6 <__swsetup_r+0x1e>
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <__swsetup_r+0xd8>)
 8004f00:	429c      	cmp	r4, r3
 8004f02:	bf08      	it	eq
 8004f04:	68ec      	ldreq	r4, [r5, #12]
 8004f06:	e7e6      	b.n	8004ed6 <__swsetup_r+0x1e>
 8004f08:	0758      	lsls	r0, r3, #29
 8004f0a:	d512      	bpl.n	8004f32 <__swsetup_r+0x7a>
 8004f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f0e:	b141      	cbz	r1, 8004f22 <__swsetup_r+0x6a>
 8004f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f14:	4299      	cmp	r1, r3
 8004f16:	d002      	beq.n	8004f1e <__swsetup_r+0x66>
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7ff fddd 	bl	8004ad8 <_free_r>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	6363      	str	r3, [r4, #52]	; 0x34
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f28:	81a3      	strh	r3, [r4, #12]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6063      	str	r3, [r4, #4]
 8004f2e:	6923      	ldr	r3, [r4, #16]
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	f043 0308 	orr.w	r3, r3, #8
 8004f38:	81a3      	strh	r3, [r4, #12]
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	b94b      	cbnz	r3, 8004f52 <__swsetup_r+0x9a>
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f48:	d003      	beq.n	8004f52 <__swsetup_r+0x9a>
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f000 f867 	bl	8005020 <__smakebuf_r>
 8004f52:	89a0      	ldrh	r0, [r4, #12]
 8004f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f58:	f010 0301 	ands.w	r3, r0, #1
 8004f5c:	d00a      	beq.n	8004f74 <__swsetup_r+0xbc>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60a3      	str	r3, [r4, #8]
 8004f62:	6963      	ldr	r3, [r4, #20]
 8004f64:	425b      	negs	r3, r3
 8004f66:	61a3      	str	r3, [r4, #24]
 8004f68:	6923      	ldr	r3, [r4, #16]
 8004f6a:	b943      	cbnz	r3, 8004f7e <__swsetup_r+0xc6>
 8004f6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f70:	d1ba      	bne.n	8004ee8 <__swsetup_r+0x30>
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
 8004f74:	0781      	lsls	r1, r0, #30
 8004f76:	bf58      	it	pl
 8004f78:	6963      	ldrpl	r3, [r4, #20]
 8004f7a:	60a3      	str	r3, [r4, #8]
 8004f7c:	e7f4      	b.n	8004f68 <__swsetup_r+0xb0>
 8004f7e:	2000      	movs	r0, #0
 8004f80:	e7f7      	b.n	8004f72 <__swsetup_r+0xba>
 8004f82:	bf00      	nop
 8004f84:	2000000c 	.word	0x2000000c
 8004f88:	080057f4 	.word	0x080057f4
 8004f8c:	08005814 	.word	0x08005814
 8004f90:	080057d4 	.word	0x080057d4

08004f94 <_close_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4d06      	ldr	r5, [pc, #24]	; (8004fb0 <_close_r+0x1c>)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	602b      	str	r3, [r5, #0]
 8004fa0:	f7fb fc53 	bl	800084a <_close>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_close_r+0x1a>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_close_r+0x1a>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	2000055c 	.word	0x2000055c

08004fb4 <_lseek_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4d07      	ldr	r5, [pc, #28]	; (8004fd4 <_lseek_r+0x20>)
 8004fb8:	4604      	mov	r4, r0
 8004fba:	4608      	mov	r0, r1
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fb fc68 	bl	8000898 <_lseek>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_lseek_r+0x1e>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_lseek_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	2000055c 	.word	0x2000055c

08004fd8 <__swhatbuf_r>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	460e      	mov	r6, r1
 8004fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe0:	2900      	cmp	r1, #0
 8004fe2:	b096      	sub	sp, #88	; 0x58
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	461d      	mov	r5, r3
 8004fe8:	da07      	bge.n	8004ffa <__swhatbuf_r+0x22>
 8004fea:	2300      	movs	r3, #0
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	89b3      	ldrh	r3, [r6, #12]
 8004ff0:	061a      	lsls	r2, r3, #24
 8004ff2:	d410      	bmi.n	8005016 <__swhatbuf_r+0x3e>
 8004ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ff8:	e00e      	b.n	8005018 <__swhatbuf_r+0x40>
 8004ffa:	466a      	mov	r2, sp
 8004ffc:	f000 fb5c 	bl	80056b8 <_fstat_r>
 8005000:	2800      	cmp	r0, #0
 8005002:	dbf2      	blt.n	8004fea <__swhatbuf_r+0x12>
 8005004:	9a01      	ldr	r2, [sp, #4]
 8005006:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800500a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800500e:	425a      	negs	r2, r3
 8005010:	415a      	adcs	r2, r3
 8005012:	602a      	str	r2, [r5, #0]
 8005014:	e7ee      	b.n	8004ff4 <__swhatbuf_r+0x1c>
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	2000      	movs	r0, #0
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	b016      	add	sp, #88	; 0x58
 800501e:	bd70      	pop	{r4, r5, r6, pc}

08005020 <__smakebuf_r>:
 8005020:	898b      	ldrh	r3, [r1, #12]
 8005022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005024:	079d      	lsls	r5, r3, #30
 8005026:	4606      	mov	r6, r0
 8005028:	460c      	mov	r4, r1
 800502a:	d507      	bpl.n	800503c <__smakebuf_r+0x1c>
 800502c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	6123      	str	r3, [r4, #16]
 8005034:	2301      	movs	r3, #1
 8005036:	6163      	str	r3, [r4, #20]
 8005038:	b002      	add	sp, #8
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	ab01      	add	r3, sp, #4
 800503e:	466a      	mov	r2, sp
 8005040:	f7ff ffca 	bl	8004fd8 <__swhatbuf_r>
 8005044:	9900      	ldr	r1, [sp, #0]
 8005046:	4605      	mov	r5, r0
 8005048:	4630      	mov	r0, r6
 800504a:	f7ff fd95 	bl	8004b78 <_malloc_r>
 800504e:	b948      	cbnz	r0, 8005064 <__smakebuf_r+0x44>
 8005050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005054:	059a      	lsls	r2, r3, #22
 8005056:	d4ef      	bmi.n	8005038 <__smakebuf_r+0x18>
 8005058:	f023 0303 	bic.w	r3, r3, #3
 800505c:	f043 0302 	orr.w	r3, r3, #2
 8005060:	81a3      	strh	r3, [r4, #12]
 8005062:	e7e3      	b.n	800502c <__smakebuf_r+0xc>
 8005064:	4b0d      	ldr	r3, [pc, #52]	; (800509c <__smakebuf_r+0x7c>)
 8005066:	62b3      	str	r3, [r6, #40]	; 0x28
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	6020      	str	r0, [r4, #0]
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	81a3      	strh	r3, [r4, #12]
 8005072:	9b00      	ldr	r3, [sp, #0]
 8005074:	6163      	str	r3, [r4, #20]
 8005076:	9b01      	ldr	r3, [sp, #4]
 8005078:	6120      	str	r0, [r4, #16]
 800507a:	b15b      	cbz	r3, 8005094 <__smakebuf_r+0x74>
 800507c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005080:	4630      	mov	r0, r6
 8005082:	f000 fb2b 	bl	80056dc <_isatty_r>
 8005086:	b128      	cbz	r0, 8005094 <__smakebuf_r+0x74>
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	81a3      	strh	r3, [r4, #12]
 8005094:	89a0      	ldrh	r0, [r4, #12]
 8005096:	4305      	orrs	r5, r0
 8005098:	81a5      	strh	r5, [r4, #12]
 800509a:	e7cd      	b.n	8005038 <__smakebuf_r+0x18>
 800509c:	080048e5 	.word	0x080048e5

080050a0 <__malloc_lock>:
 80050a0:	4801      	ldr	r0, [pc, #4]	; (80050a8 <__malloc_lock+0x8>)
 80050a2:	f7ff bd16 	b.w	8004ad2 <__retarget_lock_acquire_recursive>
 80050a6:	bf00      	nop
 80050a8:	20000554 	.word	0x20000554

080050ac <__malloc_unlock>:
 80050ac:	4801      	ldr	r0, [pc, #4]	; (80050b4 <__malloc_unlock+0x8>)
 80050ae:	f7ff bd11 	b.w	8004ad4 <__retarget_lock_release_recursive>
 80050b2:	bf00      	nop
 80050b4:	20000554 	.word	0x20000554

080050b8 <__sfputc_r>:
 80050b8:	6893      	ldr	r3, [r2, #8]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	b410      	push	{r4}
 80050c0:	6093      	str	r3, [r2, #8]
 80050c2:	da08      	bge.n	80050d6 <__sfputc_r+0x1e>
 80050c4:	6994      	ldr	r4, [r2, #24]
 80050c6:	42a3      	cmp	r3, r4
 80050c8:	db01      	blt.n	80050ce <__sfputc_r+0x16>
 80050ca:	290a      	cmp	r1, #10
 80050cc:	d103      	bne.n	80050d6 <__sfputc_r+0x1e>
 80050ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050d2:	f7ff be8d 	b.w	8004df0 <__swbuf_r>
 80050d6:	6813      	ldr	r3, [r2, #0]
 80050d8:	1c58      	adds	r0, r3, #1
 80050da:	6010      	str	r0, [r2, #0]
 80050dc:	7019      	strb	r1, [r3, #0]
 80050de:	4608      	mov	r0, r1
 80050e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <__sfputs_r>:
 80050e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e8:	4606      	mov	r6, r0
 80050ea:	460f      	mov	r7, r1
 80050ec:	4614      	mov	r4, r2
 80050ee:	18d5      	adds	r5, r2, r3
 80050f0:	42ac      	cmp	r4, r5
 80050f2:	d101      	bne.n	80050f8 <__sfputs_r+0x12>
 80050f4:	2000      	movs	r0, #0
 80050f6:	e007      	b.n	8005108 <__sfputs_r+0x22>
 80050f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050fc:	463a      	mov	r2, r7
 80050fe:	4630      	mov	r0, r6
 8005100:	f7ff ffda 	bl	80050b8 <__sfputc_r>
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	d1f3      	bne.n	80050f0 <__sfputs_r+0xa>
 8005108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800510c <_vfiprintf_r>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	460d      	mov	r5, r1
 8005112:	b09d      	sub	sp, #116	; 0x74
 8005114:	4614      	mov	r4, r2
 8005116:	4698      	mov	r8, r3
 8005118:	4606      	mov	r6, r0
 800511a:	b118      	cbz	r0, 8005124 <_vfiprintf_r+0x18>
 800511c:	6983      	ldr	r3, [r0, #24]
 800511e:	b90b      	cbnz	r3, 8005124 <_vfiprintf_r+0x18>
 8005120:	f7ff fc14 	bl	800494c <__sinit>
 8005124:	4b89      	ldr	r3, [pc, #548]	; (800534c <_vfiprintf_r+0x240>)
 8005126:	429d      	cmp	r5, r3
 8005128:	d11b      	bne.n	8005162 <_vfiprintf_r+0x56>
 800512a:	6875      	ldr	r5, [r6, #4]
 800512c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800512e:	07d9      	lsls	r1, r3, #31
 8005130:	d405      	bmi.n	800513e <_vfiprintf_r+0x32>
 8005132:	89ab      	ldrh	r3, [r5, #12]
 8005134:	059a      	lsls	r2, r3, #22
 8005136:	d402      	bmi.n	800513e <_vfiprintf_r+0x32>
 8005138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800513a:	f7ff fcca 	bl	8004ad2 <__retarget_lock_acquire_recursive>
 800513e:	89ab      	ldrh	r3, [r5, #12]
 8005140:	071b      	lsls	r3, r3, #28
 8005142:	d501      	bpl.n	8005148 <_vfiprintf_r+0x3c>
 8005144:	692b      	ldr	r3, [r5, #16]
 8005146:	b9eb      	cbnz	r3, 8005184 <_vfiprintf_r+0x78>
 8005148:	4629      	mov	r1, r5
 800514a:	4630      	mov	r0, r6
 800514c:	f7ff feb4 	bl	8004eb8 <__swsetup_r>
 8005150:	b1c0      	cbz	r0, 8005184 <_vfiprintf_r+0x78>
 8005152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005154:	07dc      	lsls	r4, r3, #31
 8005156:	d50e      	bpl.n	8005176 <_vfiprintf_r+0x6a>
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
 800515c:	b01d      	add	sp, #116	; 0x74
 800515e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005162:	4b7b      	ldr	r3, [pc, #492]	; (8005350 <_vfiprintf_r+0x244>)
 8005164:	429d      	cmp	r5, r3
 8005166:	d101      	bne.n	800516c <_vfiprintf_r+0x60>
 8005168:	68b5      	ldr	r5, [r6, #8]
 800516a:	e7df      	b.n	800512c <_vfiprintf_r+0x20>
 800516c:	4b79      	ldr	r3, [pc, #484]	; (8005354 <_vfiprintf_r+0x248>)
 800516e:	429d      	cmp	r5, r3
 8005170:	bf08      	it	eq
 8005172:	68f5      	ldreq	r5, [r6, #12]
 8005174:	e7da      	b.n	800512c <_vfiprintf_r+0x20>
 8005176:	89ab      	ldrh	r3, [r5, #12]
 8005178:	0598      	lsls	r0, r3, #22
 800517a:	d4ed      	bmi.n	8005158 <_vfiprintf_r+0x4c>
 800517c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800517e:	f7ff fca9 	bl	8004ad4 <__retarget_lock_release_recursive>
 8005182:	e7e9      	b.n	8005158 <_vfiprintf_r+0x4c>
 8005184:	2300      	movs	r3, #0
 8005186:	9309      	str	r3, [sp, #36]	; 0x24
 8005188:	2320      	movs	r3, #32
 800518a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800518e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005192:	2330      	movs	r3, #48	; 0x30
 8005194:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005358 <_vfiprintf_r+0x24c>
 8005198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800519c:	f04f 0901 	mov.w	r9, #1
 80051a0:	4623      	mov	r3, r4
 80051a2:	469a      	mov	sl, r3
 80051a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051a8:	b10a      	cbz	r2, 80051ae <_vfiprintf_r+0xa2>
 80051aa:	2a25      	cmp	r2, #37	; 0x25
 80051ac:	d1f9      	bne.n	80051a2 <_vfiprintf_r+0x96>
 80051ae:	ebba 0b04 	subs.w	fp, sl, r4
 80051b2:	d00b      	beq.n	80051cc <_vfiprintf_r+0xc0>
 80051b4:	465b      	mov	r3, fp
 80051b6:	4622      	mov	r2, r4
 80051b8:	4629      	mov	r1, r5
 80051ba:	4630      	mov	r0, r6
 80051bc:	f7ff ff93 	bl	80050e6 <__sfputs_r>
 80051c0:	3001      	adds	r0, #1
 80051c2:	f000 80aa 	beq.w	800531a <_vfiprintf_r+0x20e>
 80051c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c8:	445a      	add	r2, fp
 80051ca:	9209      	str	r2, [sp, #36]	; 0x24
 80051cc:	f89a 3000 	ldrb.w	r3, [sl]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80a2 	beq.w	800531a <_vfiprintf_r+0x20e>
 80051d6:	2300      	movs	r3, #0
 80051d8:	f04f 32ff 	mov.w	r2, #4294967295
 80051dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051e0:	f10a 0a01 	add.w	sl, sl, #1
 80051e4:	9304      	str	r3, [sp, #16]
 80051e6:	9307      	str	r3, [sp, #28]
 80051e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051ec:	931a      	str	r3, [sp, #104]	; 0x68
 80051ee:	4654      	mov	r4, sl
 80051f0:	2205      	movs	r2, #5
 80051f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f6:	4858      	ldr	r0, [pc, #352]	; (8005358 <_vfiprintf_r+0x24c>)
 80051f8:	f7fa ffea 	bl	80001d0 <memchr>
 80051fc:	9a04      	ldr	r2, [sp, #16]
 80051fe:	b9d8      	cbnz	r0, 8005238 <_vfiprintf_r+0x12c>
 8005200:	06d1      	lsls	r1, r2, #27
 8005202:	bf44      	itt	mi
 8005204:	2320      	movmi	r3, #32
 8005206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800520a:	0713      	lsls	r3, r2, #28
 800520c:	bf44      	itt	mi
 800520e:	232b      	movmi	r3, #43	; 0x2b
 8005210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005214:	f89a 3000 	ldrb.w	r3, [sl]
 8005218:	2b2a      	cmp	r3, #42	; 0x2a
 800521a:	d015      	beq.n	8005248 <_vfiprintf_r+0x13c>
 800521c:	9a07      	ldr	r2, [sp, #28]
 800521e:	4654      	mov	r4, sl
 8005220:	2000      	movs	r0, #0
 8005222:	f04f 0c0a 	mov.w	ip, #10
 8005226:	4621      	mov	r1, r4
 8005228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800522c:	3b30      	subs	r3, #48	; 0x30
 800522e:	2b09      	cmp	r3, #9
 8005230:	d94e      	bls.n	80052d0 <_vfiprintf_r+0x1c4>
 8005232:	b1b0      	cbz	r0, 8005262 <_vfiprintf_r+0x156>
 8005234:	9207      	str	r2, [sp, #28]
 8005236:	e014      	b.n	8005262 <_vfiprintf_r+0x156>
 8005238:	eba0 0308 	sub.w	r3, r0, r8
 800523c:	fa09 f303 	lsl.w	r3, r9, r3
 8005240:	4313      	orrs	r3, r2
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	46a2      	mov	sl, r4
 8005246:	e7d2      	b.n	80051ee <_vfiprintf_r+0xe2>
 8005248:	9b03      	ldr	r3, [sp, #12]
 800524a:	1d19      	adds	r1, r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	9103      	str	r1, [sp, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	bfbb      	ittet	lt
 8005254:	425b      	neglt	r3, r3
 8005256:	f042 0202 	orrlt.w	r2, r2, #2
 800525a:	9307      	strge	r3, [sp, #28]
 800525c:	9307      	strlt	r3, [sp, #28]
 800525e:	bfb8      	it	lt
 8005260:	9204      	strlt	r2, [sp, #16]
 8005262:	7823      	ldrb	r3, [r4, #0]
 8005264:	2b2e      	cmp	r3, #46	; 0x2e
 8005266:	d10c      	bne.n	8005282 <_vfiprintf_r+0x176>
 8005268:	7863      	ldrb	r3, [r4, #1]
 800526a:	2b2a      	cmp	r3, #42	; 0x2a
 800526c:	d135      	bne.n	80052da <_vfiprintf_r+0x1ce>
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	1d1a      	adds	r2, r3, #4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	9203      	str	r2, [sp, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	bfb8      	it	lt
 800527a:	f04f 33ff 	movlt.w	r3, #4294967295
 800527e:	3402      	adds	r4, #2
 8005280:	9305      	str	r3, [sp, #20]
 8005282:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005368 <_vfiprintf_r+0x25c>
 8005286:	7821      	ldrb	r1, [r4, #0]
 8005288:	2203      	movs	r2, #3
 800528a:	4650      	mov	r0, sl
 800528c:	f7fa ffa0 	bl	80001d0 <memchr>
 8005290:	b140      	cbz	r0, 80052a4 <_vfiprintf_r+0x198>
 8005292:	2340      	movs	r3, #64	; 0x40
 8005294:	eba0 000a 	sub.w	r0, r0, sl
 8005298:	fa03 f000 	lsl.w	r0, r3, r0
 800529c:	9b04      	ldr	r3, [sp, #16]
 800529e:	4303      	orrs	r3, r0
 80052a0:	3401      	adds	r4, #1
 80052a2:	9304      	str	r3, [sp, #16]
 80052a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a8:	482c      	ldr	r0, [pc, #176]	; (800535c <_vfiprintf_r+0x250>)
 80052aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052ae:	2206      	movs	r2, #6
 80052b0:	f7fa ff8e 	bl	80001d0 <memchr>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d03f      	beq.n	8005338 <_vfiprintf_r+0x22c>
 80052b8:	4b29      	ldr	r3, [pc, #164]	; (8005360 <_vfiprintf_r+0x254>)
 80052ba:	bb1b      	cbnz	r3, 8005304 <_vfiprintf_r+0x1f8>
 80052bc:	9b03      	ldr	r3, [sp, #12]
 80052be:	3307      	adds	r3, #7
 80052c0:	f023 0307 	bic.w	r3, r3, #7
 80052c4:	3308      	adds	r3, #8
 80052c6:	9303      	str	r3, [sp, #12]
 80052c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ca:	443b      	add	r3, r7
 80052cc:	9309      	str	r3, [sp, #36]	; 0x24
 80052ce:	e767      	b.n	80051a0 <_vfiprintf_r+0x94>
 80052d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80052d4:	460c      	mov	r4, r1
 80052d6:	2001      	movs	r0, #1
 80052d8:	e7a5      	b.n	8005226 <_vfiprintf_r+0x11a>
 80052da:	2300      	movs	r3, #0
 80052dc:	3401      	adds	r4, #1
 80052de:	9305      	str	r3, [sp, #20]
 80052e0:	4619      	mov	r1, r3
 80052e2:	f04f 0c0a 	mov.w	ip, #10
 80052e6:	4620      	mov	r0, r4
 80052e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ec:	3a30      	subs	r2, #48	; 0x30
 80052ee:	2a09      	cmp	r2, #9
 80052f0:	d903      	bls.n	80052fa <_vfiprintf_r+0x1ee>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0c5      	beq.n	8005282 <_vfiprintf_r+0x176>
 80052f6:	9105      	str	r1, [sp, #20]
 80052f8:	e7c3      	b.n	8005282 <_vfiprintf_r+0x176>
 80052fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80052fe:	4604      	mov	r4, r0
 8005300:	2301      	movs	r3, #1
 8005302:	e7f0      	b.n	80052e6 <_vfiprintf_r+0x1da>
 8005304:	ab03      	add	r3, sp, #12
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	462a      	mov	r2, r5
 800530a:	4b16      	ldr	r3, [pc, #88]	; (8005364 <_vfiprintf_r+0x258>)
 800530c:	a904      	add	r1, sp, #16
 800530e:	4630      	mov	r0, r6
 8005310:	f3af 8000 	nop.w
 8005314:	4607      	mov	r7, r0
 8005316:	1c78      	adds	r0, r7, #1
 8005318:	d1d6      	bne.n	80052c8 <_vfiprintf_r+0x1bc>
 800531a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800531c:	07d9      	lsls	r1, r3, #31
 800531e:	d405      	bmi.n	800532c <_vfiprintf_r+0x220>
 8005320:	89ab      	ldrh	r3, [r5, #12]
 8005322:	059a      	lsls	r2, r3, #22
 8005324:	d402      	bmi.n	800532c <_vfiprintf_r+0x220>
 8005326:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005328:	f7ff fbd4 	bl	8004ad4 <__retarget_lock_release_recursive>
 800532c:	89ab      	ldrh	r3, [r5, #12]
 800532e:	065b      	lsls	r3, r3, #25
 8005330:	f53f af12 	bmi.w	8005158 <_vfiprintf_r+0x4c>
 8005334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005336:	e711      	b.n	800515c <_vfiprintf_r+0x50>
 8005338:	ab03      	add	r3, sp, #12
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	462a      	mov	r2, r5
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <_vfiprintf_r+0x258>)
 8005340:	a904      	add	r1, sp, #16
 8005342:	4630      	mov	r0, r6
 8005344:	f000 f880 	bl	8005448 <_printf_i>
 8005348:	e7e4      	b.n	8005314 <_vfiprintf_r+0x208>
 800534a:	bf00      	nop
 800534c:	080057f4 	.word	0x080057f4
 8005350:	08005814 	.word	0x08005814
 8005354:	080057d4 	.word	0x080057d4
 8005358:	08005838 	.word	0x08005838
 800535c:	08005842 	.word	0x08005842
 8005360:	00000000 	.word	0x00000000
 8005364:	080050e7 	.word	0x080050e7
 8005368:	0800583e 	.word	0x0800583e

0800536c <_printf_common>:
 800536c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005370:	4616      	mov	r6, r2
 8005372:	4699      	mov	r9, r3
 8005374:	688a      	ldr	r2, [r1, #8]
 8005376:	690b      	ldr	r3, [r1, #16]
 8005378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800537c:	4293      	cmp	r3, r2
 800537e:	bfb8      	it	lt
 8005380:	4613      	movlt	r3, r2
 8005382:	6033      	str	r3, [r6, #0]
 8005384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005388:	4607      	mov	r7, r0
 800538a:	460c      	mov	r4, r1
 800538c:	b10a      	cbz	r2, 8005392 <_printf_common+0x26>
 800538e:	3301      	adds	r3, #1
 8005390:	6033      	str	r3, [r6, #0]
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	0699      	lsls	r1, r3, #26
 8005396:	bf42      	ittt	mi
 8005398:	6833      	ldrmi	r3, [r6, #0]
 800539a:	3302      	addmi	r3, #2
 800539c:	6033      	strmi	r3, [r6, #0]
 800539e:	6825      	ldr	r5, [r4, #0]
 80053a0:	f015 0506 	ands.w	r5, r5, #6
 80053a4:	d106      	bne.n	80053b4 <_printf_common+0x48>
 80053a6:	f104 0a19 	add.w	sl, r4, #25
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	6832      	ldr	r2, [r6, #0]
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	42ab      	cmp	r3, r5
 80053b2:	dc26      	bgt.n	8005402 <_printf_common+0x96>
 80053b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053b8:	1e13      	subs	r3, r2, #0
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	bf18      	it	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	0692      	lsls	r2, r2, #26
 80053c2:	d42b      	bmi.n	800541c <_printf_common+0xb0>
 80053c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c8:	4649      	mov	r1, r9
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c0      	blx	r8
 80053ce:	3001      	adds	r0, #1
 80053d0:	d01e      	beq.n	8005410 <_printf_common+0xa4>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	68e5      	ldr	r5, [r4, #12]
 80053d6:	6832      	ldr	r2, [r6, #0]
 80053d8:	f003 0306 	and.w	r3, r3, #6
 80053dc:	2b04      	cmp	r3, #4
 80053de:	bf08      	it	eq
 80053e0:	1aad      	subeq	r5, r5, r2
 80053e2:	68a3      	ldr	r3, [r4, #8]
 80053e4:	6922      	ldr	r2, [r4, #16]
 80053e6:	bf0c      	ite	eq
 80053e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053ec:	2500      	movne	r5, #0
 80053ee:	4293      	cmp	r3, r2
 80053f0:	bfc4      	itt	gt
 80053f2:	1a9b      	subgt	r3, r3, r2
 80053f4:	18ed      	addgt	r5, r5, r3
 80053f6:	2600      	movs	r6, #0
 80053f8:	341a      	adds	r4, #26
 80053fa:	42b5      	cmp	r5, r6
 80053fc:	d11a      	bne.n	8005434 <_printf_common+0xc8>
 80053fe:	2000      	movs	r0, #0
 8005400:	e008      	b.n	8005414 <_printf_common+0xa8>
 8005402:	2301      	movs	r3, #1
 8005404:	4652      	mov	r2, sl
 8005406:	4649      	mov	r1, r9
 8005408:	4638      	mov	r0, r7
 800540a:	47c0      	blx	r8
 800540c:	3001      	adds	r0, #1
 800540e:	d103      	bne.n	8005418 <_printf_common+0xac>
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005418:	3501      	adds	r5, #1
 800541a:	e7c6      	b.n	80053aa <_printf_common+0x3e>
 800541c:	18e1      	adds	r1, r4, r3
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	2030      	movs	r0, #48	; 0x30
 8005422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005426:	4422      	add	r2, r4
 8005428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800542c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005430:	3302      	adds	r3, #2
 8005432:	e7c7      	b.n	80053c4 <_printf_common+0x58>
 8005434:	2301      	movs	r3, #1
 8005436:	4622      	mov	r2, r4
 8005438:	4649      	mov	r1, r9
 800543a:	4638      	mov	r0, r7
 800543c:	47c0      	blx	r8
 800543e:	3001      	adds	r0, #1
 8005440:	d0e6      	beq.n	8005410 <_printf_common+0xa4>
 8005442:	3601      	adds	r6, #1
 8005444:	e7d9      	b.n	80053fa <_printf_common+0x8e>
	...

08005448 <_printf_i>:
 8005448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800544c:	460c      	mov	r4, r1
 800544e:	4691      	mov	r9, r2
 8005450:	7e27      	ldrb	r7, [r4, #24]
 8005452:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005454:	2f78      	cmp	r7, #120	; 0x78
 8005456:	4680      	mov	r8, r0
 8005458:	469a      	mov	sl, r3
 800545a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800545e:	d807      	bhi.n	8005470 <_printf_i+0x28>
 8005460:	2f62      	cmp	r7, #98	; 0x62
 8005462:	d80a      	bhi.n	800547a <_printf_i+0x32>
 8005464:	2f00      	cmp	r7, #0
 8005466:	f000 80d8 	beq.w	800561a <_printf_i+0x1d2>
 800546a:	2f58      	cmp	r7, #88	; 0x58
 800546c:	f000 80a3 	beq.w	80055b6 <_printf_i+0x16e>
 8005470:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005478:	e03a      	b.n	80054f0 <_printf_i+0xa8>
 800547a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800547e:	2b15      	cmp	r3, #21
 8005480:	d8f6      	bhi.n	8005470 <_printf_i+0x28>
 8005482:	a001      	add	r0, pc, #4	; (adr r0, 8005488 <_printf_i+0x40>)
 8005484:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005488:	080054e1 	.word	0x080054e1
 800548c:	080054f5 	.word	0x080054f5
 8005490:	08005471 	.word	0x08005471
 8005494:	08005471 	.word	0x08005471
 8005498:	08005471 	.word	0x08005471
 800549c:	08005471 	.word	0x08005471
 80054a0:	080054f5 	.word	0x080054f5
 80054a4:	08005471 	.word	0x08005471
 80054a8:	08005471 	.word	0x08005471
 80054ac:	08005471 	.word	0x08005471
 80054b0:	08005471 	.word	0x08005471
 80054b4:	08005601 	.word	0x08005601
 80054b8:	08005525 	.word	0x08005525
 80054bc:	080055e3 	.word	0x080055e3
 80054c0:	08005471 	.word	0x08005471
 80054c4:	08005471 	.word	0x08005471
 80054c8:	08005623 	.word	0x08005623
 80054cc:	08005471 	.word	0x08005471
 80054d0:	08005525 	.word	0x08005525
 80054d4:	08005471 	.word	0x08005471
 80054d8:	08005471 	.word	0x08005471
 80054dc:	080055eb 	.word	0x080055eb
 80054e0:	680b      	ldr	r3, [r1, #0]
 80054e2:	1d1a      	adds	r2, r3, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	600a      	str	r2, [r1, #0]
 80054e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0a3      	b.n	800563c <_printf_i+0x1f4>
 80054f4:	6825      	ldr	r5, [r4, #0]
 80054f6:	6808      	ldr	r0, [r1, #0]
 80054f8:	062e      	lsls	r6, r5, #24
 80054fa:	f100 0304 	add.w	r3, r0, #4
 80054fe:	d50a      	bpl.n	8005516 <_printf_i+0xce>
 8005500:	6805      	ldr	r5, [r0, #0]
 8005502:	600b      	str	r3, [r1, #0]
 8005504:	2d00      	cmp	r5, #0
 8005506:	da03      	bge.n	8005510 <_printf_i+0xc8>
 8005508:	232d      	movs	r3, #45	; 0x2d
 800550a:	426d      	negs	r5, r5
 800550c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005510:	485e      	ldr	r0, [pc, #376]	; (800568c <_printf_i+0x244>)
 8005512:	230a      	movs	r3, #10
 8005514:	e019      	b.n	800554a <_printf_i+0x102>
 8005516:	f015 0f40 	tst.w	r5, #64	; 0x40
 800551a:	6805      	ldr	r5, [r0, #0]
 800551c:	600b      	str	r3, [r1, #0]
 800551e:	bf18      	it	ne
 8005520:	b22d      	sxthne	r5, r5
 8005522:	e7ef      	b.n	8005504 <_printf_i+0xbc>
 8005524:	680b      	ldr	r3, [r1, #0]
 8005526:	6825      	ldr	r5, [r4, #0]
 8005528:	1d18      	adds	r0, r3, #4
 800552a:	6008      	str	r0, [r1, #0]
 800552c:	0628      	lsls	r0, r5, #24
 800552e:	d501      	bpl.n	8005534 <_printf_i+0xec>
 8005530:	681d      	ldr	r5, [r3, #0]
 8005532:	e002      	b.n	800553a <_printf_i+0xf2>
 8005534:	0669      	lsls	r1, r5, #25
 8005536:	d5fb      	bpl.n	8005530 <_printf_i+0xe8>
 8005538:	881d      	ldrh	r5, [r3, #0]
 800553a:	4854      	ldr	r0, [pc, #336]	; (800568c <_printf_i+0x244>)
 800553c:	2f6f      	cmp	r7, #111	; 0x6f
 800553e:	bf0c      	ite	eq
 8005540:	2308      	moveq	r3, #8
 8005542:	230a      	movne	r3, #10
 8005544:	2100      	movs	r1, #0
 8005546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800554a:	6866      	ldr	r6, [r4, #4]
 800554c:	60a6      	str	r6, [r4, #8]
 800554e:	2e00      	cmp	r6, #0
 8005550:	bfa2      	ittt	ge
 8005552:	6821      	ldrge	r1, [r4, #0]
 8005554:	f021 0104 	bicge.w	r1, r1, #4
 8005558:	6021      	strge	r1, [r4, #0]
 800555a:	b90d      	cbnz	r5, 8005560 <_printf_i+0x118>
 800555c:	2e00      	cmp	r6, #0
 800555e:	d04d      	beq.n	80055fc <_printf_i+0x1b4>
 8005560:	4616      	mov	r6, r2
 8005562:	fbb5 f1f3 	udiv	r1, r5, r3
 8005566:	fb03 5711 	mls	r7, r3, r1, r5
 800556a:	5dc7      	ldrb	r7, [r0, r7]
 800556c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005570:	462f      	mov	r7, r5
 8005572:	42bb      	cmp	r3, r7
 8005574:	460d      	mov	r5, r1
 8005576:	d9f4      	bls.n	8005562 <_printf_i+0x11a>
 8005578:	2b08      	cmp	r3, #8
 800557a:	d10b      	bne.n	8005594 <_printf_i+0x14c>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	07df      	lsls	r7, r3, #31
 8005580:	d508      	bpl.n	8005594 <_printf_i+0x14c>
 8005582:	6923      	ldr	r3, [r4, #16]
 8005584:	6861      	ldr	r1, [r4, #4]
 8005586:	4299      	cmp	r1, r3
 8005588:	bfde      	ittt	le
 800558a:	2330      	movle	r3, #48	; 0x30
 800558c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005590:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005594:	1b92      	subs	r2, r2, r6
 8005596:	6122      	str	r2, [r4, #16]
 8005598:	f8cd a000 	str.w	sl, [sp]
 800559c:	464b      	mov	r3, r9
 800559e:	aa03      	add	r2, sp, #12
 80055a0:	4621      	mov	r1, r4
 80055a2:	4640      	mov	r0, r8
 80055a4:	f7ff fee2 	bl	800536c <_printf_common>
 80055a8:	3001      	adds	r0, #1
 80055aa:	d14c      	bne.n	8005646 <_printf_i+0x1fe>
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	b004      	add	sp, #16
 80055b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b6:	4835      	ldr	r0, [pc, #212]	; (800568c <_printf_i+0x244>)
 80055b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	680e      	ldr	r6, [r1, #0]
 80055c0:	061f      	lsls	r7, r3, #24
 80055c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80055c6:	600e      	str	r6, [r1, #0]
 80055c8:	d514      	bpl.n	80055f4 <_printf_i+0x1ac>
 80055ca:	07d9      	lsls	r1, r3, #31
 80055cc:	bf44      	itt	mi
 80055ce:	f043 0320 	orrmi.w	r3, r3, #32
 80055d2:	6023      	strmi	r3, [r4, #0]
 80055d4:	b91d      	cbnz	r5, 80055de <_printf_i+0x196>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	f023 0320 	bic.w	r3, r3, #32
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	2310      	movs	r3, #16
 80055e0:	e7b0      	b.n	8005544 <_printf_i+0xfc>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	f043 0320 	orr.w	r3, r3, #32
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	2378      	movs	r3, #120	; 0x78
 80055ec:	4828      	ldr	r0, [pc, #160]	; (8005690 <_printf_i+0x248>)
 80055ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055f2:	e7e3      	b.n	80055bc <_printf_i+0x174>
 80055f4:	065e      	lsls	r6, r3, #25
 80055f6:	bf48      	it	mi
 80055f8:	b2ad      	uxthmi	r5, r5
 80055fa:	e7e6      	b.n	80055ca <_printf_i+0x182>
 80055fc:	4616      	mov	r6, r2
 80055fe:	e7bb      	b.n	8005578 <_printf_i+0x130>
 8005600:	680b      	ldr	r3, [r1, #0]
 8005602:	6826      	ldr	r6, [r4, #0]
 8005604:	6960      	ldr	r0, [r4, #20]
 8005606:	1d1d      	adds	r5, r3, #4
 8005608:	600d      	str	r5, [r1, #0]
 800560a:	0635      	lsls	r5, r6, #24
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	d501      	bpl.n	8005614 <_printf_i+0x1cc>
 8005610:	6018      	str	r0, [r3, #0]
 8005612:	e002      	b.n	800561a <_printf_i+0x1d2>
 8005614:	0671      	lsls	r1, r6, #25
 8005616:	d5fb      	bpl.n	8005610 <_printf_i+0x1c8>
 8005618:	8018      	strh	r0, [r3, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	6123      	str	r3, [r4, #16]
 800561e:	4616      	mov	r6, r2
 8005620:	e7ba      	b.n	8005598 <_printf_i+0x150>
 8005622:	680b      	ldr	r3, [r1, #0]
 8005624:	1d1a      	adds	r2, r3, #4
 8005626:	600a      	str	r2, [r1, #0]
 8005628:	681e      	ldr	r6, [r3, #0]
 800562a:	6862      	ldr	r2, [r4, #4]
 800562c:	2100      	movs	r1, #0
 800562e:	4630      	mov	r0, r6
 8005630:	f7fa fdce 	bl	80001d0 <memchr>
 8005634:	b108      	cbz	r0, 800563a <_printf_i+0x1f2>
 8005636:	1b80      	subs	r0, r0, r6
 8005638:	6060      	str	r0, [r4, #4]
 800563a:	6863      	ldr	r3, [r4, #4]
 800563c:	6123      	str	r3, [r4, #16]
 800563e:	2300      	movs	r3, #0
 8005640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005644:	e7a8      	b.n	8005598 <_printf_i+0x150>
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	4632      	mov	r2, r6
 800564a:	4649      	mov	r1, r9
 800564c:	4640      	mov	r0, r8
 800564e:	47d0      	blx	sl
 8005650:	3001      	adds	r0, #1
 8005652:	d0ab      	beq.n	80055ac <_printf_i+0x164>
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	079b      	lsls	r3, r3, #30
 8005658:	d413      	bmi.n	8005682 <_printf_i+0x23a>
 800565a:	68e0      	ldr	r0, [r4, #12]
 800565c:	9b03      	ldr	r3, [sp, #12]
 800565e:	4298      	cmp	r0, r3
 8005660:	bfb8      	it	lt
 8005662:	4618      	movlt	r0, r3
 8005664:	e7a4      	b.n	80055b0 <_printf_i+0x168>
 8005666:	2301      	movs	r3, #1
 8005668:	4632      	mov	r2, r6
 800566a:	4649      	mov	r1, r9
 800566c:	4640      	mov	r0, r8
 800566e:	47d0      	blx	sl
 8005670:	3001      	adds	r0, #1
 8005672:	d09b      	beq.n	80055ac <_printf_i+0x164>
 8005674:	3501      	adds	r5, #1
 8005676:	68e3      	ldr	r3, [r4, #12]
 8005678:	9903      	ldr	r1, [sp, #12]
 800567a:	1a5b      	subs	r3, r3, r1
 800567c:	42ab      	cmp	r3, r5
 800567e:	dcf2      	bgt.n	8005666 <_printf_i+0x21e>
 8005680:	e7eb      	b.n	800565a <_printf_i+0x212>
 8005682:	2500      	movs	r5, #0
 8005684:	f104 0619 	add.w	r6, r4, #25
 8005688:	e7f5      	b.n	8005676 <_printf_i+0x22e>
 800568a:	bf00      	nop
 800568c:	08005849 	.word	0x08005849
 8005690:	0800585a 	.word	0x0800585a

08005694 <_read_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d07      	ldr	r5, [pc, #28]	; (80056b4 <_read_r+0x20>)
 8005698:	4604      	mov	r4, r0
 800569a:	4608      	mov	r0, r1
 800569c:	4611      	mov	r1, r2
 800569e:	2200      	movs	r2, #0
 80056a0:	602a      	str	r2, [r5, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f7fb f898 	bl	80007d8 <_read>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_read_r+0x1e>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_read_r+0x1e>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	2000055c 	.word	0x2000055c

080056b8 <_fstat_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d07      	ldr	r5, [pc, #28]	; (80056d8 <_fstat_r+0x20>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	602b      	str	r3, [r5, #0]
 80056c6:	f7fb f8cc 	bl	8000862 <_fstat>
 80056ca:	1c43      	adds	r3, r0, #1
 80056cc:	d102      	bne.n	80056d4 <_fstat_r+0x1c>
 80056ce:	682b      	ldr	r3, [r5, #0]
 80056d0:	b103      	cbz	r3, 80056d4 <_fstat_r+0x1c>
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	bd38      	pop	{r3, r4, r5, pc}
 80056d6:	bf00      	nop
 80056d8:	2000055c 	.word	0x2000055c

080056dc <_isatty_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d06      	ldr	r5, [pc, #24]	; (80056f8 <_isatty_r+0x1c>)
 80056e0:	2300      	movs	r3, #0
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	f7fb f8cb 	bl	8000882 <_isatty>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_isatty_r+0x1a>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_isatty_r+0x1a>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	2000055c 	.word	0x2000055c

080056fc <_init>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr

08005708 <_fini>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr
