
nucleol476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005784  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005abc  08005abc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ac4  08005ac4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000070  08005b3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08005b3c  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e52b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a6  00000000  00000000  0002e5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00030878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00031448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270d2  00000000  00000000  00032368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d326  00000000  00000000  0005943a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec5bf  00000000  00000000  00066760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034cc  00000000  00000000  00152d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_pubnames 000007ca  00000000  00000000  00156240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_pubtypes 00000048  00000000  00000000  00156a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058fc 	.word	0x080058fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080058fc 	.word	0x080058fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the huart2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1,0xFFFF);
 8000278:	1d39      	adds	r1, r7, #4
 800027a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800027e:	2201      	movs	r2, #1
 8000280:	4803      	ldr	r0, [pc, #12]	; (8000290 <__io_putchar+0x20>)
 8000282:	f002 fe21 	bl	8002ec8 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart2, (uint8_t *)&ch, 1);
  return ch;
 8000286:	687b      	ldr	r3, [r7, #4]
}
 8000288:	4618      	mov	r0, r3
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	200004cc 	.word	0x200004cc

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fcc3 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f935 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a2:	f000 f9f7 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a6:	f000 f9d7 	bl	8000658 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002aa:	f000 f9a5 	bl	80005f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef x;
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)funBuffer, 4);
 80002ae:	2204      	movs	r2, #4
 80002b0:	498b      	ldr	r1, [pc, #556]	; (80004e0 <main+0x24c>)
 80002b2:	488c      	ldr	r0, [pc, #560]	; (80004e4 <main+0x250>)
 80002b4:	f002 ff3c 	bl	8003130 <HAL_UART_Receive_DMA>
  uint buttonPressed1Counter=0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]
  uint buttonPressed2Counter=0;
 80002bc:	2300      	movs	r3, #0
 80002be:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80002c0:	2120      	movs	r1, #32
 80002c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c6:	f001 fa8b 	bl	80017e0 <HAL_GPIO_TogglePin>
  uint button1pressed=0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61bb      	str	r3, [r7, #24]
  uint button1pressednext=0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]
  uint button2pressed=0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	607b      	str	r3, [r7, #4]
  uint button2pressednext=0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	603b      	str	r3, [r7, #0]
  printf("program start\r\n");
 80002da:	4883      	ldr	r0, [pc, #524]	; (80004e8 <main+0x254>)
 80002dc:	f004 fe2c 	bl	8004f38 <puts>
  char prevchar=0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	74fb      	strb	r3, [r7, #19]
  char thechar=0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	74bb      	strb	r3, [r7, #18]
  uint dings=0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //printf("huart2.RxXferSize=%u\r\n",huart2.RxXferSize);
	  printf("hello wolrd\r\n");
 80002ec:	487f      	ldr	r0, [pc, #508]	; (80004ec <main+0x258>)
 80002ee:	f004 fe23 	bl	8004f38 <puts>
	  button1pressednext=0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)!=GPIO_PIN_SET){
 80002f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fa:	487d      	ldr	r0, [pc, #500]	; (80004f0 <main+0x25c>)
 80002fc:	f001 fa40 	bl	8001780 <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
 8000302:	2b01      	cmp	r3, #1
 8000304:	d010      	beq.n	8000328 <main+0x94>
		  button1pressednext=1;
 8000306:	2301      	movs	r3, #1
 8000308:	617b      	str	r3, [r7, #20]
	      if(button1pressed==0){
 800030a:	69bb      	ldr	r3, [r7, #24]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d10b      	bne.n	8000328 <main+0x94>
	      	  printf("button is pressed times: %u \r\n",++buttonPressed1Counter);
 8000310:	69fb      	ldr	r3, [r7, #28]
 8000312:	3301      	adds	r3, #1
 8000314:	61fb      	str	r3, [r7, #28]
 8000316:	69f9      	ldr	r1, [r7, #28]
 8000318:	4876      	ldr	r0, [pc, #472]	; (80004f4 <main+0x260>)
 800031a:	f004 fd87 	bl	8004e2c <iprintf>
	      	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800031e:	2120      	movs	r1, #32
 8000320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000324:	f001 fa5c 	bl	80017e0 <HAL_GPIO_TogglePin>
	    if(button2pressed==0)
	      		printf("button2 is pressed times: %u \r\n",++buttonPressed2Counter);
	  }

	  button2pressednext=button2pressednext;*/
	  button1pressed=button1pressednext;
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	61bb      	str	r3, [r7, #24]
	  huart2.pRxBuffPtr  = funBuffer;
 800032c:	4b6d      	ldr	r3, [pc, #436]	; (80004e4 <main+0x250>)
 800032e:	4a6c      	ldr	r2, [pc, #432]	; (80004e0 <main+0x24c>)
 8000330:	655a      	str	r2, [r3, #84]	; 0x54
		  HAL_GPIO_WritePin(GPIOA,bled7_Pin,((dings)>>6)&1);
		  HAL_GPIO_WritePin(GPIOB,bled8_Pin,((dings)>>7)&1);
		  HAL_GPIO_WritePin(GPIOB,bled9_Pin,((dings)>>8)&1);
		  funBufferIndex++;
	  }*/
	  while(funBuffer[funBufferIndex]){
 8000332:	e0ab      	b.n	800048c <main+0x1f8>
		  dings=0;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]

		  if(funBuffer[funBufferIndex]<='9'&&funBuffer[funBufferIndex]>='0'){
 8000338:	4b6f      	ldr	r3, [pc, #444]	; (80004f8 <main+0x264>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a68      	ldr	r2, [pc, #416]	; (80004e0 <main+0x24c>)
 800033e:	5cd3      	ldrb	r3, [r2, r3]
 8000340:	2b39      	cmp	r3, #57	; 0x39
 8000342:	d80c      	bhi.n	800035e <main+0xca>
 8000344:	4b6c      	ldr	r3, [pc, #432]	; (80004f8 <main+0x264>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a65      	ldr	r2, [pc, #404]	; (80004e0 <main+0x24c>)
 800034a:	5cd3      	ldrb	r3, [r2, r3]
 800034c:	2b2f      	cmp	r3, #47	; 0x2f
 800034e:	d906      	bls.n	800035e <main+0xca>
		  			  dings=funBuffer[funBufferIndex]-'0';
 8000350:	4b69      	ldr	r3, [pc, #420]	; (80004f8 <main+0x264>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a62      	ldr	r2, [pc, #392]	; (80004e0 <main+0x24c>)
 8000356:	5cd3      	ldrb	r3, [r2, r3]
 8000358:	3b30      	subs	r3, #48	; 0x30
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	e011      	b.n	8000382 <main+0xee>
		  }else if(funBuffer[funBufferIndex]<='z'&&funBuffer[funBufferIndex]>='a'){
 800035e:	4b66      	ldr	r3, [pc, #408]	; (80004f8 <main+0x264>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a5f      	ldr	r2, [pc, #380]	; (80004e0 <main+0x24c>)
 8000364:	5cd3      	ldrb	r3, [r2, r3]
 8000366:	2b7a      	cmp	r3, #122	; 0x7a
 8000368:	d80b      	bhi.n	8000382 <main+0xee>
 800036a:	4b63      	ldr	r3, [pc, #396]	; (80004f8 <main+0x264>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a5c      	ldr	r2, [pc, #368]	; (80004e0 <main+0x24c>)
 8000370:	5cd3      	ldrb	r3, [r2, r3]
 8000372:	2b60      	cmp	r3, #96	; 0x60
 8000374:	d905      	bls.n	8000382 <main+0xee>
			  dings=funBuffer[funBufferIndex]-'a'+10;
 8000376:	4b60      	ldr	r3, [pc, #384]	; (80004f8 <main+0x264>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a59      	ldr	r2, [pc, #356]	; (80004e0 <main+0x24c>)
 800037c:	5cd3      	ldrb	r3, [r2, r3]
 800037e:	3b57      	subs	r3, #87	; 0x57
 8000380:	60fb      	str	r3, [r7, #12]
		  }
		  if(prevchar){
 8000382:	7cfb      	ldrb	r3, [r7, #19]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d076      	beq.n	8000476 <main+0x1e2>
			  thechar|=dings;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	b2da      	uxtb	r2, r3
 800038c:	7cbb      	ldrb	r3, [r7, #18]
 800038e:	4313      	orrs	r3, r2
 8000390:	74bb      	strb	r3, [r7, #18]
			  printf("thechar:%u",thechar);
 8000392:	7cbb      	ldrb	r3, [r7, #18]
 8000394:	4619      	mov	r1, r3
 8000396:	4859      	ldr	r0, [pc, #356]	; (80004fc <main+0x268>)
 8000398:	f004 fd48 	bl	8004e2c <iprintf>
			  dings=thechar;
 800039c:	7cbb      	ldrb	r3, [r7, #18]
 800039e:	60fb      	str	r3, [r7, #12]
			  HAL_GPIO_WritePin(GPIOA,LED_2_Pin,(dings)&1);
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	f003 0301 	and.w	r3, r3, #1
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	461a      	mov	r2, r3
 80003ac:	2120      	movs	r1, #32
 80003ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b2:	f001 f9fd 	bl	80017b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,bled2_Pin,((dings)>>1)&1);
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	085b      	lsrs	r3, r3, #1
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	2140      	movs	r1, #64	; 0x40
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ca:	f001 f9f1 	bl	80017b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,bled3_Pin,((dings)>>2)&1);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	089b      	lsrs	r3, r3, #2
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	461a      	mov	r2, r3
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e2:	f001 f9e5 	bl	80017b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB,bled4_Pin,((dings)>>3)&1);
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	08db      	lsrs	r3, r3, #3
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	2140      	movs	r1, #64	; 0x40
 80003f6:	4842      	ldr	r0, [pc, #264]	; (8000500 <main+0x26c>)
 80003f8:	f001 f9da 	bl	80017b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(bled5_GPIO_Port,bled5_Pin,((dings)>>4)&1);
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	091b      	lsrs	r3, r3, #4
 8000400:	b2db      	uxtb	r3, r3
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	b2db      	uxtb	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	4838      	ldr	r0, [pc, #224]	; (80004f0 <main+0x25c>)
 800040e:	f001 f9cf 	bl	80017b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,bled6_Pin,((dings)>>5)&1);
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	095b      	lsrs	r3, r3, #5
 8000416:	b2db      	uxtb	r3, r3
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	b2db      	uxtb	r3, r3
 800041e:	461a      	mov	r2, r3
 8000420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000428:	f001 f9c2 	bl	80017b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,bled7_Pin,((dings)>>6)&1);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	099b      	lsrs	r3, r3, #6
 8000430:	b2db      	uxtb	r3, r3
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	b2db      	uxtb	r3, r3
 8000438:	461a      	mov	r2, r3
 800043a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000442:	f001 f9b5 	bl	80017b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB,bled8_Pin,((dings)>>7)&1);
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	09db      	lsrs	r3, r3, #7
 800044a:	b2db      	uxtb	r3, r3
 800044c:	f003 0301 	and.w	r3, r3, #1
 8000450:	b2db      	uxtb	r3, r3
 8000452:	461a      	mov	r2, r3
 8000454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000458:	4829      	ldr	r0, [pc, #164]	; (8000500 <main+0x26c>)
 800045a:	f001 f9a9 	bl	80017b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB,bled9_Pin,((dings)>>8)&1);
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	0a1b      	lsrs	r3, r3, #8
 8000462:	b2db      	uxtb	r3, r3
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	2110      	movs	r1, #16
 800046e:	4824      	ldr	r0, [pc, #144]	; (8000500 <main+0x26c>)
 8000470:	f001 f99e 	bl	80017b0 <HAL_GPIO_WritePin>
 8000474:	e003      	b.n	800047e <main+0x1ea>
		  }else{
			  thechar=dings<<4;
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	b2db      	uxtb	r3, r3
 800047a:	011b      	lsls	r3, r3, #4
 800047c:	74bb      	strb	r3, [r7, #18]
		  }
		  prevchar=!prevchar;
 800047e:	7cfb      	ldrb	r3, [r7, #19]
 8000480:	2b00      	cmp	r3, #0
 8000482:	bf0c      	ite	eq
 8000484:	2301      	moveq	r3, #1
 8000486:	2300      	movne	r3, #0
 8000488:	b2db      	uxtb	r3, r3
 800048a:	74fb      	strb	r3, [r7, #19]
	  while(funBuffer[funBufferIndex]){
 800048c:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <main+0x264>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <main+0x24c>)
 8000492:	5cd3      	ldrb	r3, [r2, r3]
 8000494:	2b00      	cmp	r3, #0
 8000496:	f47f af4d 	bne.w	8000334 <main+0xa0>
	  //printf("before transmit\n");
	  //HAL_UART_Transmit(&huart2,(uint8_t *)lel, 3,0xFFFF);
	  //printf("after transmit");
	  //putchar('x');
	  //printf("\r\n");
	  fflush(stdout);
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <main+0x270>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f004 fae9 	bl	8004a78 <fflush>
	  //printf("huart2.RxXferCount=%u\r\n",huart2.RxXferCount);
	  huart2.RxXferCount=1000;
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <main+0x250>)
 80004a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  //huart2.Instance->TDR='d';
	  if (huart2.Instance->ISR>>3&1||huart2.Instance->CR1==13){
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <main+0x250>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	08db      	lsrs	r3, r3, #3
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d105      	bne.n	80004cc <main+0x238>
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <main+0x250>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b0d      	cmp	r3, #13
 80004c8:	f47f af10 	bne.w	80002ec <main+0x58>
		  printf("I can't receive data anymore\r\n");
 80004cc:	480e      	ldr	r0, [pc, #56]	; (8000508 <main+0x274>)
 80004ce:	f004 fd33 	bl	8004f38 <puts>
		  //printf("huart2.instance->ISR=%u\r\n",huart2.Instance->ISR);
		  //attempt to fix
		 // huart2.Instance->ISR&=(~(1<<3));
		 // huart2.Instance->CR1=301;
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)funBuffer, 100);
 80004d2:	2264      	movs	r2, #100	; 0x64
 80004d4:	4902      	ldr	r1, [pc, #8]	; (80004e0 <main+0x24c>)
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <main+0x250>)
 80004d8:	f002 fde6 	bl	80030a8 <HAL_UART_Receive_IT>
	  printf("hello wolrd\r\n");
 80004dc:	e706      	b.n	80002ec <main+0x58>
 80004de:	bf00      	nop
 80004e0:	2000008c 	.word	0x2000008c
 80004e4:	200004cc 	.word	0x200004cc
 80004e8:	0800591c 	.word	0x0800591c
 80004ec:	0800592c 	.word	0x0800592c
 80004f0:	48000800 	.word	0x48000800
 80004f4:	0800593c 	.word	0x0800593c
 80004f8:	20000474 	.word	0x20000474
 80004fc:	0800595c 	.word	0x0800595c
 8000500:	48000400 	.word	0x48000400
 8000504:	2000000c 	.word	0x2000000c
 8000508:	08005968 	.word	0x08005968

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b0b8      	sub	sp, #224	; 0xe0
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000516:	2244      	movs	r2, #68	; 0x44
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 ffd1 	bl	80044c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2288      	movs	r2, #136	; 0x88
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 ffc3 	bl	80044c2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053c:	2302      	movs	r3, #2
 800053e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054a:	2310      	movs	r3, #16
 800054c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	2302      	movs	r3, #2
 8000552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800055c:	2301      	movs	r3, #1
 800055e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000562:	230a      	movs	r3, #10
 8000564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000568:	2307      	movs	r3, #7
 800056a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800057e:	4618      	mov	r0, r3
 8000580:	f001 f9ac 	bl	80018dc <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800058a:	f000 f967 	bl	800085c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2303      	movs	r3, #3
 8000596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fd78 	bl	80020a8 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005be:	f000 f94d 	bl	800085c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 ff71 	bl	80024b4 <HAL_RCCEx_PeriphCLKConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005d8:	f000 f940 	bl	800085c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e0:	f001 f926 	bl	8001830 <HAL_PWREx_ControlVoltageScaling>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005ea:	f000 f937 	bl	800085c <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	37e0      	adds	r7, #224	; 0xe0
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_USART2_UART_Init+0x58>)
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <MX_USART2_UART_Init+0x5c>)
 8000600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800063c:	f002 fbf6 	bl	8002e2c <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000646:	f000 f909 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200004cc 	.word	0x200004cc
 8000654:	40004400 	.word	0x40004400

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_DMA_Init+0x38>)
 8000660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <MX_DMA_Init+0x38>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6493      	str	r3, [r2, #72]	; 0x48
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_DMA_Init+0x38>)
 800066c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	2010      	movs	r0, #16
 800067c:	f000 fc29 	bl	8000ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000680:	2010      	movs	r0, #16
 8000682:	f000 fc42 	bl	8000f0a <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b4f      	ldr	r3, [pc, #316]	; (80007e8 <MX_GPIO_Init+0x154>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a4e      	ldr	r2, [pc, #312]	; (80007e8 <MX_GPIO_Init+0x154>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b4c      	ldr	r3, [pc, #304]	; (80007e8 <MX_GPIO_Init+0x154>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <MX_GPIO_Init+0x154>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a48      	ldr	r2, [pc, #288]	; (80007e8 <MX_GPIO_Init+0x154>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b46      	ldr	r3, [pc, #280]	; (80007e8 <MX_GPIO_Init+0x154>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b43      	ldr	r3, [pc, #268]	; (80007e8 <MX_GPIO_Init+0x154>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a42      	ldr	r2, [pc, #264]	; (80007e8 <MX_GPIO_Init+0x154>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b40      	ldr	r3, [pc, #256]	; (80007e8 <MX_GPIO_Init+0x154>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <MX_GPIO_Init+0x154>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a3c      	ldr	r2, [pc, #240]	; (80007e8 <MX_GPIO_Init+0x154>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <MX_GPIO_Init+0x154>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_2_Pin|bled2_Pin|bled3_Pin|bled7_Pin
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000714:	f001 f84c 	bl	80017b0 <HAL_GPIO_WritePin>
                          |bled6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, bled8_Pin|bled9_Pin|bled4_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800071e:	4833      	ldr	r0, [pc, #204]	; (80007ec <MX_GPIO_Init+0x158>)
 8000720:	f001 f846 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bled5_GPIO_Port, bled5_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	4831      	ldr	r0, [pc, #196]	; (80007f0 <MX_GPIO_Init+0x15c>)
 800072a:	f001 f841 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000734:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <MX_GPIO_Init+0x160>)
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	482b      	ldr	r0, [pc, #172]	; (80007f0 <MX_GPIO_Init+0x15c>)
 8000744:	f000 fe72 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin bled2_Pin bled3_Pin bled7_Pin
                           bled6_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|bled2_Pin|bled3_Pin|bled7_Pin
 8000748:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800074c:	617b      	str	r3, [r7, #20]
                          |bled6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f000 fe62 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : bled8_Pin bled9_Pin bled4_Pin */
  GPIO_InitStruct.Pin = bled8_Pin|bled9_Pin|bled4_Pin;
 8000768:	f44f 638a 	mov.w	r3, #1104	; 0x450
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	481a      	ldr	r0, [pc, #104]	; (80007ec <MX_GPIO_Init+0x158>)
 8000782:	f000 fe53 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : bled5_Pin */
  GPIO_InitStruct.Pin = bled5_Pin;
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(bled5_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4814      	ldr	r0, [pc, #80]	; (80007f0 <MX_GPIO_Init+0x15c>)
 800079e:	f000 fe45 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f000 fe37 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c4:	2312      	movs	r3, #18
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d0:	2304      	movs	r3, #4
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0x158>)
 80007dc:	f000 fe26 	bl	800142c <HAL_GPIO_Init>

}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000
 80007ec:	48000400 	.word	0x48000400
 80007f0:	48000800 	.word	0x48000800
 80007f4:	10210000 	.word	0x10210000

080007f8 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */

    printf("recovered character:%c\r\n",funBuffer[funBufferIndex]);
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_UART_RxCpltCallback+0x50>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <HAL_UART_RxCpltCallback+0x54>)
 8000806:	5cd3      	ldrb	r3, [r2, r3]
 8000808:	4619      	mov	r1, r3
 800080a:	4811      	ldr	r0, [pc, #68]	; (8000850 <HAL_UART_RxCpltCallback+0x58>)
 800080c:	f004 fb0e 	bl	8004e2c <iprintf>
    printf("Data has been uploaded!\r\n");
 8000810:	4810      	ldr	r0, [pc, #64]	; (8000854 <HAL_UART_RxCpltCallback+0x5c>)
 8000812:	f004 fb91 	bl	8004f38 <puts>
    funBufferIndex=0;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_UART_RxCpltCallback+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
    memset(funBuffer, 0, sizeof(funBuffer));
 800081c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000820:	2100      	movs	r1, #0
 8000822:	480a      	ldr	r0, [pc, #40]	; (800084c <HAL_UART_RxCpltCallback+0x54>)
 8000824:	f003 fe4d 	bl	80044c2 <memset>
    HAL_UART_Receive_DMA(&huart2, (uint8_t *)funBuffer, 1000);
 8000828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800082c:	4907      	ldr	r1, [pc, #28]	; (800084c <HAL_UART_RxCpltCallback+0x54>)
 800082e:	480a      	ldr	r0, [pc, #40]	; (8000858 <HAL_UART_RxCpltCallback+0x60>)
 8000830:	f002 fc7e 	bl	8003130 <HAL_UART_Receive_DMA>

    HAL_UART_Transmit_IT(&huart2, (uint8_t *)funBuffer, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	4905      	ldr	r1, [pc, #20]	; (800084c <HAL_UART_RxCpltCallback+0x54>)
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <HAL_UART_RxCpltCallback+0x60>)
 800083a:	f002 fbd9 	bl	8002ff0 <HAL_UART_Transmit_IT>
   // printf("I've been interrupted\r\n");
    //HAL_UART_Receive_IT(&huart2, (uint8_t *)funBuffer, 1);
    //memset(funBuffer, 0, sizeof(funBuffer));
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000474 	.word	0x20000474
 800084c:	2000008c 	.word	0x2000008c
 8000850:	08005988 	.word	0x08005988
 8000854:	080059a4 	.word	0x080059a4
 8000858:	200004cc 	.word	0x200004cc

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("THERE HAS BEEN AN ERROR\r\n");
 8000864:	4801      	ldr	r0, [pc, #4]	; (800086c <Error_Handler+0x10>)
 8000866:	f004 fb67 	bl	8004f38 <puts>
 800086a:	e7fb      	b.n	8000864 <Error_Handler+0x8>
 800086c:	080059c0 	.word	0x080059c0

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_MspInit+0x44>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6613      	str	r3, [r2, #96]	; 0x60
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_MspInit+0x44>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a30      	ldr	r2, [pc, #192]	; (8000998 <HAL_UART_MspInit+0xe0>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d159      	bne.n	800098e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <HAL_UART_MspInit+0xe4>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <HAL_UART_MspInit+0xe4>)
 80008e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e4:	6593      	str	r3, [r2, #88]	; 0x58
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_UART_MspInit+0xe4>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <HAL_UART_MspInit+0xe4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a29      	ldr	r2, [pc, #164]	; (800099c <HAL_UART_MspInit+0xe4>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <HAL_UART_MspInit+0xe4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800090a:	230c      	movs	r3, #12
 800090c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800091a:	2307      	movs	r3, #7
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f000 fd80 	bl	800142c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 800092e:	4a1d      	ldr	r2, [pc, #116]	; (80009a4 <HAL_UART_MspInit+0xec>)
 8000930:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000934:	2202      	movs	r2, #2
 8000936:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000962:	480f      	ldr	r0, [pc, #60]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000964:	f000 faec 	bl	8000f40 <HAL_DMA_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 800096e:	f7ff ff75 	bl	800085c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000976:	671a      	str	r2, [r3, #112]	; 0x70
 8000978:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2026      	movs	r0, #38	; 0x26
 8000984:	f000 faa5 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000988:	2026      	movs	r0, #38	; 0x26
 800098a:	f000 fabe 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40004400 	.word	0x40004400
 800099c:	40021000 	.word	0x40021000
 80009a0:	20000484 	.word	0x20000484
 80009a4:	4002006c 	.word	0x4002006c

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f972 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <DMA1_Channel6_IRQHandler+0x10>)
 8000a02:	f000 fc34 	bl	800126e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000484 	.word	0x20000484

08000a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USART2_IRQHandler+0x10>)
 8000a16:	f002 fbcf 	bl	80031b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200004cc 	.word	0x200004cc

08000a24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	e00a      	b.n	8000a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a36:	f3af 8000 	nop.w
 8000a3a:	4601      	mov	r1, r0
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	60ba      	str	r2, [r7, #8]
 8000a42:	b2ca      	uxtb	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf0      	blt.n	8000a36 <_read+0x12>
	}

return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	e009      	b.n	8000a84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	60ba      	str	r2, [r7, #8]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fbf9 	bl	8000270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf1      	blt.n	8000a70 <_write+0x12>
	}
	return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_close>:

int _close(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abe:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_isatty>:

int _isatty(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <_sbrk+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <_sbrk+0x60>)
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <_sbrk+0x64>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <_sbrk+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b30:	f003 feda 	bl	80048e8 <__errno>
 8000b34:	4603      	mov	r3, r0
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <_sbrk+0x64>)
 8000b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20018000 	.word	0x20018000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	20000478 	.word	0x20000478
 8000b68:	20000568 	.word	0x20000568

08000b6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <SystemInit+0x5c>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <SystemInit+0x5c>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <SystemInit+0x60>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <SystemInit+0x60>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <SystemInit+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <SystemInit+0x60>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <SystemInit+0x60>)
 8000b98:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b9c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ba0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <SystemInit+0x60>)
 8000ba4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <SystemInit+0x60>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <SystemInit+0x60>)
 8000bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <SystemInit+0x60>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd4:	f7ff ffca 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bda:	e003      	b.n	8000be4 <LoopCopyDataInit>

08000bdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000be0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000be2:	3104      	adds	r1, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000be4:	480a      	ldr	r0, [pc, #40]	; (8000c10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000be8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bec:	d3f6      	bcc.n	8000bdc <CopyDataInit>
	ldr	r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bf0:	e002      	b.n	8000bf8 <LoopFillZerobss>

08000bf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bf2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bf4:	f842 3b04 	str.w	r3, [r2], #4

08000bf8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <LoopForever+0x16>)
	cmp	r2, r3
 8000bfa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bfc:	d3f9      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f004 f843 	bl	8004c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c02:	f7ff fb47 	bl	8000294 <main>

08000c06 <LoopForever>:

LoopForever:
    b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c0c:	08005acc 	.word	0x08005acc
	ldr	r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c14:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000c18:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000c1c:	20000564 	.word	0x20000564

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_Init+0x3c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <HAL_Init+0x3c>)
 8000c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	f000 f93e 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 f80f 	bl	8000c64 <HAL_InitTick>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	e001      	b.n	8000c56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c52:	f7ff fe0d 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c56:	79fb      	ldrb	r3, [r7, #7]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40022000 	.word	0x40022000

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d023      	beq.n	8000cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_InitTick+0x70>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f949 	bl	8000f26 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10f      	bne.n	8000cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d809      	bhi.n	8000cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f913 	bl	8000ed2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_InitTick+0x74>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e007      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e004      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e001      	b.n	8000cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000550 	.word	0x20000550

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000550 	.word	0x20000550

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff8e 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff29 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff3e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff8e 	bl	8000e10 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5d 	bl	8000dbc <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff31 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa2 	bl	8000e78 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e098      	b.n	8001084 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <HAL_DMA_Init+0x150>)
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d80f      	bhi.n	8000f7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <HAL_DMA_Init+0x154>)
 8000f66:	4413      	add	r3, r2
 8000f68:	4a4b      	ldr	r2, [pc, #300]	; (8001098 <HAL_DMA_Init+0x158>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	009a      	lsls	r2, r3, #2
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a48      	ldr	r2, [pc, #288]	; (800109c <HAL_DMA_Init+0x15c>)
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7c:	e00e      	b.n	8000f9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b46      	ldr	r3, [pc, #280]	; (80010a0 <HAL_DMA_Init+0x160>)
 8000f86:	4413      	add	r3, r2
 8000f88:	4a43      	ldr	r2, [pc, #268]	; (8001098 <HAL_DMA_Init+0x158>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	009a      	lsls	r2, r3, #2
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a42      	ldr	r2, [pc, #264]	; (80010a4 <HAL_DMA_Init+0x164>)
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ff6:	d039      	beq.n	800106c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a27      	ldr	r2, [pc, #156]	; (800109c <HAL_DMA_Init+0x15c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d11a      	bne.n	8001038 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <HAL_DMA_Init+0x168>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f003 031c 	and.w	r3, r3, #28
 800100e:	210f      	movs	r1, #15
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	4924      	ldr	r1, [pc, #144]	; (80010a8 <HAL_DMA_Init+0x168>)
 8001018:	4013      	ands	r3, r2
 800101a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <HAL_DMA_Init+0x168>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6859      	ldr	r1, [r3, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	f003 031c 	and.w	r3, r3, #28
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	491d      	ldr	r1, [pc, #116]	; (80010a8 <HAL_DMA_Init+0x168>)
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]
 8001036:	e019      	b.n	800106c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <HAL_DMA_Init+0x16c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	f003 031c 	and.w	r3, r3, #28
 8001044:	210f      	movs	r1, #15
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	4917      	ldr	r1, [pc, #92]	; (80010ac <HAL_DMA_Init+0x16c>)
 800104e:	4013      	ands	r3, r2
 8001050:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_DMA_Init+0x16c>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6859      	ldr	r1, [r3, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f003 031c 	and.w	r3, r3, #28
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	4911      	ldr	r1, [pc, #68]	; (80010ac <HAL_DMA_Init+0x16c>)
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40020407 	.word	0x40020407
 8001094:	bffdfff8 	.word	0xbffdfff8
 8001098:	cccccccd 	.word	0xcccccccd
 800109c:	40020000 	.word	0x40020000
 80010a0:	bffdfbf8 	.word	0xbffdfbf8
 80010a4:	40020400 	.word	0x40020400
 80010a8:	400200a8 	.word	0x400200a8
 80010ac:	400204a8 	.word	0x400204a8

080010b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_DMA_Start_IT+0x20>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e04b      	b.n	8001168 <HAL_DMA_Start_IT+0xb8>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d13a      	bne.n	800115a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2202      	movs	r2, #2
 80010e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0201 	bic.w	r2, r2, #1
 8001100:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f000 f95f 	bl	80013cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	2b00      	cmp	r3, #0
 8001114:	d008      	beq.n	8001128 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f042 020e 	orr.w	r2, r2, #14
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e00f      	b.n	8001148 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0204 	bic.w	r2, r2, #4
 8001136:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 020a 	orr.w	r2, r2, #10
 8001146:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0201 	orr.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e005      	b.n	8001166 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001162:	2302      	movs	r3, #2
 8001164:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001166:	7dfb      	ldrb	r3, [r7, #23]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d008      	beq.n	800119a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2204      	movs	r2, #4
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e022      	b.n	80011e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 020e 	bic.w	r2, r2, #14
 80011a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0201 	bic.w	r2, r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f003 021c 	and.w	r2, r3, #28
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	2101      	movs	r1, #1
 80011c8:	fa01 f202 	lsl.w	r2, r1, r2
 80011cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d005      	beq.n	8001210 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2204      	movs	r2, #4
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e029      	b.n	8001264 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 020e 	bic.w	r2, r2, #14
 800121e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	f003 021c 	and.w	r2, r3, #28
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	2101      	movs	r1, #1
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
    }
  }
  return status;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f003 031c 	and.w	r3, r3, #28
 800128e:	2204      	movs	r2, #4
 8001290:	409a      	lsls	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d026      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x7a>
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d021      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0320 	and.w	r3, r3, #32
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d107      	bne.n	80012c2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0204 	bic.w	r2, r2, #4
 80012c0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f003 021c 	and.w	r2, r3, #28
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	2104      	movs	r1, #4
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d071      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80012e6:	e06c      	b.n	80013c2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	f003 031c 	and.w	r3, r3, #28
 80012f0:	2202      	movs	r2, #2
 80012f2:	409a      	lsls	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d02e      	beq.n	800135a <HAL_DMA_IRQHandler+0xec>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d029      	beq.n	800135a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10b      	bne.n	800132c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 020a 	bic.w	r2, r2, #10
 8001322:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	f003 021c 	and.w	r2, r3, #28
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	2102      	movs	r1, #2
 800133a:	fa01 f202 	lsl.w	r2, r1, r2
 800133e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	2b00      	cmp	r3, #0
 800134e:	d038      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001358:	e033      	b.n	80013c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f003 031c 	and.w	r3, r3, #28
 8001362:	2208      	movs	r2, #8
 8001364:	409a      	lsls	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d02a      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x156>
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d025      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 020e 	bic.w	r2, r2, #14
 8001386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f003 021c 	and.w	r2, r3, #28
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	2101      	movs	r1, #1
 8001396:	fa01 f202 	lsl.w	r2, r1, r2
 800139a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d004      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
}
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f003 021c 	and.w	r2, r3, #28
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b10      	cmp	r3, #16
 80013fc:	d108      	bne.n	8001410 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800140e:	e007      	b.n	8001420 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	60da      	str	r2, [r3, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	e17f      	b.n	800173c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8171 	beq.w	8001736 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d00b      	beq.n	8001474 <HAL_GPIO_Init+0x48>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d007      	beq.n	8001474 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001468:	2b11      	cmp	r3, #17
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b12      	cmp	r3, #18
 8001472:	d130      	bne.n	80014d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014aa:	2201      	movs	r2, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	f003 0201 	and.w	r2, r3, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d118      	bne.n	8001514 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014e8:	2201      	movs	r2, #1
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	08db      	lsrs	r3, r3, #3
 80014fe:	f003 0201 	and.w	r2, r3, #1
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x128>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b12      	cmp	r3, #18
 8001552:	d123      	bne.n	800159c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	6939      	ldr	r1, [r7, #16]
 8001598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0203 	and.w	r2, r3, #3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80ac 	beq.w	8001736 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b5f      	ldr	r3, [pc, #380]	; (800175c <HAL_GPIO_Init+0x330>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	4a5e      	ldr	r2, [pc, #376]	; (800175c <HAL_GPIO_Init+0x330>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ea:	4b5c      	ldr	r3, [pc, #368]	; (800175c <HAL_GPIO_Init+0x330>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015f6:	4a5a      	ldr	r2, [pc, #360]	; (8001760 <HAL_GPIO_Init+0x334>)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001620:	d025      	beq.n	800166e <HAL_GPIO_Init+0x242>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4f      	ldr	r2, [pc, #316]	; (8001764 <HAL_GPIO_Init+0x338>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01f      	beq.n	800166a <HAL_GPIO_Init+0x23e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4e      	ldr	r2, [pc, #312]	; (8001768 <HAL_GPIO_Init+0x33c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_Init+0x23a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4d      	ldr	r2, [pc, #308]	; (800176c <HAL_GPIO_Init+0x340>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x236>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4c      	ldr	r2, [pc, #304]	; (8001770 <HAL_GPIO_Init+0x344>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x232>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4b      	ldr	r2, [pc, #300]	; (8001774 <HAL_GPIO_Init+0x348>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x22e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4a      	ldr	r2, [pc, #296]	; (8001778 <HAL_GPIO_Init+0x34c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x22a>
 8001652:	2306      	movs	r3, #6
 8001654:	e00c      	b.n	8001670 <HAL_GPIO_Init+0x244>
 8001656:	2307      	movs	r3, #7
 8001658:	e00a      	b.n	8001670 <HAL_GPIO_Init+0x244>
 800165a:	2305      	movs	r3, #5
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x244>
 800165e:	2304      	movs	r3, #4
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x244>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x244>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x244>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x244>
 800166e:	2300      	movs	r3, #0
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	f002 0203 	and.w	r2, r2, #3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001680:	4937      	ldr	r1, [pc, #220]	; (8001760 <HAL_GPIO_Init+0x334>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_GPIO_Init+0x350>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016b2:	4a32      	ldr	r2, [pc, #200]	; (800177c <HAL_GPIO_Init+0x350>)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016b8:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_GPIO_Init+0x350>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016dc:	4a27      	ldr	r2, [pc, #156]	; (800177c <HAL_GPIO_Init+0x350>)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_GPIO_Init+0x350>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001706:	4a1d      	ldr	r2, [pc, #116]	; (800177c <HAL_GPIO_Init+0x350>)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_GPIO_Init+0x350>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001730:	4a12      	ldr	r2, [pc, #72]	; (800177c <HAL_GPIO_Init+0x350>)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	f47f ae78 	bne.w	800143c <HAL_GPIO_Init+0x10>
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	48000400 	.word	0x48000400
 8001768:	48000800 	.word	0x48000800
 800176c:	48000c00 	.word	0x48000c00
 8001770:	48001000 	.word	0x48001000
 8001774:	48001400 	.word	0x48001400
 8001778:	48001800 	.word	0x48001800
 800177c:	40010400 	.word	0x40010400

08001780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e001      	b.n	80017a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
 80017bc:	4613      	mov	r3, r2
 80017be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c0:	787b      	ldrb	r3, [r7, #1]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017cc:	e002      	b.n	80017d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	43d9      	mvns	r1, r3
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	400b      	ands	r3, r1
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	619a      	str	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <HAL_PWREx_GetVoltageRange+0x18>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40007000 	.word	0x40007000

08001830 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800183e:	d130      	bne.n	80018a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184c:	d038      	beq.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001856:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2232      	movs	r2, #50	; 0x32
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9b      	lsrs	r3, r3, #18
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001874:	e002      	b.n	800187c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3b01      	subs	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001888:	d102      	bne.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x60>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f2      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189c:	d110      	bne.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e00f      	b.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ae:	d007      	beq.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018b8:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40007000 	.word	0x40007000
 80018d4:	20000000 	.word	0x20000000
 80018d8:	431bde83 	.word	0x431bde83

080018dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e3d4      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ee:	4ba1      	ldr	r3, [pc, #644]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f8:	4b9e      	ldr	r3, [pc, #632]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80e4 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_RCC_OscConfig+0x4a>
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	f040 808b 	bne.w	8001a34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b01      	cmp	r3, #1
 8001922:	f040 8087 	bne.w	8001a34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001926:	4b93      	ldr	r3, [pc, #588]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_RCC_OscConfig+0x62>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e3ac      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	4b8c      	ldr	r3, [pc, #560]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <HAL_RCC_OscConfig+0x7c>
 800194e:	4b89      	ldr	r3, [pc, #548]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001956:	e005      	b.n	8001964 <HAL_RCC_OscConfig+0x88>
 8001958:	4b86      	ldr	r3, [pc, #536]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 800195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001964:	4293      	cmp	r3, r2
 8001966:	d223      	bcs.n	80019b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4618      	mov	r0, r3
 800196e:	f000 fd41 	bl	80023f4 <RCC_SetFlashLatencyFromMSIRange>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e38d      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800197c:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a7c      	ldr	r2, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4977      	ldr	r1, [pc, #476]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800199a:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	4972      	ldr	r1, [pc, #456]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
 80019ae:	e025      	b.n	80019fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b0:	4b70      	ldr	r3, [pc, #448]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a6f      	ldr	r2, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	496a      	ldr	r1, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ce:	4b69      	ldr	r3, [pc, #420]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	4965      	ldr	r1, [pc, #404]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fd01 	bl	80023f4 <RCC_SetFlashLatencyFromMSIRange>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e34d      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019fc:	f000 fc36 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	495a      	ldr	r1, [pc, #360]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	4a58      	ldr	r2, [pc, #352]	; (8001b7c <HAL_RCC_OscConfig+0x2a0>)
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a1c:	4b58      	ldr	r3, [pc, #352]	; (8001b80 <HAL_RCC_OscConfig+0x2a4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f91f 	bl	8000c64 <HAL_InitTick>
 8001a26:	4603      	mov	r3, r0
 8001a28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d052      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	e331      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d032      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a4c      	ldr	r2, [pc, #304]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a48:	f7ff f95c 	bl	8000d04 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a50:	f7ff f958 	bl	8000d04 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e31a      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a40      	ldr	r2, [pc, #256]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	493b      	ldr	r1, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	4936      	ldr	r1, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
 8001aa0:	e01a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a33      	ldr	r2, [pc, #204]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aae:	f7ff f929 	bl	8000d04 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f925 	bl	8000d04 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e2e7      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x1da>
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d074      	beq.n	8001bce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x21a>
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d10e      	bne.n	8001b0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d10b      	bne.n	8001b0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d064      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d160      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e2c4      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x24a>
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e01d      	b.n	8001b62 <HAL_RCC_OscConfig+0x286>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b2e:	d10c      	bne.n	8001b4a <HAL_RCC_OscConfig+0x26e>
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0f      	ldr	r2, [pc, #60]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e00b      	b.n	8001b62 <HAL_RCC_OscConfig+0x286>
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x298>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d01c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f8cb 	bl	8000d04 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b70:	e011      	b.n	8001b96 <HAL_RCC_OscConfig+0x2ba>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	080059dc 	.word	0x080059dc
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff f8be 	bl	8000d04 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e280      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b96:	4baf      	ldr	r3, [pc, #700]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x2a8>
 8001ba2:	e014      	b.n	8001bce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f8ae 	bl	8000d04 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff f8aa 	bl	8000d04 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e26c      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bbe:	4ba5      	ldr	r3, [pc, #660]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x2d0>
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d060      	beq.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_OscConfig+0x310>
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d119      	bne.n	8001c1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d116      	bne.n	8001c1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bec:	4b99      	ldr	r3, [pc, #612]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_OscConfig+0x328>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e249      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b93      	ldr	r3, [pc, #588]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	4990      	ldr	r1, [pc, #576]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c18:	e040      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d023      	beq.n	8001c6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c22:	4b8c      	ldr	r3, [pc, #560]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a8b      	ldr	r2, [pc, #556]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f869 	bl	8000d04 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c36:	f7ff f865 	bl	8000d04 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e227      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c48:	4b82      	ldr	r3, [pc, #520]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b7f      	ldr	r3, [pc, #508]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	497c      	ldr	r1, [pc, #496]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
 8001c68:	e018      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6a:	4b7a      	ldr	r3, [pc, #488]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a79      	ldr	r2, [pc, #484]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff f845 	bl	8000d04 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f841 	bl	8000d04 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e203      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c90:	4b70      	ldr	r3, [pc, #448]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d03c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01c      	beq.n	8001cea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb0:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb6:	4a67      	ldr	r2, [pc, #412]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f820 	bl	8000d04 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f81c 	bl	8000d04 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1de      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cda:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0ef      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x3ec>
 8001ce8:	e01b      	b.n	8001d22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cea:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf0:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f803 	bl	8000d04 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d02:	f7fe ffff 	bl	8000d04 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1c1      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d14:	4b4f      	ldr	r3, [pc, #316]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ef      	bne.n	8001d02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80a6 	beq.w	8001e7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d30:	2300      	movs	r3, #0
 8001d32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d34:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10d      	bne.n	8001d5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	4a43      	ldr	r2, [pc, #268]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4c:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <HAL_RCC_OscConfig+0x57c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d118      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d68:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_RCC_OscConfig+0x57c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a3a      	ldr	r2, [pc, #232]	; (8001e58 <HAL_RCC_OscConfig+0x57c>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d74:	f7fe ffc6 	bl	8000d04 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7c:	f7fe ffc2 	bl	8000d04 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e184      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <HAL_RCC_OscConfig+0x57c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d108      	bne.n	8001db4 <HAL_RCC_OscConfig+0x4d8>
 8001da2:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db2:	e024      	b.n	8001dfe <HAL_RCC_OscConfig+0x522>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d110      	bne.n	8001dde <HAL_RCC_OscConfig+0x502>
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	4a24      	ldr	r2, [pc, #144]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ddc:	e00f      	b.n	8001dfe <HAL_RCC_OscConfig+0x522>
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001df6:	f023 0304 	bic.w	r3, r3, #4
 8001dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d016      	beq.n	8001e34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7fe ff7d 	bl	8000d04 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7fe ff79 	bl	8000d04 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e139      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_OscConfig+0x578>)
 8001e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0ed      	beq.n	8001e0e <HAL_RCC_OscConfig+0x532>
 8001e32:	e01a      	b.n	8001e6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7fe ff66 	bl	8000d04 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3c:	f7fe ff62 	bl	8000d04 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d906      	bls.n	8001e5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e122      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e5c:	4b90      	ldr	r3, [pc, #576]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e8      	bne.n	8001e3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6a:	7ffb      	ldrb	r3, [r7, #31]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e70:	4b8b      	ldr	r3, [pc, #556]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	4a8a      	ldr	r2, [pc, #552]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8108 	beq.w	8002096 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	f040 80d0 	bne.w	8002030 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e90:	4b83      	ldr	r3, [pc, #524]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d130      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d127      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d11f      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ed0:	2a07      	cmp	r2, #7
 8001ed2:	bf14      	ite	ne
 8001ed4:	2201      	movne	r2, #1
 8001ed6:	2200      	moveq	r2, #0
 8001ed8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d113      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	3b01      	subs	r3, #1
 8001eec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d109      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	085b      	lsrs	r3, r3, #1
 8001efe:	3b01      	subs	r3, #1
 8001f00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d06e      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d069      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f0c:	4b64      	ldr	r3, [pc, #400]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f18:	4b61      	ldr	r3, [pc, #388]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b7      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f28:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a5c      	ldr	r2, [pc, #368]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f34:	f7fe fee6 	bl	8000d04 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7fe fee2 	bl	8000d04 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e0a4      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5a:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <HAL_RCC_OscConfig+0x7c8>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f6a:	3a01      	subs	r2, #1
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f74:	0212      	lsls	r2, r2, #8
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f7c:	0852      	lsrs	r2, r2, #1
 8001f7e:	3a01      	subs	r2, #1
 8001f80:	0552      	lsls	r2, r2, #21
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f88:	0852      	lsrs	r2, r2, #1
 8001f8a:	3a01      	subs	r2, #1
 8001f8c:	0652      	lsls	r2, r2, #25
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f94:	0912      	lsrs	r2, r2, #4
 8001f96:	0452      	lsls	r2, r2, #17
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	4941      	ldr	r1, [pc, #260]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a3e      	ldr	r2, [pc, #248]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fac:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a3b      	ldr	r2, [pc, #236]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb8:	f7fe fea4 	bl	8000d04 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe fea0 	bl	8000d04 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e062      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd2:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fde:	e05a      	b.n	8002096 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e059      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d152      	bne.n	8002096 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ffc:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8002002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002006:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002008:	f7fe fe7c 	bl	8000d04 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7fe fe78 	bl	8000d04 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e03a      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002022:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x734>
 800202e:	e032      	b.n	8002096 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d02d      	beq.n	8002092 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 800203c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002040:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8002054:	f023 0303 	bic.w	r3, r3, #3
 8002058:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8002060:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002068:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7fe fe4b 	bl	8000d04 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7fe fe47 	bl	8000d04 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e009      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_RCC_OscConfig+0x7c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x796>
 8002090:	e001      	b.n	8002096 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	f99d808c 	.word	0xf99d808c

080020a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0c8      	b.n	800224e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b66      	ldr	r3, [pc, #408]	; (8002258 <HAL_RCC_ClockConfig+0x1b0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d910      	bls.n	80020ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_RCC_ClockConfig+0x1b0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4961      	ldr	r1, [pc, #388]	; (8002258 <HAL_RCC_ClockConfig+0x1b0>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <HAL_RCC_ClockConfig+0x1b0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b0      	b.n	800224e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d04c      	beq.n	8002192 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d107      	bne.n	8002110 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002100:	4b56      	ldr	r3, [pc, #344]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d121      	bne.n	8002150 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e09e      	b.n	800224e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d107      	bne.n	8002128 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d115      	bne.n	8002150 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e092      	b.n	800224e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002130:	4b4a      	ldr	r3, [pc, #296]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e086      	b.n	800224e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002140:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e07e      	b.n	800224e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002150:	4b42      	ldr	r3, [pc, #264]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f023 0203 	bic.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	493f      	ldr	r1, [pc, #252]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002162:	f7fe fdcf 	bl	8000d04 <HAL_GetTick>
 8002166:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002168:	e00a      	b.n	8002180 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216a:	f7fe fdcb 	bl	8000d04 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	; 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e066      	b.n	800224e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002180:	4b36      	ldr	r3, [pc, #216]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 020c 	and.w	r2, r3, #12
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	429a      	cmp	r2, r3
 8002190:	d1eb      	bne.n	800216a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219e:	4b2f      	ldr	r3, [pc, #188]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	492c      	ldr	r1, [pc, #176]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b29      	ldr	r3, [pc, #164]	; (8002258 <HAL_RCC_ClockConfig+0x1b0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d210      	bcs.n	80021e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <HAL_RCC_ClockConfig+0x1b0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 0207 	bic.w	r2, r3, #7
 80021c6:	4924      	ldr	r1, [pc, #144]	; (8002258 <HAL_RCC_ClockConfig+0x1b0>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_RCC_ClockConfig+0x1b0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e036      	b.n	800224e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4918      	ldr	r1, [pc, #96]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4910      	ldr	r1, [pc, #64]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800221e:	f000 f825 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8002222:	4602      	mov	r2, r0
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	490c      	ldr	r1, [pc, #48]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	5ccb      	ldrb	r3, [r1, r3]
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fd0e 	bl	8000c64 <HAL_InitTick>
 8002248:	4603      	mov	r3, r0
 800224a:	72fb      	strb	r3, [r7, #11]

  return status;
 800224c:	7afb      	ldrb	r3, [r7, #11]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
 8002260:	080059dc 	.word	0x080059dc
 8002264:	20000000 	.word	0x20000000
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227a:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002284:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d121      	bne.n	80022de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d11e      	bne.n	80022de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022a0:	4b34      	ldr	r3, [pc, #208]	; (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	e005      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022c8:	4a2b      	ldr	r2, [pc, #172]	; (8002378 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10d      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022e4:	4b25      	ldr	r3, [pc, #148]	; (800237c <HAL_RCC_GetSysClockFreq+0x110>)
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	e004      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022f0:	4b23      	ldr	r3, [pc, #140]	; (8002380 <HAL_RCC_GetSysClockFreq+0x114>)
 80022f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d134      	bne.n	8002364 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0xa6>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d003      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0xac>
 8002310:	e005      	b.n	800231e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_RCC_GetSysClockFreq+0x110>)
 8002314:	617b      	str	r3, [r7, #20]
      break;
 8002316:	e005      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_RCC_GetSysClockFreq+0x114>)
 800231a:	617b      	str	r3, [r7, #20]
      break;
 800231c:	e002      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	617b      	str	r3, [r7, #20]
      break;
 8002322:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	3301      	adds	r3, #1
 8002330:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	fb02 f203 	mul.w	r2, r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	0e5b      	lsrs	r3, r3, #25
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	3301      	adds	r3, #1
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002364:	69bb      	ldr	r3, [r7, #24]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	; 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	080059f4 	.word	0x080059f4
 800237c:	00f42400 	.word	0x00f42400
 8002380:	007a1200 	.word	0x007a1200

08002384 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_RCC_GetHCLKFreq+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000000 	.word	0x20000000

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023a0:	f7ff fff0 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4904      	ldr	r1, [pc, #16]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	080059ec 	.word	0x080059ec

080023c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023cc:	f7ff ffda 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	0adb      	lsrs	r3, r3, #11
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	4904      	ldr	r1, [pc, #16]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	080059ec 	.word	0x080059ec

080023f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002400:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800240c:	f7ff fa02 	bl	8001814 <HAL_PWREx_GetVoltageRange>
 8002410:	6178      	str	r0, [r7, #20]
 8002412:	e014      	b.n	800243e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	4a24      	ldr	r2, [pc, #144]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241e:	6593      	str	r3, [r2, #88]	; 0x58
 8002420:	4b22      	ldr	r3, [pc, #136]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800242c:	f7ff f9f2 	bl	8001814 <HAL_PWREx_GetVoltageRange>
 8002430:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002444:	d10b      	bne.n	800245e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b80      	cmp	r3, #128	; 0x80
 800244a:	d919      	bls.n	8002480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2ba0      	cmp	r3, #160	; 0xa0
 8002450:	d902      	bls.n	8002458 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002452:	2302      	movs	r3, #2
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	e013      	b.n	8002480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002458:	2301      	movs	r3, #1
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	e010      	b.n	8002480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b80      	cmp	r3, #128	; 0x80
 8002462:	d902      	bls.n	800246a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002464:	2303      	movs	r3, #3
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	e00a      	b.n	8002480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b80      	cmp	r3, #128	; 0x80
 800246e:	d102      	bne.n	8002476 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002470:	2302      	movs	r3, #2
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	e004      	b.n	8002480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b70      	cmp	r3, #112	; 0x70
 800247a:	d101      	bne.n	8002480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800247c:	2301      	movs	r3, #1
 800247e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 0207 	bic.w	r2, r3, #7
 8002488:	4909      	ldr	r1, [pc, #36]	; (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40022000 	.word	0x40022000

080024b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024bc:	2300      	movs	r3, #0
 80024be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024c0:	2300      	movs	r3, #0
 80024c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d041      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024d8:	d02a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024de:	d824      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024e4:	d008      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024ea:	d81e      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f4:	d010      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024f6:	e018      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024f8:	4b86      	ldr	r3, [pc, #536]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a85      	ldr	r2, [pc, #532]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002502:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002504:	e015      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3304      	adds	r3, #4
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fabb 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 8002512:	4603      	mov	r3, r0
 8002514:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002516:	e00c      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3320      	adds	r3, #32
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fba6 	bl	8002c70 <RCCEx_PLLSAI2_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002528:	e003      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	74fb      	strb	r3, [r7, #19]
      break;
 800252e:	e000      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10b      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002538:	4b76      	ldr	r3, [pc, #472]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002546:	4973      	ldr	r1, [pc, #460]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800254e:	e001      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d041      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002564:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002568:	d02a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800256a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800256e:	d824      	bhi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002570:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002574:	d008      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002576:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800257a:	d81e      	bhi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002584:	d010      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002586:	e018      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002588:	4b62      	ldr	r3, [pc, #392]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a61      	ldr	r2, [pc, #388]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002592:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002594:	e015      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fa73 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 80025a2:	4603      	mov	r3, r0
 80025a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a6:	e00c      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3320      	adds	r3, #32
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fb5e 	bl	8002c70 <RCCEx_PLLSAI2_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b8:	e003      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	74fb      	strb	r3, [r7, #19]
      break;
 80025be:	e000      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025c2:	7cfb      	ldrb	r3, [r7, #19]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025c8:	4b52      	ldr	r3, [pc, #328]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d6:	494f      	ldr	r1, [pc, #316]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025de:	e001      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80a0 	beq.w	8002732 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00d      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	4a40      	ldr	r2, [pc, #256]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002616:	6593      	str	r3, [r2, #88]	; 0x58
 8002618:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002624:	2301      	movs	r3, #1
 8002626:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002628:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a3a      	ldr	r2, [pc, #232]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800262e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002632:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002634:	f7fe fb66 	bl	8000d04 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800263a:	e009      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7fe fb62 	bl	8000d04 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d902      	bls.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	74fb      	strb	r3, [r7, #19]
        break;
 800264e:	e005      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002650:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ef      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d15c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002662:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01f      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	429a      	cmp	r2, r3
 800267e:	d019      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002680:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	4a20      	ldr	r2, [pc, #128]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d016      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe fb21 	bl	8000d04 <HAL_GetTick>
 80026c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c4:	e00b      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe fb1d 	bl	8000d04 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d902      	bls.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	74fb      	strb	r3, [r7, #19]
            break;
 80026dc:	e006      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ec      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10c      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002702:	4904      	ldr	r1, [pc, #16]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800270a:	e009      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
 8002710:	e006      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002720:	7c7b      	ldrb	r3, [r7, #17]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002726:	4b9e      	ldr	r3, [pc, #632]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	4a9d      	ldr	r2, [pc, #628]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002730:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800273e:	4b98      	ldr	r3, [pc, #608]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f023 0203 	bic.w	r2, r3, #3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	4994      	ldr	r1, [pc, #592]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002760:	4b8f      	ldr	r3, [pc, #572]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f023 020c 	bic.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	498c      	ldr	r1, [pc, #560]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002782:	4b87      	ldr	r3, [pc, #540]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002788:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	4983      	ldr	r1, [pc, #524]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a4:	4b7e      	ldr	r3, [pc, #504]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	497b      	ldr	r1, [pc, #492]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027c6:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d4:	4972      	ldr	r1, [pc, #456]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027e8:	4b6d      	ldr	r3, [pc, #436]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	496a      	ldr	r1, [pc, #424]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800280a:	4b65      	ldr	r3, [pc, #404]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002810:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	4961      	ldr	r1, [pc, #388]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800282c:	4b5c      	ldr	r3, [pc, #368]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283a:	4959      	ldr	r1, [pc, #356]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800284e:	4b54      	ldr	r3, [pc, #336]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285c:	4950      	ldr	r1, [pc, #320]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287e:	4948      	ldr	r1, [pc, #288]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	493f      	ldr	r1, [pc, #252]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d028      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c2:	4937      	ldr	r1, [pc, #220]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d2:	d106      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d4:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028de:	60d3      	str	r3, [r2, #12]
 80028e0:	e011      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ea:	d10c      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	2101      	movs	r1, #1
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f8c8 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d028      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	491f      	ldr	r1, [pc, #124]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002930:	d106      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002932:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800293c:	60d3      	str	r3, [r2, #12]
 800293e:	e011      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002948:	d10c      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	2101      	movs	r1, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f899 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d02b      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800298e:	d109      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a02      	ldr	r2, [pc, #8]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800299a:	60d3      	str	r3, [r2, #12]
 800299c:	e014      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2101      	movs	r1, #1
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f867 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029be:	7cfb      	ldrb	r3, [r7, #19]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d02f      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e2:	4928      	ldr	r1, [pc, #160]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029f2:	d10d      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	2102      	movs	r1, #2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f844 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d014      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	74bb      	strb	r3, [r7, #18]
 8002a0e:	e011      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3320      	adds	r3, #32
 8002a1e:	2102      	movs	r1, #2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 f925 	bl	8002c70 <RCCEx_PLLSAI2_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4e:	490d      	ldr	r1, [pc, #52]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a72:	4904      	ldr	r1, [pc, #16]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000

08002a88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a96:	4b75      	ldr	r3, [pc, #468]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d018      	beq.n	8002ad4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aa2:	4b72      	ldr	r3, [pc, #456]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0203 	and.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d10d      	bne.n	8002ace <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aba:	4b6c      	ldr	r3, [pc, #432]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
       ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d047      	beq.n	8002b5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
 8002ad2:	e044      	b.n	8002b5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d018      	beq.n	8002b0e <RCCEx_PLLSAI1_Config+0x86>
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d825      	bhi.n	8002b2c <RCCEx_PLLSAI1_Config+0xa4>
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d002      	beq.n	8002aea <RCCEx_PLLSAI1_Config+0x62>
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d009      	beq.n	8002afc <RCCEx_PLLSAI1_Config+0x74>
 8002ae8:	e020      	b.n	8002b2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aea:	4b60      	ldr	r3, [pc, #384]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11d      	bne.n	8002b32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afa:	e01a      	b.n	8002b32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002afc:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d116      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0c:	e013      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b0e:	4b57      	ldr	r3, [pc, #348]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10f      	bne.n	8002b3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b1a:	4b54      	ldr	r3, [pc, #336]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b2a:	e006      	b.n	8002b3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b30:	e004      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b32:	bf00      	nop
 8002b34:	e002      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10d      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b42:	4b4a      	ldr	r3, [pc, #296]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6819      	ldr	r1, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	430b      	orrs	r3, r1
 8002b58:	4944      	ldr	r1, [pc, #272]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d17d      	bne.n	8002c60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b64:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b70:	f7fe f8c8 	bl	8000d04 <HAL_GetTick>
 8002b74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b76:	e009      	b.n	8002b8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b78:	f7fe f8c4 	bl	8000d04 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d902      	bls.n	8002b8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	73fb      	strb	r3, [r7, #15]
        break;
 8002b8a:	e005      	b.n	8002b98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b8c:	4b37      	ldr	r3, [pc, #220]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1ef      	bne.n	8002b78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d160      	bne.n	8002c60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d111      	bne.n	8002bc8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba4:	4b31      	ldr	r3, [pc, #196]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	0211      	lsls	r1, r2, #8
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68d2      	ldr	r2, [r2, #12]
 8002bba:	0912      	lsrs	r2, r2, #4
 8002bbc:	0452      	lsls	r2, r2, #17
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	492a      	ldr	r1, [pc, #168]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	610b      	str	r3, [r1, #16]
 8002bc6:	e027      	b.n	8002c18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d112      	bne.n	8002bf4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bce:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bd6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6892      	ldr	r2, [r2, #8]
 8002bde:	0211      	lsls	r1, r2, #8
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6912      	ldr	r2, [r2, #16]
 8002be4:	0852      	lsrs	r2, r2, #1
 8002be6:	3a01      	subs	r2, #1
 8002be8:	0552      	lsls	r2, r2, #21
 8002bea:	430a      	orrs	r2, r1
 8002bec:	491f      	ldr	r1, [pc, #124]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	610b      	str	r3, [r1, #16]
 8002bf2:	e011      	b.n	8002c18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6892      	ldr	r2, [r2, #8]
 8002c04:	0211      	lsls	r1, r2, #8
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6952      	ldr	r2, [r2, #20]
 8002c0a:	0852      	lsrs	r2, r2, #1
 8002c0c:	3a01      	subs	r2, #1
 8002c0e:	0652      	lsls	r2, r2, #25
 8002c10:	430a      	orrs	r2, r1
 8002c12:	4916      	ldr	r1, [pc, #88]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe f86e 	bl	8000d04 <HAL_GetTick>
 8002c28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c2a:	e009      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c2c:	f7fe f86a 	bl	8000d04 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d902      	bls.n	8002c40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c3e:	e005      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c40:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ef      	beq.n	8002c2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	4904      	ldr	r1, [pc, #16]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000

08002c70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c7e:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d018      	beq.n	8002cbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c8a:	4b67      	ldr	r3, [pc, #412]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0203 	and.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d10d      	bne.n	8002cb6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ca2:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
       ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d047      	beq.n	8002d46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	e044      	b.n	8002d46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d018      	beq.n	8002cf6 <RCCEx_PLLSAI2_Config+0x86>
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d825      	bhi.n	8002d14 <RCCEx_PLLSAI2_Config+0xa4>
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d002      	beq.n	8002cd2 <RCCEx_PLLSAI2_Config+0x62>
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d009      	beq.n	8002ce4 <RCCEx_PLLSAI2_Config+0x74>
 8002cd0:	e020      	b.n	8002d14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cd2:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11d      	bne.n	8002d1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce2:	e01a      	b.n	8002d1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d116      	bne.n	8002d1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e013      	b.n	8002d1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cf6:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d02:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d12:	e006      	b.n	8002d22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      break;
 8002d18:	e004      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d22:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10d      	bne.n	8002d46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6819      	ldr	r1, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	4939      	ldr	r1, [pc, #228]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d167      	bne.n	8002e1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d4c:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a35      	ldr	r2, [pc, #212]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d58:	f7fd ffd4 	bl	8000d04 <HAL_GetTick>
 8002d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d5e:	e009      	b.n	8002d74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d60:	f7fd ffd0 	bl	8000d04 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d902      	bls.n	8002d74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	73fb      	strb	r3, [r7, #15]
        break;
 8002d72:	e005      	b.n	8002d80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d74:	4b2c      	ldr	r3, [pc, #176]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ef      	bne.n	8002d60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d14a      	bne.n	8002e1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d111      	bne.n	8002db0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d8c:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6892      	ldr	r2, [r2, #8]
 8002d9c:	0211      	lsls	r1, r2, #8
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68d2      	ldr	r2, [r2, #12]
 8002da2:	0912      	lsrs	r2, r2, #4
 8002da4:	0452      	lsls	r2, r2, #17
 8002da6:	430a      	orrs	r2, r1
 8002da8:	491f      	ldr	r1, [pc, #124]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	614b      	str	r3, [r1, #20]
 8002dae:	e011      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002db8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6892      	ldr	r2, [r2, #8]
 8002dc0:	0211      	lsls	r1, r2, #8
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6912      	ldr	r2, [r2, #16]
 8002dc6:	0852      	lsrs	r2, r2, #1
 8002dc8:	3a01      	subs	r2, #1
 8002dca:	0652      	lsls	r2, r2, #25
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	4916      	ldr	r1, [pc, #88]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fd ff90 	bl	8000d04 <HAL_GetTick>
 8002de4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002de6:	e009      	b.n	8002dfc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002de8:	f7fd ff8c 	bl	8000d04 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d902      	bls.n	8002dfc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dfa:	e005      	b.n	8002e08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ef      	beq.n	8002de8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4904      	ldr	r1, [pc, #16]	; (8002e28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000

08002e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e040      	b.n	8002ec0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fd fd32 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2224      	movs	r2, #36	; 0x24
 8002e58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fbd0 	bl	8003610 <UART_SetConfig>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e022      	b.n	8002ec0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fe4e 	bl	8003b24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fed5 	bl	8003c68 <UART_CheckIdleState>
 8002ebe:	4603      	mov	r3, r0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	f040 8082 	bne.w	8002fe6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_UART_Transmit+0x26>
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07a      	b.n	8002fe8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_UART_Transmit+0x38>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e073      	b.n	8002fe8 <HAL_UART_Transmit+0x120>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2221      	movs	r2, #33	; 0x21
 8002f14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f16:	f7fd fef5 	bl	8000d04 <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	88fa      	ldrh	r2, [r7, #6]
 8002f20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	88fa      	ldrh	r2, [r7, #6]
 8002f28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f34:	d108      	bne.n	8002f48 <HAL_UART_Transmit+0x80>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d104      	bne.n	8002f48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	e003      	b.n	8002f50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f58:	e02d      	b.n	8002fb6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2200      	movs	r2, #0
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 fec8 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e039      	b.n	8002fe8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10b      	bne.n	8002f92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	881a      	ldrh	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f86:	b292      	uxth	r2, r2
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	e008      	b.n	8002fa4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	b292      	uxth	r2, r2
 8002f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1cb      	bne.n	8002f5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2140      	movs	r1, #64	; 0x40
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 fe94 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e005      	b.n	8002fe8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e000      	b.n	8002fe8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003002:	2b20      	cmp	r3, #32
 8003004:	d145      	bne.n	8003092 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_UART_Transmit_IT+0x22>
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e03e      	b.n	8003094 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_UART_Transmit_IT+0x34>
 8003020:	2302      	movs	r3, #2
 8003022:	e037      	b.n	8003094 <HAL_UART_Transmit_IT+0xa4>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2221      	movs	r2, #33	; 0x21
 8003054:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305e:	d107      	bne.n	8003070 <HAL_UART_Transmit_IT+0x80>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a0d      	ldr	r2, [pc, #52]	; (80030a0 <HAL_UART_Transmit_IT+0xb0>)
 800306c:	669a      	str	r2, [r3, #104]	; 0x68
 800306e:	e002      	b.n	8003076 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <HAL_UART_Transmit_IT+0xb4>)
 8003074:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800308c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	08004251 	.word	0x08004251
 80030a4:	080041dd 	.word	0x080041dd

080030a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d131      	bne.n	8003122 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_UART_Receive_IT+0x22>
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e02a      	b.n	8003124 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_UART_Receive_IT+0x34>
 80030d8:	2302      	movs	r3, #2
 80030da:	e023      	b.n	8003124 <HAL_UART_Receive_IT+0x7c>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a0f      	ldr	r2, [pc, #60]	; (800312c <HAL_UART_Receive_IT+0x84>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003110:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	461a      	mov	r2, r3
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fe6b 	bl	8003df4 <UART_Start_Receive_IT>
 800311e:	4603      	mov	r3, r0
 8003120:	e000      	b.n	8003124 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003122:	2302      	movs	r3, #2
  }
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40008000 	.word	0x40008000

08003130 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	4613      	mov	r3, r2
 800313c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003142:	2b20      	cmp	r3, #32
 8003144:	d131      	bne.n	80031aa <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_UART_Receive_DMA+0x22>
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e02a      	b.n	80031ac <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_UART_Receive_DMA+0x34>
 8003160:	2302      	movs	r3, #2
 8003162:	e023      	b.n	80031ac <HAL_UART_Receive_DMA+0x7c>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a0f      	ldr	r2, [pc, #60]	; (80031b4 <HAL_UART_Receive_DMA+0x84>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00e      	beq.n	800319a <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003198:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	461a      	mov	r2, r3
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 feaf 	bl	8003f04 <UART_Start_Receive_DMA>
 80031a6:	4603      	mov	r3, r0
 80031a8:	e000      	b.n	80031ac <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
  }
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40008000 	.word	0x40008000

080031b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	f640 030f 	movw	r3, #2063	; 0x80f
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d113      	bne.n	8003210 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00e      	beq.n	8003210 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 81ce 	beq.w	80035a2 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
      }
      return;
 800320e:	e1c8      	b.n	80035a2 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80e3 	beq.w	80033de <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4ba6      	ldr	r3, [pc, #664]	; (80034c0 <HAL_UART_IRQHandler+0x308>)
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80d8 	beq.w	80033de <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d010      	beq.n	800325a <HAL_UART_IRQHandler+0xa2>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2201      	movs	r2, #1
 8003248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <HAL_UART_IRQHandler+0xce>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2202      	movs	r2, #2
 8003274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327c:	f043 0204 	orr.w	r2, r3, #4
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d010      	beq.n	80032b2 <HAL_UART_IRQHandler+0xfa>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2204      	movs	r2, #4
 80032a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a8:	f043 0202 	orr.w	r2, r3, #2
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d015      	beq.n	80032e8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2208      	movs	r2, #8
 80032d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032de:	f043 0208 	orr.w	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d011      	beq.n	8003316 <HAL_UART_IRQHandler+0x15e>
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00c      	beq.n	8003316 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8142 	beq.w	80035a6 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00c      	beq.n	8003346 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	d004      	beq.n	8003366 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003362:	2b00      	cmp	r3, #0
 8003364:	d031      	beq.n	80033ca <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fe4d 	bl	8004006 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d123      	bne.n	80033c2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003388:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	2b00      	cmp	r3, #0
 8003390:	d013      	beq.n	80033ba <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a4b      	ldr	r2, [pc, #300]	; (80034c4 <HAL_UART_IRQHandler+0x30c>)
 8003398:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd ff24 	bl	80011ec <HAL_DMA_Abort_IT>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d017      	beq.n	80033da <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80033b4:	4610      	mov	r0, r2
 80033b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	e00f      	b.n	80033da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f912 	bl	80035e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	e00b      	b.n	80033da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f90e 	bl	80035e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	e007      	b.n	80033da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f90a 	bl	80035e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80033d8:	e0e5      	b.n	80035a6 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033da:	bf00      	nop
    return;
 80033dc:	e0e3      	b.n	80035a6 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	f040 80a9 	bne.w	800353a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 80a3 	beq.w	800353a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 809d 	beq.w	800353a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2210      	movs	r2, #16
 8003406:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d158      	bne.n	80034c8 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003420:	893b      	ldrh	r3, [r7, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80c1 	beq.w	80035aa <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800342e:	893a      	ldrh	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	f080 80ba 	bcs.w	80035aa <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	893a      	ldrh	r2, [r7, #8]
 800343a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d12a      	bne.n	80034a4 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800345c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0210 	bic.w	r2, r2, #16
 8003498:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fe66 	bl	8001170 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f89d 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034be:	e074      	b.n	80035aa <HAL_UART_IRQHandler+0x3f2>
 80034c0:	04000120 	.word	0x04000120
 80034c4:	080041b1 	.word	0x080041b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d060      	beq.n	80035ae <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034fa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0210 	bic.w	r2, r2, #16
 800352c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800352e:	897b      	ldrh	r3, [r7, #10]
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f860 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003538:	e039      	b.n	80035ae <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <HAL_UART_IRQHandler+0x3a8>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003556:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 ffa8 	bl	80044ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800355e:	e029      	b.n	80035b4 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01a      	beq.n	80035b2 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
    }
    return;
 8003584:	e015      	b.n	80035b2 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d011      	beq.n	80035b4 <HAL_UART_IRQHandler+0x3fc>
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fe96 	bl	80042cc <UART_EndTransmit_IT>
    return;
 80035a0:	e008      	b.n	80035b4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80035a2:	bf00      	nop
 80035a4:	e006      	b.n	80035b4 <HAL_UART_IRQHandler+0x3fc>
    return;
 80035a6:	bf00      	nop
 80035a8:	e004      	b.n	80035b4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80035aa:	bf00      	nop
 80035ac:	e002      	b.n	80035b4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <HAL_UART_IRQHandler+0x3fc>
    return;
 80035b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop

080035bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	4313      	orrs	r3, r2
 8003632:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4bad      	ldr	r3, [pc, #692]	; (80038f0 <UART_SetConfig+0x2e0>)
 800363c:	4013      	ands	r3, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	69f9      	ldr	r1, [r7, #28]
 8003644:	430b      	orrs	r3, r1
 8003646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4aa2      	ldr	r2, [pc, #648]	; (80038f4 <UART_SetConfig+0x2e4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	4313      	orrs	r3, r2
 8003676:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a99      	ldr	r2, [pc, #612]	; (80038f8 <UART_SetConfig+0x2e8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d121      	bne.n	80036da <UART_SetConfig+0xca>
 8003696:	4b99      	ldr	r3, [pc, #612]	; (80038fc <UART_SetConfig+0x2ec>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d817      	bhi.n	80036d4 <UART_SetConfig+0xc4>
 80036a4:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <UART_SetConfig+0x9c>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036c9 	.word	0x080036c9
 80036b4:	080036c3 	.word	0x080036c3
 80036b8:	080036cf 	.word	0x080036cf
 80036bc:	2301      	movs	r3, #1
 80036be:	76fb      	strb	r3, [r7, #27]
 80036c0:	e0e7      	b.n	8003892 <UART_SetConfig+0x282>
 80036c2:	2302      	movs	r3, #2
 80036c4:	76fb      	strb	r3, [r7, #27]
 80036c6:	e0e4      	b.n	8003892 <UART_SetConfig+0x282>
 80036c8:	2304      	movs	r3, #4
 80036ca:	76fb      	strb	r3, [r7, #27]
 80036cc:	e0e1      	b.n	8003892 <UART_SetConfig+0x282>
 80036ce:	2308      	movs	r3, #8
 80036d0:	76fb      	strb	r3, [r7, #27]
 80036d2:	e0de      	b.n	8003892 <UART_SetConfig+0x282>
 80036d4:	2310      	movs	r3, #16
 80036d6:	76fb      	strb	r3, [r7, #27]
 80036d8:	e0db      	b.n	8003892 <UART_SetConfig+0x282>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a88      	ldr	r2, [pc, #544]	; (8003900 <UART_SetConfig+0x2f0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d132      	bne.n	800374a <UART_SetConfig+0x13a>
 80036e4:	4b85      	ldr	r3, [pc, #532]	; (80038fc <UART_SetConfig+0x2ec>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d828      	bhi.n	8003744 <UART_SetConfig+0x134>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <UART_SetConfig+0xe8>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	08003745 	.word	0x08003745
 8003700:	08003745 	.word	0x08003745
 8003704:	08003745 	.word	0x08003745
 8003708:	08003739 	.word	0x08003739
 800370c:	08003745 	.word	0x08003745
 8003710:	08003745 	.word	0x08003745
 8003714:	08003745 	.word	0x08003745
 8003718:	08003733 	.word	0x08003733
 800371c:	08003745 	.word	0x08003745
 8003720:	08003745 	.word	0x08003745
 8003724:	08003745 	.word	0x08003745
 8003728:	0800373f 	.word	0x0800373f
 800372c:	2300      	movs	r3, #0
 800372e:	76fb      	strb	r3, [r7, #27]
 8003730:	e0af      	b.n	8003892 <UART_SetConfig+0x282>
 8003732:	2302      	movs	r3, #2
 8003734:	76fb      	strb	r3, [r7, #27]
 8003736:	e0ac      	b.n	8003892 <UART_SetConfig+0x282>
 8003738:	2304      	movs	r3, #4
 800373a:	76fb      	strb	r3, [r7, #27]
 800373c:	e0a9      	b.n	8003892 <UART_SetConfig+0x282>
 800373e:	2308      	movs	r3, #8
 8003740:	76fb      	strb	r3, [r7, #27]
 8003742:	e0a6      	b.n	8003892 <UART_SetConfig+0x282>
 8003744:	2310      	movs	r3, #16
 8003746:	76fb      	strb	r3, [r7, #27]
 8003748:	e0a3      	b.n	8003892 <UART_SetConfig+0x282>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a6d      	ldr	r2, [pc, #436]	; (8003904 <UART_SetConfig+0x2f4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d120      	bne.n	8003796 <UART_SetConfig+0x186>
 8003754:	4b69      	ldr	r3, [pc, #420]	; (80038fc <UART_SetConfig+0x2ec>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800375e:	2b30      	cmp	r3, #48	; 0x30
 8003760:	d013      	beq.n	800378a <UART_SetConfig+0x17a>
 8003762:	2b30      	cmp	r3, #48	; 0x30
 8003764:	d814      	bhi.n	8003790 <UART_SetConfig+0x180>
 8003766:	2b20      	cmp	r3, #32
 8003768:	d009      	beq.n	800377e <UART_SetConfig+0x16e>
 800376a:	2b20      	cmp	r3, #32
 800376c:	d810      	bhi.n	8003790 <UART_SetConfig+0x180>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <UART_SetConfig+0x168>
 8003772:	2b10      	cmp	r3, #16
 8003774:	d006      	beq.n	8003784 <UART_SetConfig+0x174>
 8003776:	e00b      	b.n	8003790 <UART_SetConfig+0x180>
 8003778:	2300      	movs	r3, #0
 800377a:	76fb      	strb	r3, [r7, #27]
 800377c:	e089      	b.n	8003892 <UART_SetConfig+0x282>
 800377e:	2302      	movs	r3, #2
 8003780:	76fb      	strb	r3, [r7, #27]
 8003782:	e086      	b.n	8003892 <UART_SetConfig+0x282>
 8003784:	2304      	movs	r3, #4
 8003786:	76fb      	strb	r3, [r7, #27]
 8003788:	e083      	b.n	8003892 <UART_SetConfig+0x282>
 800378a:	2308      	movs	r3, #8
 800378c:	76fb      	strb	r3, [r7, #27]
 800378e:	e080      	b.n	8003892 <UART_SetConfig+0x282>
 8003790:	2310      	movs	r3, #16
 8003792:	76fb      	strb	r3, [r7, #27]
 8003794:	e07d      	b.n	8003892 <UART_SetConfig+0x282>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5b      	ldr	r2, [pc, #364]	; (8003908 <UART_SetConfig+0x2f8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d120      	bne.n	80037e2 <UART_SetConfig+0x1d2>
 80037a0:	4b56      	ldr	r3, [pc, #344]	; (80038fc <UART_SetConfig+0x2ec>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037aa:	2bc0      	cmp	r3, #192	; 0xc0
 80037ac:	d013      	beq.n	80037d6 <UART_SetConfig+0x1c6>
 80037ae:	2bc0      	cmp	r3, #192	; 0xc0
 80037b0:	d814      	bhi.n	80037dc <UART_SetConfig+0x1cc>
 80037b2:	2b80      	cmp	r3, #128	; 0x80
 80037b4:	d009      	beq.n	80037ca <UART_SetConfig+0x1ba>
 80037b6:	2b80      	cmp	r3, #128	; 0x80
 80037b8:	d810      	bhi.n	80037dc <UART_SetConfig+0x1cc>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <UART_SetConfig+0x1b4>
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d006      	beq.n	80037d0 <UART_SetConfig+0x1c0>
 80037c2:	e00b      	b.n	80037dc <UART_SetConfig+0x1cc>
 80037c4:	2300      	movs	r3, #0
 80037c6:	76fb      	strb	r3, [r7, #27]
 80037c8:	e063      	b.n	8003892 <UART_SetConfig+0x282>
 80037ca:	2302      	movs	r3, #2
 80037cc:	76fb      	strb	r3, [r7, #27]
 80037ce:	e060      	b.n	8003892 <UART_SetConfig+0x282>
 80037d0:	2304      	movs	r3, #4
 80037d2:	76fb      	strb	r3, [r7, #27]
 80037d4:	e05d      	b.n	8003892 <UART_SetConfig+0x282>
 80037d6:	2308      	movs	r3, #8
 80037d8:	76fb      	strb	r3, [r7, #27]
 80037da:	e05a      	b.n	8003892 <UART_SetConfig+0x282>
 80037dc:	2310      	movs	r3, #16
 80037de:	76fb      	strb	r3, [r7, #27]
 80037e0:	e057      	b.n	8003892 <UART_SetConfig+0x282>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a49      	ldr	r2, [pc, #292]	; (800390c <UART_SetConfig+0x2fc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d125      	bne.n	8003838 <UART_SetConfig+0x228>
 80037ec:	4b43      	ldr	r3, [pc, #268]	; (80038fc <UART_SetConfig+0x2ec>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037fa:	d017      	beq.n	800382c <UART_SetConfig+0x21c>
 80037fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003800:	d817      	bhi.n	8003832 <UART_SetConfig+0x222>
 8003802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003806:	d00b      	beq.n	8003820 <UART_SetConfig+0x210>
 8003808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380c:	d811      	bhi.n	8003832 <UART_SetConfig+0x222>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <UART_SetConfig+0x20a>
 8003812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003816:	d006      	beq.n	8003826 <UART_SetConfig+0x216>
 8003818:	e00b      	b.n	8003832 <UART_SetConfig+0x222>
 800381a:	2300      	movs	r3, #0
 800381c:	76fb      	strb	r3, [r7, #27]
 800381e:	e038      	b.n	8003892 <UART_SetConfig+0x282>
 8003820:	2302      	movs	r3, #2
 8003822:	76fb      	strb	r3, [r7, #27]
 8003824:	e035      	b.n	8003892 <UART_SetConfig+0x282>
 8003826:	2304      	movs	r3, #4
 8003828:	76fb      	strb	r3, [r7, #27]
 800382a:	e032      	b.n	8003892 <UART_SetConfig+0x282>
 800382c:	2308      	movs	r3, #8
 800382e:	76fb      	strb	r3, [r7, #27]
 8003830:	e02f      	b.n	8003892 <UART_SetConfig+0x282>
 8003832:	2310      	movs	r3, #16
 8003834:	76fb      	strb	r3, [r7, #27]
 8003836:	e02c      	b.n	8003892 <UART_SetConfig+0x282>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2d      	ldr	r2, [pc, #180]	; (80038f4 <UART_SetConfig+0x2e4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d125      	bne.n	800388e <UART_SetConfig+0x27e>
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <UART_SetConfig+0x2ec>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800384c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003850:	d017      	beq.n	8003882 <UART_SetConfig+0x272>
 8003852:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003856:	d817      	bhi.n	8003888 <UART_SetConfig+0x278>
 8003858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800385c:	d00b      	beq.n	8003876 <UART_SetConfig+0x266>
 800385e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003862:	d811      	bhi.n	8003888 <UART_SetConfig+0x278>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <UART_SetConfig+0x260>
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386c:	d006      	beq.n	800387c <UART_SetConfig+0x26c>
 800386e:	e00b      	b.n	8003888 <UART_SetConfig+0x278>
 8003870:	2300      	movs	r3, #0
 8003872:	76fb      	strb	r3, [r7, #27]
 8003874:	e00d      	b.n	8003892 <UART_SetConfig+0x282>
 8003876:	2302      	movs	r3, #2
 8003878:	76fb      	strb	r3, [r7, #27]
 800387a:	e00a      	b.n	8003892 <UART_SetConfig+0x282>
 800387c:	2304      	movs	r3, #4
 800387e:	76fb      	strb	r3, [r7, #27]
 8003880:	e007      	b.n	8003892 <UART_SetConfig+0x282>
 8003882:	2308      	movs	r3, #8
 8003884:	76fb      	strb	r3, [r7, #27]
 8003886:	e004      	b.n	8003892 <UART_SetConfig+0x282>
 8003888:	2310      	movs	r3, #16
 800388a:	76fb      	strb	r3, [r7, #27]
 800388c:	e001      	b.n	8003892 <UART_SetConfig+0x282>
 800388e:	2310      	movs	r3, #16
 8003890:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <UART_SetConfig+0x2e4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	f040 8087 	bne.w	80039ac <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800389e:	7efb      	ldrb	r3, [r7, #27]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d837      	bhi.n	8003914 <UART_SetConfig+0x304>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <UART_SetConfig+0x29c>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038d1 	.word	0x080038d1
 80038b0:	08003915 	.word	0x08003915
 80038b4:	080038d9 	.word	0x080038d9
 80038b8:	08003915 	.word	0x08003915
 80038bc:	080038df 	.word	0x080038df
 80038c0:	08003915 	.word	0x08003915
 80038c4:	08003915 	.word	0x08003915
 80038c8:	08003915 	.word	0x08003915
 80038cc:	080038e7 	.word	0x080038e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d0:	f7fe fd64 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 80038d4:	6178      	str	r0, [r7, #20]
        break;
 80038d6:	e022      	b.n	800391e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <UART_SetConfig+0x300>)
 80038da:	617b      	str	r3, [r7, #20]
        break;
 80038dc:	e01f      	b.n	800391e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038de:	f7fe fcc5 	bl	800226c <HAL_RCC_GetSysClockFreq>
 80038e2:	6178      	str	r0, [r7, #20]
        break;
 80038e4:	e01b      	b.n	800391e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ea:	617b      	str	r3, [r7, #20]
        break;
 80038ec:	e017      	b.n	800391e <UART_SetConfig+0x30e>
 80038ee:	bf00      	nop
 80038f0:	efff69f3 	.word	0xefff69f3
 80038f4:	40008000 	.word	0x40008000
 80038f8:	40013800 	.word	0x40013800
 80038fc:	40021000 	.word	0x40021000
 8003900:	40004400 	.word	0x40004400
 8003904:	40004800 	.word	0x40004800
 8003908:	40004c00 	.word	0x40004c00
 800390c:	40005000 	.word	0x40005000
 8003910:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	76bb      	strb	r3, [r7, #26]
        break;
 800391c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80f1 	beq.w	8003b08 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	429a      	cmp	r2, r3
 8003934:	d305      	bcc.n	8003942 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	429a      	cmp	r2, r3
 8003940:	d902      	bls.n	8003948 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	76bb      	strb	r3, [r7, #26]
 8003946:	e0df      	b.n	8003b08 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4618      	mov	r0, r3
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	020b      	lsls	r3, r1, #8
 800395a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800395e:	0202      	lsls	r2, r0, #8
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	6849      	ldr	r1, [r1, #4]
 8003964:	0849      	lsrs	r1, r1, #1
 8003966:	4608      	mov	r0, r1
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	1814      	adds	r4, r2, r0
 800396e:	eb43 0501 	adc.w	r5, r3, r1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	461a      	mov	r2, r3
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	4620      	mov	r0, r4
 800397e:	4629      	mov	r1, r5
 8003980:	f000 fdca 	bl	8004518 <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4613      	mov	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003992:	d308      	bcc.n	80039a6 <UART_SetConfig+0x396>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399a:	d204      	bcs.n	80039a6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	e0b0      	b.n	8003b08 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	76bb      	strb	r3, [r7, #26]
 80039aa:	e0ad      	b.n	8003b08 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b4:	d15c      	bne.n	8003a70 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80039b6:	7efb      	ldrb	r3, [r7, #27]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d828      	bhi.n	8003a0e <UART_SetConfig+0x3fe>
 80039bc:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <UART_SetConfig+0x3b4>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	080039e9 	.word	0x080039e9
 80039c8:	080039f1 	.word	0x080039f1
 80039cc:	080039f9 	.word	0x080039f9
 80039d0:	08003a0f 	.word	0x08003a0f
 80039d4:	080039ff 	.word	0x080039ff
 80039d8:	08003a0f 	.word	0x08003a0f
 80039dc:	08003a0f 	.word	0x08003a0f
 80039e0:	08003a0f 	.word	0x08003a0f
 80039e4:	08003a07 	.word	0x08003a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e8:	f7fe fcd8 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 80039ec:	6178      	str	r0, [r7, #20]
        break;
 80039ee:	e013      	b.n	8003a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f0:	f7fe fcea 	bl	80023c8 <HAL_RCC_GetPCLK2Freq>
 80039f4:	6178      	str	r0, [r7, #20]
        break;
 80039f6:	e00f      	b.n	8003a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f8:	4b49      	ldr	r3, [pc, #292]	; (8003b20 <UART_SetConfig+0x510>)
 80039fa:	617b      	str	r3, [r7, #20]
        break;
 80039fc:	e00c      	b.n	8003a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fe:	f7fe fc35 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8003a02:	6178      	str	r0, [r7, #20]
        break;
 8003a04:	e008      	b.n	8003a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0a:	617b      	str	r3, [r7, #20]
        break;
 8003a0c:	e004      	b.n	8003a18 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	76bb      	strb	r3, [r7, #26]
        break;
 8003a16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d074      	beq.n	8003b08 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	005a      	lsls	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	441a      	add	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	2b0f      	cmp	r3, #15
 8003a3a:	d916      	bls.n	8003a6a <UART_SetConfig+0x45a>
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a42:	d212      	bcs.n	8003a6a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f023 030f 	bic.w	r3, r3, #15
 8003a4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	89fa      	ldrh	r2, [r7, #14]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	e04e      	b.n	8003b08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	76bb      	strb	r3, [r7, #26]
 8003a6e:	e04b      	b.n	8003b08 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a70:	7efb      	ldrb	r3, [r7, #27]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d827      	bhi.n	8003ac6 <UART_SetConfig+0x4b6>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <UART_SetConfig+0x46c>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003aa1 	.word	0x08003aa1
 8003a80:	08003aa9 	.word	0x08003aa9
 8003a84:	08003ab1 	.word	0x08003ab1
 8003a88:	08003ac7 	.word	0x08003ac7
 8003a8c:	08003ab7 	.word	0x08003ab7
 8003a90:	08003ac7 	.word	0x08003ac7
 8003a94:	08003ac7 	.word	0x08003ac7
 8003a98:	08003ac7 	.word	0x08003ac7
 8003a9c:	08003abf 	.word	0x08003abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa0:	f7fe fc7c 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8003aa4:	6178      	str	r0, [r7, #20]
        break;
 8003aa6:	e013      	b.n	8003ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa8:	f7fe fc8e 	bl	80023c8 <HAL_RCC_GetPCLK2Freq>
 8003aac:	6178      	str	r0, [r7, #20]
        break;
 8003aae:	e00f      	b.n	8003ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <UART_SetConfig+0x510>)
 8003ab2:	617b      	str	r3, [r7, #20]
        break;
 8003ab4:	e00c      	b.n	8003ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab6:	f7fe fbd9 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8003aba:	6178      	str	r0, [r7, #20]
        break;
 8003abc:	e008      	b.n	8003ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac2:	617b      	str	r3, [r7, #20]
        break;
 8003ac4:	e004      	b.n	8003ad0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	76bb      	strb	r3, [r7, #26]
        break;
 8003ace:	bf00      	nop
    }

    if (pclk != 0U)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d018      	beq.n	8003b08 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	085a      	lsrs	r2, r3, #1
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	441a      	add	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	d908      	bls.n	8003b04 <UART_SetConfig+0x4f4>
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af8:	d204      	bcs.n	8003b04 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	e001      	b.n	8003b08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b14:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	00f42400 	.word	0x00f42400

08003b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01a      	beq.n	8003c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c22:	d10a      	bne.n	8003c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c78:	f7fd f844 	bl	8000d04 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d10e      	bne.n	8003caa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f82d 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e023      	b.n	8003cf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d10e      	bne.n	8003cd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f817 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e00d      	b.n	8003cf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0a:	e05e      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d05a      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d14:	f7fc fff6 	bl	8000d04 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d11b      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d38:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e043      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02c      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d124      	bne.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d88:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d98:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e00f      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d091      	beq.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	d10e      	bne.n	8003e46 <UART_Start_Receive_IT+0x52>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <UART_Start_Receive_IT+0x48>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e3a:	e02d      	b.n	8003e98 <UART_Start_Receive_IT+0xa4>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	22ff      	movs	r2, #255	; 0xff
 8003e40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e44:	e028      	b.n	8003e98 <UART_Start_Receive_IT+0xa4>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10d      	bne.n	8003e6a <UART_Start_Receive_IT+0x76>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d104      	bne.n	8003e60 <UART_Start_Receive_IT+0x6c>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	22ff      	movs	r2, #255	; 0xff
 8003e5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e5e:	e01b      	b.n	8003e98 <UART_Start_Receive_IT+0xa4>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	227f      	movs	r2, #127	; 0x7f
 8003e64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e68:	e016      	b.n	8003e98 <UART_Start_Receive_IT+0xa4>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e72:	d10d      	bne.n	8003e90 <UART_Start_Receive_IT+0x9c>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <UART_Start_Receive_IT+0x92>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	227f      	movs	r2, #127	; 0x7f
 8003e80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e84:	e008      	b.n	8003e98 <UART_Start_Receive_IT+0xa4>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	223f      	movs	r2, #63	; 0x3f
 8003e8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e8e:	e003      	b.n	8003e98 <UART_Start_Receive_IT+0xa4>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2222      	movs	r2, #34	; 0x22
 8003ea4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebe:	d107      	bne.n	8003ed0 <UART_Start_Receive_IT+0xdc>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <UART_Start_Receive_IT+0x108>)
 8003ecc:	665a      	str	r2, [r3, #100]	; 0x64
 8003ece:	e002      	b.n	8003ed6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <UART_Start_Receive_IT+0x10c>)
 8003ed4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003eec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	080043d7 	.word	0x080043d7
 8003f00:	080042ff 	.word	0x080042ff

08003f04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2222      	movs	r2, #34	; 0x22
 8003f2c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d02b      	beq.n	8003f8e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <UART_Start_Receive_DMA+0xcc>)
 8003f3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <UART_Start_Receive_DMA+0xd0>)
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <UART_Start_Receive_DMA+0xd4>)
 8003f4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	2200      	movs	r2, #0
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3324      	adds	r3, #36	; 0x24
 8003f60:	4619      	mov	r1, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	461a      	mov	r2, r3
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	f7fd f8a1 	bl	80010b0 <HAL_DMA_Start_IT>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00c      	beq.n	8003f8e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2210      	movs	r2, #16
 8003f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e01c      	b.n	8003fc8 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0201 	orr.w	r2, r2, #1
 8003fb4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fc4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	08004065 	.word	0x08004065
 8003fd4:	080040fd 	.word	0x080040fd
 8003fd8:	08004135 	.word	0x08004135

08003fdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003ff2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800401c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004032:	2b01      	cmp	r3, #1
 8004034:	d107      	bne.n	8004046 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0210 	bic.w	r2, r2, #16
 8004044:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d12a      	bne.n	80040d6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004096:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0210 	bic.w	r2, r2, #16
 80040d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d107      	bne.n	80040ee <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040e4:	4619      	mov	r1, r3
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7ff fa86 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040ec:	e002      	b.n	80040f4 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7fc fb82 	bl	80007f8 <HAL_UART_RxCpltCallback>
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410e:	2b01      	cmp	r3, #1
 8004110:	d109      	bne.n	8004126 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	b29b      	uxth	r3, r3
 800411c:	4619      	mov	r1, r3
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff fa6a 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004124:	e002      	b.n	800412c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7ff fa52 	bl	80035d0 <HAL_UART_RxHalfCpltCallback>
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004146:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d109      	bne.n	8004170 <UART_DMAError+0x3c>
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b21      	cmp	r3, #33	; 0x21
 8004160:	d106      	bne.n	8004170 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2200      	movs	r2, #0
 8004166:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800416a:	6978      	ldr	r0, [r7, #20]
 800416c:	f7ff ff36 	bl	8003fdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	d109      	bne.n	8004192 <UART_DMAError+0x5e>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b22      	cmp	r3, #34	; 0x22
 8004182:	d106      	bne.n	8004192 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2200      	movs	r2, #0
 8004188:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800418c:	6978      	ldr	r0, [r7, #20]
 800418e:	f7ff ff3a 	bl	8004006 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004198:	f043 0210 	orr.w	r2, r3, #16
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041a2:	6978      	ldr	r0, [r7, #20]
 80041a4:	f7ff fa1e 	bl	80035e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041a8:	bf00      	nop
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f7ff fa08 	bl	80035e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e8:	2b21      	cmp	r3, #33	; 0x21
 80041ea:	d12b      	bne.n	8004244 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d110      	bne.n	800421a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004206:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004216:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004218:	e014      	b.n	8004244 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	b292      	uxth	r2, r2
 8004226:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425c:	2b21      	cmp	r3, #33	; 0x21
 800425e:	d12f      	bne.n	80042c0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d110      	bne.n	800428e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800427a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800428a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800428c:	e018      	b.n	80042c0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	881a      	ldrh	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a0:	b292      	uxth	r2, r2
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a8:	1c9a      	adds	r2, r3, #2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff f963 	bl	80035bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800430c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004312:	2b22      	cmp	r3, #34	; 0x22
 8004314:	d151      	bne.n	80043ba <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800431c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800431e:	89bb      	ldrh	r3, [r7, #12]
 8004320:	b2d9      	uxtb	r1, r3
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	400a      	ands	r2, r1
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d13a      	bne.n	80043ce <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004366:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004388:	2b01      	cmp	r3, #1
 800438a:	d10f      	bne.n	80043ac <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0210 	bic.w	r2, r2, #16
 800439a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff f927 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
 80043aa:	e002      	b.n	80043b2 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7fc fa23 	bl	80007f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043b8:	e009      	b.n	80043ce <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	8b1b      	ldrh	r3, [r3, #24]
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0208 	orr.w	r2, r2, #8
 80043ca:	b292      	uxth	r2, r2
 80043cc:	831a      	strh	r2, [r3, #24]
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043e4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ea:	2b22      	cmp	r3, #34	; 0x22
 80043ec:	d151      	bne.n	8004492 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80043f4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80043fc:	89ba      	ldrh	r2, [r7, #12]
 80043fe:	89fb      	ldrh	r3, [r7, #14]
 8004400:	4013      	ands	r3, r2
 8004402:	b29a      	uxth	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d13a      	bne.n	80044a6 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800443e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004460:	2b01      	cmp	r3, #1
 8004462:	d10f      	bne.n	8004484 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0210 	bic.w	r2, r2, #16
 8004472:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff f8bb 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
 8004482:	e002      	b.n	800448a <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7fc f9b7 	bl	80007f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004490:	e009      	b.n	80044a6 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	8b1b      	ldrh	r3, [r3, #24]
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0208 	orr.w	r2, r2, #8
 80044a2:	b292      	uxth	r2, r2
 80044a4:	831a      	strh	r2, [r3, #24]
}
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <memset>:
 80044c2:	b5d0      	push	{r4, r6, r7, lr}
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	b1fa      	cbz	r2, 8004508 <memset+0x46>
 80044c8:	1e53      	subs	r3, r2, #1
 80044ca:	f002 0c03 	and.w	ip, r2, #3
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d201      	bcs.n	80044d6 <memset+0x14>
 80044d2:	2200      	movs	r2, #0
 80044d4:	e011      	b.n	80044fa <memset+0x38>
 80044d6:	f022 0203 	bic.w	r2, r2, #3
 80044da:	f100 0e01 	add.w	lr, r0, #1
 80044de:	4253      	negs	r3, r2
 80044e0:	f06f 0203 	mvn.w	r2, #3
 80044e4:	eb0e 0402 	add.w	r4, lr, r2
 80044e8:	3204      	adds	r2, #4
 80044ea:	71a1      	strb	r1, [r4, #6]
 80044ec:	7161      	strb	r1, [r4, #5]
 80044ee:	7121      	strb	r1, [r4, #4]
 80044f0:	70e1      	strb	r1, [r4, #3]
 80044f2:	189c      	adds	r4, r3, r2
 80044f4:	3404      	adds	r4, #4
 80044f6:	d1f5      	bne.n	80044e4 <memset+0x22>
 80044f8:	3204      	adds	r2, #4
 80044fa:	f1bc 0f00 	cmp.w	ip, #0
 80044fe:	bf1c      	itt	ne
 8004500:	5481      	strbne	r1, [r0, r2]
 8004502:	f1bc 0f01 	cmpne.w	ip, #1
 8004506:	d100      	bne.n	800450a <memset+0x48>
 8004508:	bdd0      	pop	{r4, r6, r7, pc}
 800450a:	4402      	add	r2, r0
 800450c:	f1bc 0f02 	cmp.w	ip, #2
 8004510:	7051      	strb	r1, [r2, #1]
 8004512:	bf18      	it	ne
 8004514:	7091      	strbne	r1, [r2, #2]
 8004516:	bdd0      	pop	{r4, r6, r7, pc}

08004518 <__aeabi_uldivmod>:
 8004518:	b510      	push	{r4, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	ac02      	add	r4, sp, #8
 800451e:	9400      	str	r4, [sp, #0]
 8004520:	f000 f9d5 	bl	80048ce <__udivmoddi4>
 8004524:	9a02      	ldr	r2, [sp, #8]
 8004526:	9b03      	ldr	r3, [sp, #12]
 8004528:	b004      	add	sp, #16
 800452a:	bd10      	pop	{r4, pc}
 800452c:	defe      	udf	#254	; 0xfe

0800452e <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E>:
 800452e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004530:	af03      	add	r7, sp, #12
 8004532:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
 8004536:	469e      	mov	lr, r3
 8004538:	468b      	mov	fp, r1
 800453a:	4684      	mov	ip, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8095 	beq.w	800466c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x13e>
 8004542:	ebbc 0102 	subs.w	r1, ip, r2
 8004546:	f04f 0000 	mov.w	r0, #0
 800454a:	eb7b 010e 	sbcs.w	r1, fp, lr
 800454e:	f0c0 8113 	bcc.w	8004778 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x24a>
 8004552:	f1bb 0f00 	cmp.w	fp, #0
 8004556:	f000 810f 	beq.w	8004778 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x24a>
 800455a:	fabb f08b 	clz	r0, fp
 800455e:	fabe f18e 	clz	r1, lr
 8004562:	1a08      	subs	r0, r1, r0
 8004564:	f04f 38ff 	mov.w	r8, #4294967295
 8004568:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800456c:	f000 001f 	and.w	r0, r0, #31
 8004570:	f1c3 0520 	rsb	r5, r3, #32
 8004574:	4666      	mov	r6, ip
 8004576:	fa0e f103 	lsl.w	r1, lr, r3
 800457a:	fa02 fa03 	lsl.w	sl, r2, r3
 800457e:	fa22 f505 	lsr.w	r5, r2, r5
 8004582:	4329      	orrs	r1, r5
 8004584:	f1b3 0520 	subs.w	r5, r3, #32
 8004588:	f04f 0301 	mov.w	r3, #1
 800458c:	fa03 f900 	lsl.w	r9, r3, r0
 8004590:	f04f 0000 	mov.w	r0, #0
 8004594:	bf58      	it	pl
 8004596:	fa02 f105 	lslpl.w	r1, r2, r5
 800459a:	bf58      	it	pl
 800459c:	f04f 0a00 	movpl.w	sl, #0
 80045a0:	e008      	b.n	80045b4 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x86>
 80045a2:	4666      	mov	r6, ip
 80045a4:	469b      	mov	fp, r3
 80045a6:	ea4f 131a 	mov.w	r3, sl, lsr #4
 80045aa:	ea43 7a01 	orr.w	sl, r3, r1, lsl #28
 80045ae:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80045b2:	0909      	lsrs	r1, r1, #4
 80045b4:	ebb6 0c0a 	subs.w	ip, r6, sl
 80045b8:	eb6b 0301 	sbc.w	r3, fp, r1
 80045bc:	ebb8 040c 	subs.w	r4, r8, ip
 80045c0:	eb78 0403 	sbcs.w	r4, r8, r3
 80045c4:	da07      	bge.n	80045d6 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0xa8>
 80045c6:	ebbc 0402 	subs.w	r4, ip, r2
 80045ca:	ea40 0009 	orr.w	r0, r0, r9
 80045ce:	eb73 040e 	sbcs.w	r4, r3, lr
 80045d2:	d202      	bcs.n	80045da <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0xac>
 80045d4:	e045      	b.n	8004662 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x134>
 80045d6:	46b4      	mov	ip, r6
 80045d8:	465b      	mov	r3, fp
 80045da:	ea5f 0651 	movs.w	r6, r1, lsr #1
 80045de:	ea4f 043a 	mov.w	r4, sl, rrx
 80045e2:	ebbc 0404 	subs.w	r4, ip, r4
 80045e6:	eb63 0606 	sbc.w	r6, r3, r6
 80045ea:	ebb8 0504 	subs.w	r5, r8, r4
 80045ee:	eb78 0506 	sbcs.w	r5, r8, r6
 80045f2:	da08      	bge.n	8004606 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0xd8>
 80045f4:	1aa3      	subs	r3, r4, r2
 80045f6:	ea40 0059 	orr.w	r0, r0, r9, lsr #1
 80045fa:	eb76 030e 	sbcs.w	r3, r6, lr
 80045fe:	46a4      	mov	ip, r4
 8004600:	4633      	mov	r3, r6
 8004602:	d202      	bcs.n	800460a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0xdc>
 8004604:	e02d      	b.n	8004662 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x134>
 8004606:	4664      	mov	r4, ip
 8004608:	461e      	mov	r6, r3
 800460a:	ea4f 039a 	mov.w	r3, sl, lsr #2
 800460e:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8004612:	ebb4 0c03 	subs.w	ip, r4, r3
 8004616:	eb66 0391 	sbc.w	r3, r6, r1, lsr #2
 800461a:	ebb8 050c 	subs.w	r5, r8, ip
 800461e:	eb78 0503 	sbcs.w	r5, r8, r3
 8004622:	da07      	bge.n	8004634 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x106>
 8004624:	ebbc 0402 	subs.w	r4, ip, r2
 8004628:	ea40 0099 	orr.w	r0, r0, r9, lsr #2
 800462c:	eb73 040e 	sbcs.w	r4, r3, lr
 8004630:	d202      	bcs.n	8004638 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x10a>
 8004632:	e016      	b.n	8004662 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x134>
 8004634:	46a4      	mov	ip, r4
 8004636:	4633      	mov	r3, r6
 8004638:	ea4f 04da 	mov.w	r4, sl, lsr #3
 800463c:	ea44 7441 	orr.w	r4, r4, r1, lsl #29
 8004640:	ebbc 0604 	subs.w	r6, ip, r4
 8004644:	eb63 0bd1 	sbc.w	fp, r3, r1, lsr #3
 8004648:	ebb8 0406 	subs.w	r4, r8, r6
 800464c:	eb78 040b 	sbcs.w	r4, r8, fp
 8004650:	daa7      	bge.n	80045a2 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x74>
 8004652:	1ab3      	subs	r3, r6, r2
 8004654:	ea40 00d9 	orr.w	r0, r0, r9, lsr #3
 8004658:	eb7b 030e 	sbcs.w	r3, fp, lr
 800465c:	46b4      	mov	ip, r6
 800465e:	465b      	mov	r3, fp
 8004660:	d2a1      	bcs.n	80045a6 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x78>
 8004662:	2100      	movs	r1, #0
 8004664:	4662      	mov	r2, ip
 8004666:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 800466a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800466c:	f1bb 0f00 	cmp.w	fp, #0
 8004670:	f000 8088 	beq.w	8004784 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x256>
 8004674:	4593      	cmp	fp, r2
 8004676:	f080 808f 	bcs.w	8004798 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x26a>
 800467a:	fab2 f082 	clz	r0, r2
 800467e:	fabb f18b 	clz	r1, fp
 8004682:	1a08      	subs	r0, r1, r0
 8004684:	f1c0 0120 	rsb	r1, r0, #32
 8004688:	bf08      	it	eq
 800468a:	211f      	moveq	r1, #31
 800468c:	f001 033f 	and.w	r3, r1, #63	; 0x3f
 8004690:	f1c3 0620 	rsb	r6, r3, #32
 8004694:	f001 011f 	and.w	r1, r1, #31
 8004698:	fa0e f003 	lsl.w	r0, lr, r3
 800469c:	fa02 f903 	lsl.w	r9, r2, r3
 80046a0:	fa22 f606 	lsr.w	r6, r2, r6
 80046a4:	ea46 0a00 	orr.w	sl, r6, r0
 80046a8:	f1b3 0620 	subs.w	r6, r3, #32
 80046ac:	f04f 0301 	mov.w	r3, #1
 80046b0:	fa03 f801 	lsl.w	r8, r3, r1
 80046b4:	f04f 3eff 	mov.w	lr, #4294967295
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	bf58      	it	pl
 80046be:	fa02 fa06 	lslpl.w	sl, r2, r6
 80046c2:	bf58      	it	pl
 80046c4:	f04f 0900 	movpl.w	r9, #0
 80046c8:	e009      	b.n	80046de <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1b0>
 80046ca:	46ac      	mov	ip, r5
 80046cc:	46b3      	mov	fp, r6
 80046ce:	ea4f 1019 	mov.w	r0, r9, lsr #4
 80046d2:	ea40 790a 	orr.w	r9, r0, sl, lsl #28
 80046d6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80046da:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 80046de:	ebbc 0509 	subs.w	r5, ip, r9
 80046e2:	eb6b 060a 	sbc.w	r6, fp, sl
 80046e6:	ebbe 0105 	subs.w	r1, lr, r5
 80046ea:	eb7e 0106 	sbcs.w	r1, lr, r6
 80046ee:	da03      	bge.n	80046f8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1ca>
 80046f0:	ea43 0308 	orr.w	r3, r3, r8
 80046f4:	b916      	cbnz	r6, 80046fc <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1ce>
 80046f6:	e039      	b.n	800476c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x23e>
 80046f8:	4665      	mov	r5, ip
 80046fa:	465e      	mov	r6, fp
 80046fc:	ea5f 015a 	movs.w	r1, sl, lsr #1
 8004700:	ea4f 0439 	mov.w	r4, r9, rrx
 8004704:	1b2c      	subs	r4, r5, r4
 8004706:	eb66 0101 	sbc.w	r1, r6, r1
 800470a:	ebbe 0004 	subs.w	r0, lr, r4
 800470e:	eb7e 0001 	sbcs.w	r0, lr, r1
 8004712:	da04      	bge.n	800471e <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1f0>
 8004714:	ea43 0358 	orr.w	r3, r3, r8, lsr #1
 8004718:	4625      	mov	r5, r4
 800471a:	b911      	cbnz	r1, 8004722 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1f4>
 800471c:	e026      	b.n	800476c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x23e>
 800471e:	462c      	mov	r4, r5
 8004720:	4631      	mov	r1, r6
 8004722:	ea4f 0099 	mov.w	r0, r9, lsr #2
 8004726:	ea40 708a 	orr.w	r0, r0, sl, lsl #30
 800472a:	1a25      	subs	r5, r4, r0
 800472c:	eb61 069a 	sbc.w	r6, r1, sl, lsr #2
 8004730:	ebbe 0005 	subs.w	r0, lr, r5
 8004734:	eb7e 0006 	sbcs.w	r0, lr, r6
 8004738:	da03      	bge.n	8004742 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x214>
 800473a:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
 800473e:	b916      	cbnz	r6, 8004746 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x218>
 8004740:	e014      	b.n	800476c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x23e>
 8004742:	4625      	mov	r5, r4
 8004744:	460e      	mov	r6, r1
 8004746:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 800474a:	ea40 704a 	orr.w	r0, r0, sl, lsl #29
 800474e:	ebb5 0c00 	subs.w	ip, r5, r0
 8004752:	eb66 0bda 	sbc.w	fp, r6, sl, lsr #3
 8004756:	ebbe 000c 	subs.w	r0, lr, ip
 800475a:	eb7e 000b 	sbcs.w	r0, lr, fp
 800475e:	dab4      	bge.n	80046ca <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x19c>
 8004760:	ea43 03d8 	orr.w	r3, r3, r8, lsr #3
 8004764:	f1bb 0f00 	cmp.w	fp, #0
 8004768:	4665      	mov	r5, ip
 800476a:	d1b0      	bne.n	80046ce <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x1a0>
 800476c:	fbb5 f0f2 	udiv	r0, r5, r2
 8004770:	fb00 5c12 	mls	ip, r0, r2, r5
 8004774:	4318      	orrs	r0, r3
 8004776:	e009      	b.n	800478c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x25e>
 8004778:	465b      	mov	r3, fp
 800477a:	2100      	movs	r1, #0
 800477c:	4662      	mov	r2, ip
 800477e:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 8004782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004784:	fbbc f0f2 	udiv	r0, ip, r2
 8004788:	fb00 cc12 	mls	ip, r0, r2, ip
 800478c:	2300      	movs	r3, #0
 800478e:	2100      	movs	r1, #0
 8004790:	4662      	mov	r2, ip
 8004792:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 8004796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004798:	d109      	bne.n	80047ae <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x280>
 800479a:	fbbc f0fb 	udiv	r0, ip, fp
 800479e:	2300      	movs	r3, #0
 80047a0:	fb00 cc1b 	mls	ip, r0, fp, ip
 80047a4:	2101      	movs	r1, #1
 80047a6:	4662      	mov	r2, ip
 80047a8:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 80047ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ae:	fbbb f1f2 	udiv	r1, fp, r2
 80047b2:	2000      	movs	r0, #0
 80047b4:	fb01 b312 	mls	r3, r1, r2, fp
 80047b8:	ebb0 4f12 	cmp.w	r0, r2, lsr #16
 80047bc:	d115      	bne.n	80047ea <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x2bc>
 80047be:	0418      	lsls	r0, r3, #16
 80047c0:	ea40 401c 	orr.w	r0, r0, ip, lsr #16
 80047c4:	fbb0 f3f2 	udiv	r3, r0, r2
 80047c8:	fb03 0012 	mls	r0, r3, r2, r0
 80047cc:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 80047d0:	eacc 4000 	pkhbt	r0, ip, r0, lsl #16
 80047d4:	fbb0 f6f2 	udiv	r6, r0, r2
 80047d8:	fb06 0c12 	mls	ip, r6, r2, r0
 80047dc:	ea46 4003 	orr.w	r0, r6, r3, lsl #16
 80047e0:	2300      	movs	r3, #0
 80047e2:	4662      	mov	r2, ip
 80047e4:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 80047e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ea:	ebbc 0002 	subs.w	r0, ip, r2
 80047ee:	eb73 000e 	sbcs.w	r0, r3, lr
 80047f2:	d204      	bcs.n	80047fe <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x2d0>
 80047f4:	2000      	movs	r0, #0
 80047f6:	4662      	mov	r2, ip
 80047f8:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 80047fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047fe:	ea4f 70ce 	mov.w	r0, lr, lsl #31
 8004802:	ea40 0a52 	orr.w	sl, r0, r2, lsr #1
 8004806:	ea4f 79c2 	mov.w	r9, r2, lsl #31
 800480a:	f04f 3eff 	mov.w	lr, #4294967295
 800480e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004812:	2000      	movs	r0, #0
 8004814:	e009      	b.n	800482a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x2fc>
 8004816:	46a4      	mov	ip, r4
 8004818:	462b      	mov	r3, r5
 800481a:	ea4f 1419 	mov.w	r4, r9, lsr #4
 800481e:	ea44 790a 	orr.w	r9, r4, sl, lsl #28
 8004822:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8004826:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 800482a:	ebbc 0409 	subs.w	r4, ip, r9
 800482e:	eb63 050a 	sbc.w	r5, r3, sl
 8004832:	ebbe 0604 	subs.w	r6, lr, r4
 8004836:	eb7e 0605 	sbcs.w	r6, lr, r5
 800483a:	da03      	bge.n	8004844 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x316>
 800483c:	ea40 0008 	orr.w	r0, r0, r8
 8004840:	b915      	cbnz	r5, 8004848 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x31a>
 8004842:	e03a      	b.n	80048ba <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x38c>
 8004844:	4664      	mov	r4, ip
 8004846:	461d      	mov	r5, r3
 8004848:	ea5f 065a 	movs.w	r6, sl, lsr #1
 800484c:	ea4f 0339 	mov.w	r3, r9, rrx
 8004850:	ebb4 0c03 	subs.w	ip, r4, r3
 8004854:	eb65 0606 	sbc.w	r6, r5, r6
 8004858:	ebbe 030c 	subs.w	r3, lr, ip
 800485c:	eb7e 0306 	sbcs.w	r3, lr, r6
 8004860:	da04      	bge.n	800486c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x33e>
 8004862:	ea40 0058 	orr.w	r0, r0, r8, lsr #1
 8004866:	4664      	mov	r4, ip
 8004868:	b916      	cbnz	r6, 8004870 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x342>
 800486a:	e026      	b.n	80048ba <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x38c>
 800486c:	46a4      	mov	ip, r4
 800486e:	462e      	mov	r6, r5
 8004870:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8004874:	ea43 738a 	orr.w	r3, r3, sl, lsl #30
 8004878:	ebbc 0403 	subs.w	r4, ip, r3
 800487c:	eb66 059a 	sbc.w	r5, r6, sl, lsr #2
 8004880:	ebbe 0304 	subs.w	r3, lr, r4
 8004884:	eb7e 0305 	sbcs.w	r3, lr, r5
 8004888:	da03      	bge.n	8004892 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x364>
 800488a:	ea40 0098 	orr.w	r0, r0, r8, lsr #2
 800488e:	b915      	cbnz	r5, 8004896 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x368>
 8004890:	e013      	b.n	80048ba <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x38c>
 8004892:	4664      	mov	r4, ip
 8004894:	4635      	mov	r5, r6
 8004896:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 800489a:	ea43 734a 	orr.w	r3, r3, sl, lsl #29
 800489e:	ebb4 0c03 	subs.w	ip, r4, r3
 80048a2:	eb65 03da 	sbc.w	r3, r5, sl, lsr #3
 80048a6:	ebbe 060c 	subs.w	r6, lr, ip
 80048aa:	eb7e 0603 	sbcs.w	r6, lr, r3
 80048ae:	dab2      	bge.n	8004816 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x2e8>
 80048b0:	ea40 00d8 	orr.w	r0, r0, r8, lsr #3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	4664      	mov	r4, ip
 80048b8:	d1af      	bne.n	800481a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E+0x2ec>
 80048ba:	fbb4 f3f2 	udiv	r3, r4, r2
 80048be:	fb03 4c12 	mls	ip, r3, r2, r4
 80048c2:	4318      	orrs	r0, r3
 80048c4:	2300      	movs	r3, #0
 80048c6:	4662      	mov	r2, ip
 80048c8:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 80048cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048ce <__udivmoddi4>:
 80048ce:	b580      	push	{r7, lr}
 80048d0:	466f      	mov	r7, sp
 80048d2:	f7ff fe2c 	bl	800452e <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h8e9599c93de04397E>
 80048d6:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80048da:	f1bc 0f00 	cmp.w	ip, #0
 80048de:	bf18      	it	ne
 80048e0:	e9cc 2300 	strdne	r2, r3, [ip]
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <__errno>:
 80048e8:	4b01      	ldr	r3, [pc, #4]	; (80048f0 <__errno+0x8>)
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	2000000c 	.word	0x2000000c

080048f4 <__sflush_r>:
 80048f4:	898a      	ldrh	r2, [r1, #12]
 80048f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048fa:	4605      	mov	r5, r0
 80048fc:	0710      	lsls	r0, r2, #28
 80048fe:	460c      	mov	r4, r1
 8004900:	d458      	bmi.n	80049b4 <__sflush_r+0xc0>
 8004902:	684b      	ldr	r3, [r1, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	dc05      	bgt.n	8004914 <__sflush_r+0x20>
 8004908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	dc02      	bgt.n	8004914 <__sflush_r+0x20>
 800490e:	2000      	movs	r0, #0
 8004910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004916:	2e00      	cmp	r6, #0
 8004918:	d0f9      	beq.n	800490e <__sflush_r+0x1a>
 800491a:	2300      	movs	r3, #0
 800491c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004920:	682f      	ldr	r7, [r5, #0]
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	d032      	beq.n	800498c <__sflush_r+0x98>
 8004926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	075a      	lsls	r2, r3, #29
 800492c:	d505      	bpl.n	800493a <__sflush_r+0x46>
 800492e:	6863      	ldr	r3, [r4, #4]
 8004930:	1ac0      	subs	r0, r0, r3
 8004932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004934:	b10b      	cbz	r3, 800493a <__sflush_r+0x46>
 8004936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004938:	1ac0      	subs	r0, r0, r3
 800493a:	2300      	movs	r3, #0
 800493c:	4602      	mov	r2, r0
 800493e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004940:	6a21      	ldr	r1, [r4, #32]
 8004942:	4628      	mov	r0, r5
 8004944:	47b0      	blx	r6
 8004946:	1c43      	adds	r3, r0, #1
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	d106      	bne.n	800495a <__sflush_r+0x66>
 800494c:	6829      	ldr	r1, [r5, #0]
 800494e:	291d      	cmp	r1, #29
 8004950:	d82c      	bhi.n	80049ac <__sflush_r+0xb8>
 8004952:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <__sflush_r+0x108>)
 8004954:	40ca      	lsrs	r2, r1
 8004956:	07d6      	lsls	r6, r2, #31
 8004958:	d528      	bpl.n	80049ac <__sflush_r+0xb8>
 800495a:	2200      	movs	r2, #0
 800495c:	6062      	str	r2, [r4, #4]
 800495e:	04d9      	lsls	r1, r3, #19
 8004960:	6922      	ldr	r2, [r4, #16]
 8004962:	6022      	str	r2, [r4, #0]
 8004964:	d504      	bpl.n	8004970 <__sflush_r+0x7c>
 8004966:	1c42      	adds	r2, r0, #1
 8004968:	d101      	bne.n	800496e <__sflush_r+0x7a>
 800496a:	682b      	ldr	r3, [r5, #0]
 800496c:	b903      	cbnz	r3, 8004970 <__sflush_r+0x7c>
 800496e:	6560      	str	r0, [r4, #84]	; 0x54
 8004970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004972:	602f      	str	r7, [r5, #0]
 8004974:	2900      	cmp	r1, #0
 8004976:	d0ca      	beq.n	800490e <__sflush_r+0x1a>
 8004978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800497c:	4299      	cmp	r1, r3
 800497e:	d002      	beq.n	8004986 <__sflush_r+0x92>
 8004980:	4628      	mov	r0, r5
 8004982:	f000 f9a9 	bl	8004cd8 <_free_r>
 8004986:	2000      	movs	r0, #0
 8004988:	6360      	str	r0, [r4, #52]	; 0x34
 800498a:	e7c1      	b.n	8004910 <__sflush_r+0x1c>
 800498c:	6a21      	ldr	r1, [r4, #32]
 800498e:	2301      	movs	r3, #1
 8004990:	4628      	mov	r0, r5
 8004992:	47b0      	blx	r6
 8004994:	1c41      	adds	r1, r0, #1
 8004996:	d1c7      	bne.n	8004928 <__sflush_r+0x34>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0c4      	beq.n	8004928 <__sflush_r+0x34>
 800499e:	2b1d      	cmp	r3, #29
 80049a0:	d001      	beq.n	80049a6 <__sflush_r+0xb2>
 80049a2:	2b16      	cmp	r3, #22
 80049a4:	d101      	bne.n	80049aa <__sflush_r+0xb6>
 80049a6:	602f      	str	r7, [r5, #0]
 80049a8:	e7b1      	b.n	800490e <__sflush_r+0x1a>
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b0:	81a3      	strh	r3, [r4, #12]
 80049b2:	e7ad      	b.n	8004910 <__sflush_r+0x1c>
 80049b4:	690f      	ldr	r7, [r1, #16]
 80049b6:	2f00      	cmp	r7, #0
 80049b8:	d0a9      	beq.n	800490e <__sflush_r+0x1a>
 80049ba:	0793      	lsls	r3, r2, #30
 80049bc:	680e      	ldr	r6, [r1, #0]
 80049be:	bf08      	it	eq
 80049c0:	694b      	ldreq	r3, [r1, #20]
 80049c2:	600f      	str	r7, [r1, #0]
 80049c4:	bf18      	it	ne
 80049c6:	2300      	movne	r3, #0
 80049c8:	eba6 0807 	sub.w	r8, r6, r7
 80049cc:	608b      	str	r3, [r1, #8]
 80049ce:	f1b8 0f00 	cmp.w	r8, #0
 80049d2:	dd9c      	ble.n	800490e <__sflush_r+0x1a>
 80049d4:	6a21      	ldr	r1, [r4, #32]
 80049d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049d8:	4643      	mov	r3, r8
 80049da:	463a      	mov	r2, r7
 80049dc:	4628      	mov	r0, r5
 80049de:	47b0      	blx	r6
 80049e0:	2800      	cmp	r0, #0
 80049e2:	dc06      	bgt.n	80049f2 <__sflush_r+0xfe>
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	e78e      	b.n	8004910 <__sflush_r+0x1c>
 80049f2:	4407      	add	r7, r0
 80049f4:	eba8 0800 	sub.w	r8, r8, r0
 80049f8:	e7e9      	b.n	80049ce <__sflush_r+0xda>
 80049fa:	bf00      	nop
 80049fc:	20400001 	.word	0x20400001

08004a00 <_fflush_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	690b      	ldr	r3, [r1, #16]
 8004a04:	4605      	mov	r5, r0
 8004a06:	460c      	mov	r4, r1
 8004a08:	b913      	cbnz	r3, 8004a10 <_fflush_r+0x10>
 8004a0a:	2500      	movs	r5, #0
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	b118      	cbz	r0, 8004a1a <_fflush_r+0x1a>
 8004a12:	6983      	ldr	r3, [r0, #24]
 8004a14:	b90b      	cbnz	r3, 8004a1a <_fflush_r+0x1a>
 8004a16:	f000 f899 	bl	8004b4c <__sinit>
 8004a1a:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <_fflush_r+0x6c>)
 8004a1c:	429c      	cmp	r4, r3
 8004a1e:	d11b      	bne.n	8004a58 <_fflush_r+0x58>
 8004a20:	686c      	ldr	r4, [r5, #4]
 8004a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0ef      	beq.n	8004a0a <_fflush_r+0xa>
 8004a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a2c:	07d0      	lsls	r0, r2, #31
 8004a2e:	d404      	bmi.n	8004a3a <_fflush_r+0x3a>
 8004a30:	0599      	lsls	r1, r3, #22
 8004a32:	d402      	bmi.n	8004a3a <_fflush_r+0x3a>
 8004a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a36:	f000 f94c 	bl	8004cd2 <__retarget_lock_acquire_recursive>
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	f7ff ff59 	bl	80048f4 <__sflush_r>
 8004a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a44:	07da      	lsls	r2, r3, #31
 8004a46:	4605      	mov	r5, r0
 8004a48:	d4e0      	bmi.n	8004a0c <_fflush_r+0xc>
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	059b      	lsls	r3, r3, #22
 8004a4e:	d4dd      	bmi.n	8004a0c <_fflush_r+0xc>
 8004a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a52:	f000 f93f 	bl	8004cd4 <__retarget_lock_release_recursive>
 8004a56:	e7d9      	b.n	8004a0c <_fflush_r+0xc>
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <_fflush_r+0x70>)
 8004a5a:	429c      	cmp	r4, r3
 8004a5c:	d101      	bne.n	8004a62 <_fflush_r+0x62>
 8004a5e:	68ac      	ldr	r4, [r5, #8]
 8004a60:	e7df      	b.n	8004a22 <_fflush_r+0x22>
 8004a62:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <_fflush_r+0x74>)
 8004a64:	429c      	cmp	r4, r3
 8004a66:	bf08      	it	eq
 8004a68:	68ec      	ldreq	r4, [r5, #12]
 8004a6a:	e7da      	b.n	8004a22 <_fflush_r+0x22>
 8004a6c:	08005a44 	.word	0x08005a44
 8004a70:	08005a64 	.word	0x08005a64
 8004a74:	08005a24 	.word	0x08005a24

08004a78 <fflush>:
 8004a78:	4601      	mov	r1, r0
 8004a7a:	b920      	cbnz	r0, 8004a86 <fflush+0xe>
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <fflush+0x18>)
 8004a7e:	4905      	ldr	r1, [pc, #20]	; (8004a94 <fflush+0x1c>)
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	f000 b8e1 	b.w	8004c48 <_fwalk_reent>
 8004a86:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <fflush+0x20>)
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	f7ff bfb9 	b.w	8004a00 <_fflush_r>
 8004a8e:	bf00      	nop
 8004a90:	08005a84 	.word	0x08005a84
 8004a94:	08004a01 	.word	0x08004a01
 8004a98:	2000000c 	.word	0x2000000c

08004a9c <std>:
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	e9c0 3300 	strd	r3, r3, [r0]
 8004aa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aaa:	6083      	str	r3, [r0, #8]
 8004aac:	8181      	strh	r1, [r0, #12]
 8004aae:	6643      	str	r3, [r0, #100]	; 0x64
 8004ab0:	81c2      	strh	r2, [r0, #14]
 8004ab2:	6183      	str	r3, [r0, #24]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	305c      	adds	r0, #92	; 0x5c
 8004aba:	f7ff fd02 	bl	80044c2 <memset>
 8004abe:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <std+0x38>)
 8004ac0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <std+0x3c>)
 8004ac4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <std+0x40>)
 8004ac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <std+0x44>)
 8004acc:	6224      	str	r4, [r4, #32]
 8004ace:	6323      	str	r3, [r4, #48]	; 0x30
 8004ad0:	bd10      	pop	{r4, pc}
 8004ad2:	bf00      	nop
 8004ad4:	08004f69 	.word	0x08004f69
 8004ad8:	08004f8b 	.word	0x08004f8b
 8004adc:	08004fc3 	.word	0x08004fc3
 8004ae0:	08004fe7 	.word	0x08004fe7

08004ae4 <_cleanup_r>:
 8004ae4:	4901      	ldr	r1, [pc, #4]	; (8004aec <_cleanup_r+0x8>)
 8004ae6:	f000 b8af 	b.w	8004c48 <_fwalk_reent>
 8004aea:	bf00      	nop
 8004aec:	08004a01 	.word	0x08004a01

08004af0 <__sfmoreglue>:
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	1e4a      	subs	r2, r1, #1
 8004af4:	2568      	movs	r5, #104	; 0x68
 8004af6:	4355      	muls	r5, r2
 8004af8:	460e      	mov	r6, r1
 8004afa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004afe:	f000 f93b 	bl	8004d78 <_malloc_r>
 8004b02:	4604      	mov	r4, r0
 8004b04:	b140      	cbz	r0, 8004b18 <__sfmoreglue+0x28>
 8004b06:	2100      	movs	r1, #0
 8004b08:	e9c0 1600 	strd	r1, r6, [r0]
 8004b0c:	300c      	adds	r0, #12
 8004b0e:	60a0      	str	r0, [r4, #8]
 8004b10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b14:	f7ff fcd5 	bl	80044c2 <memset>
 8004b18:	4620      	mov	r0, r4
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}

08004b1c <__sfp_lock_acquire>:
 8004b1c:	4801      	ldr	r0, [pc, #4]	; (8004b24 <__sfp_lock_acquire+0x8>)
 8004b1e:	f000 b8d8 	b.w	8004cd2 <__retarget_lock_acquire_recursive>
 8004b22:	bf00      	nop
 8004b24:	2000055c 	.word	0x2000055c

08004b28 <__sfp_lock_release>:
 8004b28:	4801      	ldr	r0, [pc, #4]	; (8004b30 <__sfp_lock_release+0x8>)
 8004b2a:	f000 b8d3 	b.w	8004cd4 <__retarget_lock_release_recursive>
 8004b2e:	bf00      	nop
 8004b30:	2000055c 	.word	0x2000055c

08004b34 <__sinit_lock_acquire>:
 8004b34:	4801      	ldr	r0, [pc, #4]	; (8004b3c <__sinit_lock_acquire+0x8>)
 8004b36:	f000 b8cc 	b.w	8004cd2 <__retarget_lock_acquire_recursive>
 8004b3a:	bf00      	nop
 8004b3c:	20000557 	.word	0x20000557

08004b40 <__sinit_lock_release>:
 8004b40:	4801      	ldr	r0, [pc, #4]	; (8004b48 <__sinit_lock_release+0x8>)
 8004b42:	f000 b8c7 	b.w	8004cd4 <__retarget_lock_release_recursive>
 8004b46:	bf00      	nop
 8004b48:	20000557 	.word	0x20000557

08004b4c <__sinit>:
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	4604      	mov	r4, r0
 8004b50:	f7ff fff0 	bl	8004b34 <__sinit_lock_acquire>
 8004b54:	69a3      	ldr	r3, [r4, #24]
 8004b56:	b11b      	cbz	r3, 8004b60 <__sinit+0x14>
 8004b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b5c:	f7ff bff0 	b.w	8004b40 <__sinit_lock_release>
 8004b60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b64:	6523      	str	r3, [r4, #80]	; 0x50
 8004b66:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <__sinit+0x68>)
 8004b68:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <__sinit+0x6c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	bf04      	itt	eq
 8004b72:	2301      	moveq	r3, #1
 8004b74:	61a3      	streq	r3, [r4, #24]
 8004b76:	4620      	mov	r0, r4
 8004b78:	f000 f820 	bl	8004bbc <__sfp>
 8004b7c:	6060      	str	r0, [r4, #4]
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f000 f81c 	bl	8004bbc <__sfp>
 8004b84:	60a0      	str	r0, [r4, #8]
 8004b86:	4620      	mov	r0, r4
 8004b88:	f000 f818 	bl	8004bbc <__sfp>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	60e0      	str	r0, [r4, #12]
 8004b90:	2104      	movs	r1, #4
 8004b92:	6860      	ldr	r0, [r4, #4]
 8004b94:	f7ff ff82 	bl	8004a9c <std>
 8004b98:	68a0      	ldr	r0, [r4, #8]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	2109      	movs	r1, #9
 8004b9e:	f7ff ff7d 	bl	8004a9c <std>
 8004ba2:	68e0      	ldr	r0, [r4, #12]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	2112      	movs	r1, #18
 8004ba8:	f7ff ff78 	bl	8004a9c <std>
 8004bac:	2301      	movs	r3, #1
 8004bae:	61a3      	str	r3, [r4, #24]
 8004bb0:	e7d2      	b.n	8004b58 <__sinit+0xc>
 8004bb2:	bf00      	nop
 8004bb4:	08005a84 	.word	0x08005a84
 8004bb8:	08004ae5 	.word	0x08004ae5

08004bbc <__sfp>:
 8004bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbe:	4607      	mov	r7, r0
 8004bc0:	f7ff ffac 	bl	8004b1c <__sfp_lock_acquire>
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <__sfp+0x84>)
 8004bc6:	681e      	ldr	r6, [r3, #0]
 8004bc8:	69b3      	ldr	r3, [r6, #24]
 8004bca:	b913      	cbnz	r3, 8004bd2 <__sfp+0x16>
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f7ff ffbd 	bl	8004b4c <__sinit>
 8004bd2:	3648      	adds	r6, #72	; 0x48
 8004bd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	d503      	bpl.n	8004be4 <__sfp+0x28>
 8004bdc:	6833      	ldr	r3, [r6, #0]
 8004bde:	b30b      	cbz	r3, 8004c24 <__sfp+0x68>
 8004be0:	6836      	ldr	r6, [r6, #0]
 8004be2:	e7f7      	b.n	8004bd4 <__sfp+0x18>
 8004be4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004be8:	b9d5      	cbnz	r5, 8004c20 <__sfp+0x64>
 8004bea:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <__sfp+0x88>)
 8004bec:	60e3      	str	r3, [r4, #12]
 8004bee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bf2:	6665      	str	r5, [r4, #100]	; 0x64
 8004bf4:	f000 f86c 	bl	8004cd0 <__retarget_lock_init_recursive>
 8004bf8:	f7ff ff96 	bl	8004b28 <__sfp_lock_release>
 8004bfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c04:	6025      	str	r5, [r4, #0]
 8004c06:	61a5      	str	r5, [r4, #24]
 8004c08:	2208      	movs	r2, #8
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c10:	f7ff fc57 	bl	80044c2 <memset>
 8004c14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c20:	3468      	adds	r4, #104	; 0x68
 8004c22:	e7d9      	b.n	8004bd8 <__sfp+0x1c>
 8004c24:	2104      	movs	r1, #4
 8004c26:	4638      	mov	r0, r7
 8004c28:	f7ff ff62 	bl	8004af0 <__sfmoreglue>
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	6030      	str	r0, [r6, #0]
 8004c30:	2800      	cmp	r0, #0
 8004c32:	d1d5      	bne.n	8004be0 <__sfp+0x24>
 8004c34:	f7ff ff78 	bl	8004b28 <__sfp_lock_release>
 8004c38:	230c      	movs	r3, #12
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	e7ee      	b.n	8004c1c <__sfp+0x60>
 8004c3e:	bf00      	nop
 8004c40:	08005a84 	.word	0x08005a84
 8004c44:	ffff0001 	.word	0xffff0001

08004c48 <_fwalk_reent>:
 8004c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c4c:	4606      	mov	r6, r0
 8004c4e:	4688      	mov	r8, r1
 8004c50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c54:	2700      	movs	r7, #0
 8004c56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c5a:	f1b9 0901 	subs.w	r9, r9, #1
 8004c5e:	d505      	bpl.n	8004c6c <_fwalk_reent+0x24>
 8004c60:	6824      	ldr	r4, [r4, #0]
 8004c62:	2c00      	cmp	r4, #0
 8004c64:	d1f7      	bne.n	8004c56 <_fwalk_reent+0xe>
 8004c66:	4638      	mov	r0, r7
 8004c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c6c:	89ab      	ldrh	r3, [r5, #12]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d907      	bls.n	8004c82 <_fwalk_reent+0x3a>
 8004c72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c76:	3301      	adds	r3, #1
 8004c78:	d003      	beq.n	8004c82 <_fwalk_reent+0x3a>
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	47c0      	blx	r8
 8004c80:	4307      	orrs	r7, r0
 8004c82:	3568      	adds	r5, #104	; 0x68
 8004c84:	e7e9      	b.n	8004c5a <_fwalk_reent+0x12>
	...

08004c88 <__libc_init_array>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	4d0d      	ldr	r5, [pc, #52]	; (8004cc0 <__libc_init_array+0x38>)
 8004c8c:	4c0d      	ldr	r4, [pc, #52]	; (8004cc4 <__libc_init_array+0x3c>)
 8004c8e:	1b64      	subs	r4, r4, r5
 8004c90:	10a4      	asrs	r4, r4, #2
 8004c92:	2600      	movs	r6, #0
 8004c94:	42a6      	cmp	r6, r4
 8004c96:	d109      	bne.n	8004cac <__libc_init_array+0x24>
 8004c98:	4d0b      	ldr	r5, [pc, #44]	; (8004cc8 <__libc_init_array+0x40>)
 8004c9a:	4c0c      	ldr	r4, [pc, #48]	; (8004ccc <__libc_init_array+0x44>)
 8004c9c:	f000 fe2e 	bl	80058fc <_init>
 8004ca0:	1b64      	subs	r4, r4, r5
 8004ca2:	10a4      	asrs	r4, r4, #2
 8004ca4:	2600      	movs	r6, #0
 8004ca6:	42a6      	cmp	r6, r4
 8004ca8:	d105      	bne.n	8004cb6 <__libc_init_array+0x2e>
 8004caa:	bd70      	pop	{r4, r5, r6, pc}
 8004cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb0:	4798      	blx	r3
 8004cb2:	3601      	adds	r6, #1
 8004cb4:	e7ee      	b.n	8004c94 <__libc_init_array+0xc>
 8004cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cba:	4798      	blx	r3
 8004cbc:	3601      	adds	r6, #1
 8004cbe:	e7f2      	b.n	8004ca6 <__libc_init_array+0x1e>
 8004cc0:	08005ac4 	.word	0x08005ac4
 8004cc4:	08005ac4 	.word	0x08005ac4
 8004cc8:	08005ac4 	.word	0x08005ac4
 8004ccc:	08005ac8 	.word	0x08005ac8

08004cd0 <__retarget_lock_init_recursive>:
 8004cd0:	4770      	bx	lr

08004cd2 <__retarget_lock_acquire_recursive>:
 8004cd2:	4770      	bx	lr

08004cd4 <__retarget_lock_release_recursive>:
 8004cd4:	4770      	bx	lr
	...

08004cd8 <_free_r>:
 8004cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	d048      	beq.n	8004d70 <_free_r+0x98>
 8004cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce2:	9001      	str	r0, [sp, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cea:	bfb8      	it	lt
 8004cec:	18e4      	addlt	r4, r4, r3
 8004cee:	f000 fad7 	bl	80052a0 <__malloc_lock>
 8004cf2:	4a20      	ldr	r2, [pc, #128]	; (8004d74 <_free_r+0x9c>)
 8004cf4:	9801      	ldr	r0, [sp, #4]
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	4615      	mov	r5, r2
 8004cfa:	b933      	cbnz	r3, 8004d0a <_free_r+0x32>
 8004cfc:	6063      	str	r3, [r4, #4]
 8004cfe:	6014      	str	r4, [r2, #0]
 8004d00:	b003      	add	sp, #12
 8004d02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d06:	f000 bad1 	b.w	80052ac <__malloc_unlock>
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	d90b      	bls.n	8004d26 <_free_r+0x4e>
 8004d0e:	6821      	ldr	r1, [r4, #0]
 8004d10:	1862      	adds	r2, r4, r1
 8004d12:	4293      	cmp	r3, r2
 8004d14:	bf04      	itt	eq
 8004d16:	681a      	ldreq	r2, [r3, #0]
 8004d18:	685b      	ldreq	r3, [r3, #4]
 8004d1a:	6063      	str	r3, [r4, #4]
 8004d1c:	bf04      	itt	eq
 8004d1e:	1852      	addeq	r2, r2, r1
 8004d20:	6022      	streq	r2, [r4, #0]
 8004d22:	602c      	str	r4, [r5, #0]
 8004d24:	e7ec      	b.n	8004d00 <_free_r+0x28>
 8004d26:	461a      	mov	r2, r3
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	b10b      	cbz	r3, 8004d30 <_free_r+0x58>
 8004d2c:	42a3      	cmp	r3, r4
 8004d2e:	d9fa      	bls.n	8004d26 <_free_r+0x4e>
 8004d30:	6811      	ldr	r1, [r2, #0]
 8004d32:	1855      	adds	r5, r2, r1
 8004d34:	42a5      	cmp	r5, r4
 8004d36:	d10b      	bne.n	8004d50 <_free_r+0x78>
 8004d38:	6824      	ldr	r4, [r4, #0]
 8004d3a:	4421      	add	r1, r4
 8004d3c:	1854      	adds	r4, r2, r1
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	6011      	str	r1, [r2, #0]
 8004d42:	d1dd      	bne.n	8004d00 <_free_r+0x28>
 8004d44:	681c      	ldr	r4, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	6053      	str	r3, [r2, #4]
 8004d4a:	4421      	add	r1, r4
 8004d4c:	6011      	str	r1, [r2, #0]
 8004d4e:	e7d7      	b.n	8004d00 <_free_r+0x28>
 8004d50:	d902      	bls.n	8004d58 <_free_r+0x80>
 8004d52:	230c      	movs	r3, #12
 8004d54:	6003      	str	r3, [r0, #0]
 8004d56:	e7d3      	b.n	8004d00 <_free_r+0x28>
 8004d58:	6825      	ldr	r5, [r4, #0]
 8004d5a:	1961      	adds	r1, r4, r5
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	bf04      	itt	eq
 8004d60:	6819      	ldreq	r1, [r3, #0]
 8004d62:	685b      	ldreq	r3, [r3, #4]
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	bf04      	itt	eq
 8004d68:	1949      	addeq	r1, r1, r5
 8004d6a:	6021      	streq	r1, [r4, #0]
 8004d6c:	6054      	str	r4, [r2, #4]
 8004d6e:	e7c7      	b.n	8004d00 <_free_r+0x28>
 8004d70:	b003      	add	sp, #12
 8004d72:	bd30      	pop	{r4, r5, pc}
 8004d74:	2000047c 	.word	0x2000047c

08004d78 <_malloc_r>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	1ccd      	adds	r5, r1, #3
 8004d7c:	f025 0503 	bic.w	r5, r5, #3
 8004d80:	3508      	adds	r5, #8
 8004d82:	2d0c      	cmp	r5, #12
 8004d84:	bf38      	it	cc
 8004d86:	250c      	movcc	r5, #12
 8004d88:	2d00      	cmp	r5, #0
 8004d8a:	4606      	mov	r6, r0
 8004d8c:	db01      	blt.n	8004d92 <_malloc_r+0x1a>
 8004d8e:	42a9      	cmp	r1, r5
 8004d90:	d903      	bls.n	8004d9a <_malloc_r+0x22>
 8004d92:	230c      	movs	r3, #12
 8004d94:	6033      	str	r3, [r6, #0]
 8004d96:	2000      	movs	r0, #0
 8004d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d9a:	f000 fa81 	bl	80052a0 <__malloc_lock>
 8004d9e:	4921      	ldr	r1, [pc, #132]	; (8004e24 <_malloc_r+0xac>)
 8004da0:	680a      	ldr	r2, [r1, #0]
 8004da2:	4614      	mov	r4, r2
 8004da4:	b99c      	cbnz	r4, 8004dce <_malloc_r+0x56>
 8004da6:	4f20      	ldr	r7, [pc, #128]	; (8004e28 <_malloc_r+0xb0>)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	b923      	cbnz	r3, 8004db6 <_malloc_r+0x3e>
 8004dac:	4621      	mov	r1, r4
 8004dae:	4630      	mov	r0, r6
 8004db0:	f000 f8ca 	bl	8004f48 <_sbrk_r>
 8004db4:	6038      	str	r0, [r7, #0]
 8004db6:	4629      	mov	r1, r5
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 f8c5 	bl	8004f48 <_sbrk_r>
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	d123      	bne.n	8004e0a <_malloc_r+0x92>
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	6033      	str	r3, [r6, #0]
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f000 fa70 	bl	80052ac <__malloc_unlock>
 8004dcc:	e7e3      	b.n	8004d96 <_malloc_r+0x1e>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	1b5b      	subs	r3, r3, r5
 8004dd2:	d417      	bmi.n	8004e04 <_malloc_r+0x8c>
 8004dd4:	2b0b      	cmp	r3, #11
 8004dd6:	d903      	bls.n	8004de0 <_malloc_r+0x68>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	441c      	add	r4, r3
 8004ddc:	6025      	str	r5, [r4, #0]
 8004dde:	e004      	b.n	8004dea <_malloc_r+0x72>
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	42a2      	cmp	r2, r4
 8004de4:	bf0c      	ite	eq
 8004de6:	600b      	streq	r3, [r1, #0]
 8004de8:	6053      	strne	r3, [r2, #4]
 8004dea:	4630      	mov	r0, r6
 8004dec:	f000 fa5e 	bl	80052ac <__malloc_unlock>
 8004df0:	f104 000b 	add.w	r0, r4, #11
 8004df4:	1d23      	adds	r3, r4, #4
 8004df6:	f020 0007 	bic.w	r0, r0, #7
 8004dfa:	1ac2      	subs	r2, r0, r3
 8004dfc:	d0cc      	beq.n	8004d98 <_malloc_r+0x20>
 8004dfe:	1a1b      	subs	r3, r3, r0
 8004e00:	50a3      	str	r3, [r4, r2]
 8004e02:	e7c9      	b.n	8004d98 <_malloc_r+0x20>
 8004e04:	4622      	mov	r2, r4
 8004e06:	6864      	ldr	r4, [r4, #4]
 8004e08:	e7cc      	b.n	8004da4 <_malloc_r+0x2c>
 8004e0a:	1cc4      	adds	r4, r0, #3
 8004e0c:	f024 0403 	bic.w	r4, r4, #3
 8004e10:	42a0      	cmp	r0, r4
 8004e12:	d0e3      	beq.n	8004ddc <_malloc_r+0x64>
 8004e14:	1a21      	subs	r1, r4, r0
 8004e16:	4630      	mov	r0, r6
 8004e18:	f000 f896 	bl	8004f48 <_sbrk_r>
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d1dd      	bne.n	8004ddc <_malloc_r+0x64>
 8004e20:	e7cf      	b.n	8004dc2 <_malloc_r+0x4a>
 8004e22:	bf00      	nop
 8004e24:	2000047c 	.word	0x2000047c
 8004e28:	20000480 	.word	0x20000480

08004e2c <iprintf>:
 8004e2c:	b40f      	push	{r0, r1, r2, r3}
 8004e2e:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <iprintf+0x2c>)
 8004e30:	b513      	push	{r0, r1, r4, lr}
 8004e32:	681c      	ldr	r4, [r3, #0]
 8004e34:	b124      	cbz	r4, 8004e40 <iprintf+0x14>
 8004e36:	69a3      	ldr	r3, [r4, #24]
 8004e38:	b913      	cbnz	r3, 8004e40 <iprintf+0x14>
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f7ff fe86 	bl	8004b4c <__sinit>
 8004e40:	ab05      	add	r3, sp, #20
 8004e42:	9a04      	ldr	r2, [sp, #16]
 8004e44:	68a1      	ldr	r1, [r4, #8]
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f000 fa5f 	bl	800530c <_vfiprintf_r>
 8004e4e:	b002      	add	sp, #8
 8004e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e54:	b004      	add	sp, #16
 8004e56:	4770      	bx	lr
 8004e58:	2000000c 	.word	0x2000000c

08004e5c <_puts_r>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	460e      	mov	r6, r1
 8004e60:	4605      	mov	r5, r0
 8004e62:	b118      	cbz	r0, 8004e6c <_puts_r+0x10>
 8004e64:	6983      	ldr	r3, [r0, #24]
 8004e66:	b90b      	cbnz	r3, 8004e6c <_puts_r+0x10>
 8004e68:	f7ff fe70 	bl	8004b4c <__sinit>
 8004e6c:	69ab      	ldr	r3, [r5, #24]
 8004e6e:	68ac      	ldr	r4, [r5, #8]
 8004e70:	b913      	cbnz	r3, 8004e78 <_puts_r+0x1c>
 8004e72:	4628      	mov	r0, r5
 8004e74:	f7ff fe6a 	bl	8004b4c <__sinit>
 8004e78:	4b2c      	ldr	r3, [pc, #176]	; (8004f2c <_puts_r+0xd0>)
 8004e7a:	429c      	cmp	r4, r3
 8004e7c:	d120      	bne.n	8004ec0 <_puts_r+0x64>
 8004e7e:	686c      	ldr	r4, [r5, #4]
 8004e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e82:	07db      	lsls	r3, r3, #31
 8004e84:	d405      	bmi.n	8004e92 <_puts_r+0x36>
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	0598      	lsls	r0, r3, #22
 8004e8a:	d402      	bmi.n	8004e92 <_puts_r+0x36>
 8004e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e8e:	f7ff ff20 	bl	8004cd2 <__retarget_lock_acquire_recursive>
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	0719      	lsls	r1, r3, #28
 8004e96:	d51d      	bpl.n	8004ed4 <_puts_r+0x78>
 8004e98:	6923      	ldr	r3, [r4, #16]
 8004e9a:	b1db      	cbz	r3, 8004ed4 <_puts_r+0x78>
 8004e9c:	3e01      	subs	r6, #1
 8004e9e:	68a3      	ldr	r3, [r4, #8]
 8004ea0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	60a3      	str	r3, [r4, #8]
 8004ea8:	bb39      	cbnz	r1, 8004efa <_puts_r+0x9e>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	da38      	bge.n	8004f20 <_puts_r+0xc4>
 8004eae:	4622      	mov	r2, r4
 8004eb0:	210a      	movs	r1, #10
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f000 f89c 	bl	8004ff0 <__swbuf_r>
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d011      	beq.n	8004ee0 <_puts_r+0x84>
 8004ebc:	250a      	movs	r5, #10
 8004ebe:	e011      	b.n	8004ee4 <_puts_r+0x88>
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <_puts_r+0xd4>)
 8004ec2:	429c      	cmp	r4, r3
 8004ec4:	d101      	bne.n	8004eca <_puts_r+0x6e>
 8004ec6:	68ac      	ldr	r4, [r5, #8]
 8004ec8:	e7da      	b.n	8004e80 <_puts_r+0x24>
 8004eca:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <_puts_r+0xd8>)
 8004ecc:	429c      	cmp	r4, r3
 8004ece:	bf08      	it	eq
 8004ed0:	68ec      	ldreq	r4, [r5, #12]
 8004ed2:	e7d5      	b.n	8004e80 <_puts_r+0x24>
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f000 f8ee 	bl	80050b8 <__swsetup_r>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d0dd      	beq.n	8004e9c <_puts_r+0x40>
 8004ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ee6:	07da      	lsls	r2, r3, #31
 8004ee8:	d405      	bmi.n	8004ef6 <_puts_r+0x9a>
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	059b      	lsls	r3, r3, #22
 8004eee:	d402      	bmi.n	8004ef6 <_puts_r+0x9a>
 8004ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ef2:	f7ff feef 	bl	8004cd4 <__retarget_lock_release_recursive>
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	bd70      	pop	{r4, r5, r6, pc}
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	da04      	bge.n	8004f08 <_puts_r+0xac>
 8004efe:	69a2      	ldr	r2, [r4, #24]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	dc06      	bgt.n	8004f12 <_puts_r+0xb6>
 8004f04:	290a      	cmp	r1, #10
 8004f06:	d004      	beq.n	8004f12 <_puts_r+0xb6>
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	6022      	str	r2, [r4, #0]
 8004f0e:	7019      	strb	r1, [r3, #0]
 8004f10:	e7c5      	b.n	8004e9e <_puts_r+0x42>
 8004f12:	4622      	mov	r2, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 f86b 	bl	8004ff0 <__swbuf_r>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d1bf      	bne.n	8004e9e <_puts_r+0x42>
 8004f1e:	e7df      	b.n	8004ee0 <_puts_r+0x84>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	250a      	movs	r5, #10
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	6022      	str	r2, [r4, #0]
 8004f28:	701d      	strb	r5, [r3, #0]
 8004f2a:	e7db      	b.n	8004ee4 <_puts_r+0x88>
 8004f2c:	08005a44 	.word	0x08005a44
 8004f30:	08005a64 	.word	0x08005a64
 8004f34:	08005a24 	.word	0x08005a24

08004f38 <puts>:
 8004f38:	4b02      	ldr	r3, [pc, #8]	; (8004f44 <puts+0xc>)
 8004f3a:	4601      	mov	r1, r0
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	f7ff bf8d 	b.w	8004e5c <_puts_r>
 8004f42:	bf00      	nop
 8004f44:	2000000c 	.word	0x2000000c

08004f48 <_sbrk_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d06      	ldr	r5, [pc, #24]	; (8004f64 <_sbrk_r+0x1c>)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	602b      	str	r3, [r5, #0]
 8004f54:	f7fb fdd4 	bl	8000b00 <_sbrk>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_sbrk_r+0x1a>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_sbrk_r+0x1a>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20000560 	.word	0x20000560

08004f68 <__sread>:
 8004f68:	b510      	push	{r4, lr}
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f70:	f000 fc90 	bl	8005894 <_read_r>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	bfab      	itete	ge
 8004f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f7c:	181b      	addge	r3, r3, r0
 8004f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f82:	bfac      	ite	ge
 8004f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f86:	81a3      	strhlt	r3, [r4, #12]
 8004f88:	bd10      	pop	{r4, pc}

08004f8a <__swrite>:
 8004f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8e:	461f      	mov	r7, r3
 8004f90:	898b      	ldrh	r3, [r1, #12]
 8004f92:	05db      	lsls	r3, r3, #23
 8004f94:	4605      	mov	r5, r0
 8004f96:	460c      	mov	r4, r1
 8004f98:	4616      	mov	r6, r2
 8004f9a:	d505      	bpl.n	8004fa8 <__swrite+0x1e>
 8004f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f000 f906 	bl	80051b4 <_lseek_r>
 8004fa8:	89a3      	ldrh	r3, [r4, #12]
 8004faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	4632      	mov	r2, r6
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	4628      	mov	r0, r5
 8004fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fbe:	f000 b869 	b.w	8005094 <_write_r>

08004fc2 <__sseek>:
 8004fc2:	b510      	push	{r4, lr}
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fca:	f000 f8f3 	bl	80051b4 <_lseek_r>
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	bf15      	itete	ne
 8004fd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fde:	81a3      	strheq	r3, [r4, #12]
 8004fe0:	bf18      	it	ne
 8004fe2:	81a3      	strhne	r3, [r4, #12]
 8004fe4:	bd10      	pop	{r4, pc}

08004fe6 <__sclose>:
 8004fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fea:	f000 b8d3 	b.w	8005194 <_close_r>
	...

08004ff0 <__swbuf_r>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	460e      	mov	r6, r1
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	b118      	cbz	r0, 8005002 <__swbuf_r+0x12>
 8004ffa:	6983      	ldr	r3, [r0, #24]
 8004ffc:	b90b      	cbnz	r3, 8005002 <__swbuf_r+0x12>
 8004ffe:	f7ff fda5 	bl	8004b4c <__sinit>
 8005002:	4b21      	ldr	r3, [pc, #132]	; (8005088 <__swbuf_r+0x98>)
 8005004:	429c      	cmp	r4, r3
 8005006:	d12b      	bne.n	8005060 <__swbuf_r+0x70>
 8005008:	686c      	ldr	r4, [r5, #4]
 800500a:	69a3      	ldr	r3, [r4, #24]
 800500c:	60a3      	str	r3, [r4, #8]
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	071a      	lsls	r2, r3, #28
 8005012:	d52f      	bpl.n	8005074 <__swbuf_r+0x84>
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	b36b      	cbz	r3, 8005074 <__swbuf_r+0x84>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	6820      	ldr	r0, [r4, #0]
 800501c:	1ac0      	subs	r0, r0, r3
 800501e:	6963      	ldr	r3, [r4, #20]
 8005020:	b2f6      	uxtb	r6, r6
 8005022:	4283      	cmp	r3, r0
 8005024:	4637      	mov	r7, r6
 8005026:	dc04      	bgt.n	8005032 <__swbuf_r+0x42>
 8005028:	4621      	mov	r1, r4
 800502a:	4628      	mov	r0, r5
 800502c:	f7ff fce8 	bl	8004a00 <_fflush_r>
 8005030:	bb30      	cbnz	r0, 8005080 <__swbuf_r+0x90>
 8005032:	68a3      	ldr	r3, [r4, #8]
 8005034:	3b01      	subs	r3, #1
 8005036:	60a3      	str	r3, [r4, #8]
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	6022      	str	r2, [r4, #0]
 800503e:	701e      	strb	r6, [r3, #0]
 8005040:	6963      	ldr	r3, [r4, #20]
 8005042:	3001      	adds	r0, #1
 8005044:	4283      	cmp	r3, r0
 8005046:	d004      	beq.n	8005052 <__swbuf_r+0x62>
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	07db      	lsls	r3, r3, #31
 800504c:	d506      	bpl.n	800505c <__swbuf_r+0x6c>
 800504e:	2e0a      	cmp	r6, #10
 8005050:	d104      	bne.n	800505c <__swbuf_r+0x6c>
 8005052:	4621      	mov	r1, r4
 8005054:	4628      	mov	r0, r5
 8005056:	f7ff fcd3 	bl	8004a00 <_fflush_r>
 800505a:	b988      	cbnz	r0, 8005080 <__swbuf_r+0x90>
 800505c:	4638      	mov	r0, r7
 800505e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005060:	4b0a      	ldr	r3, [pc, #40]	; (800508c <__swbuf_r+0x9c>)
 8005062:	429c      	cmp	r4, r3
 8005064:	d101      	bne.n	800506a <__swbuf_r+0x7a>
 8005066:	68ac      	ldr	r4, [r5, #8]
 8005068:	e7cf      	b.n	800500a <__swbuf_r+0x1a>
 800506a:	4b09      	ldr	r3, [pc, #36]	; (8005090 <__swbuf_r+0xa0>)
 800506c:	429c      	cmp	r4, r3
 800506e:	bf08      	it	eq
 8005070:	68ec      	ldreq	r4, [r5, #12]
 8005072:	e7ca      	b.n	800500a <__swbuf_r+0x1a>
 8005074:	4621      	mov	r1, r4
 8005076:	4628      	mov	r0, r5
 8005078:	f000 f81e 	bl	80050b8 <__swsetup_r>
 800507c:	2800      	cmp	r0, #0
 800507e:	d0cb      	beq.n	8005018 <__swbuf_r+0x28>
 8005080:	f04f 37ff 	mov.w	r7, #4294967295
 8005084:	e7ea      	b.n	800505c <__swbuf_r+0x6c>
 8005086:	bf00      	nop
 8005088:	08005a44 	.word	0x08005a44
 800508c:	08005a64 	.word	0x08005a64
 8005090:	08005a24 	.word	0x08005a24

08005094 <_write_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4d07      	ldr	r5, [pc, #28]	; (80050b4 <_write_r+0x20>)
 8005098:	4604      	mov	r4, r0
 800509a:	4608      	mov	r0, r1
 800509c:	4611      	mov	r1, r2
 800509e:	2200      	movs	r2, #0
 80050a0:	602a      	str	r2, [r5, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f7fb fcdb 	bl	8000a5e <_write>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_write_r+0x1e>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_write_r+0x1e>
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	20000560 	.word	0x20000560

080050b8 <__swsetup_r>:
 80050b8:	4b32      	ldr	r3, [pc, #200]	; (8005184 <__swsetup_r+0xcc>)
 80050ba:	b570      	push	{r4, r5, r6, lr}
 80050bc:	681d      	ldr	r5, [r3, #0]
 80050be:	4606      	mov	r6, r0
 80050c0:	460c      	mov	r4, r1
 80050c2:	b125      	cbz	r5, 80050ce <__swsetup_r+0x16>
 80050c4:	69ab      	ldr	r3, [r5, #24]
 80050c6:	b913      	cbnz	r3, 80050ce <__swsetup_r+0x16>
 80050c8:	4628      	mov	r0, r5
 80050ca:	f7ff fd3f 	bl	8004b4c <__sinit>
 80050ce:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <__swsetup_r+0xd0>)
 80050d0:	429c      	cmp	r4, r3
 80050d2:	d10f      	bne.n	80050f4 <__swsetup_r+0x3c>
 80050d4:	686c      	ldr	r4, [r5, #4]
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050dc:	0719      	lsls	r1, r3, #28
 80050de:	d42c      	bmi.n	800513a <__swsetup_r+0x82>
 80050e0:	06dd      	lsls	r5, r3, #27
 80050e2:	d411      	bmi.n	8005108 <__swsetup_r+0x50>
 80050e4:	2309      	movs	r3, #9
 80050e6:	6033      	str	r3, [r6, #0]
 80050e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	f04f 30ff 	mov.w	r0, #4294967295
 80050f2:	e03e      	b.n	8005172 <__swsetup_r+0xba>
 80050f4:	4b25      	ldr	r3, [pc, #148]	; (800518c <__swsetup_r+0xd4>)
 80050f6:	429c      	cmp	r4, r3
 80050f8:	d101      	bne.n	80050fe <__swsetup_r+0x46>
 80050fa:	68ac      	ldr	r4, [r5, #8]
 80050fc:	e7eb      	b.n	80050d6 <__swsetup_r+0x1e>
 80050fe:	4b24      	ldr	r3, [pc, #144]	; (8005190 <__swsetup_r+0xd8>)
 8005100:	429c      	cmp	r4, r3
 8005102:	bf08      	it	eq
 8005104:	68ec      	ldreq	r4, [r5, #12]
 8005106:	e7e6      	b.n	80050d6 <__swsetup_r+0x1e>
 8005108:	0758      	lsls	r0, r3, #29
 800510a:	d512      	bpl.n	8005132 <__swsetup_r+0x7a>
 800510c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800510e:	b141      	cbz	r1, 8005122 <__swsetup_r+0x6a>
 8005110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005114:	4299      	cmp	r1, r3
 8005116:	d002      	beq.n	800511e <__swsetup_r+0x66>
 8005118:	4630      	mov	r0, r6
 800511a:	f7ff fddd 	bl	8004cd8 <_free_r>
 800511e:	2300      	movs	r3, #0
 8005120:	6363      	str	r3, [r4, #52]	; 0x34
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005128:	81a3      	strh	r3, [r4, #12]
 800512a:	2300      	movs	r3, #0
 800512c:	6063      	str	r3, [r4, #4]
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f043 0308 	orr.w	r3, r3, #8
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	6923      	ldr	r3, [r4, #16]
 800513c:	b94b      	cbnz	r3, 8005152 <__swsetup_r+0x9a>
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005148:	d003      	beq.n	8005152 <__swsetup_r+0x9a>
 800514a:	4621      	mov	r1, r4
 800514c:	4630      	mov	r0, r6
 800514e:	f000 f867 	bl	8005220 <__smakebuf_r>
 8005152:	89a0      	ldrh	r0, [r4, #12]
 8005154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005158:	f010 0301 	ands.w	r3, r0, #1
 800515c:	d00a      	beq.n	8005174 <__swsetup_r+0xbc>
 800515e:	2300      	movs	r3, #0
 8005160:	60a3      	str	r3, [r4, #8]
 8005162:	6963      	ldr	r3, [r4, #20]
 8005164:	425b      	negs	r3, r3
 8005166:	61a3      	str	r3, [r4, #24]
 8005168:	6923      	ldr	r3, [r4, #16]
 800516a:	b943      	cbnz	r3, 800517e <__swsetup_r+0xc6>
 800516c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005170:	d1ba      	bne.n	80050e8 <__swsetup_r+0x30>
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	0781      	lsls	r1, r0, #30
 8005176:	bf58      	it	pl
 8005178:	6963      	ldrpl	r3, [r4, #20]
 800517a:	60a3      	str	r3, [r4, #8]
 800517c:	e7f4      	b.n	8005168 <__swsetup_r+0xb0>
 800517e:	2000      	movs	r0, #0
 8005180:	e7f7      	b.n	8005172 <__swsetup_r+0xba>
 8005182:	bf00      	nop
 8005184:	2000000c 	.word	0x2000000c
 8005188:	08005a44 	.word	0x08005a44
 800518c:	08005a64 	.word	0x08005a64
 8005190:	08005a24 	.word	0x08005a24

08005194 <_close_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	4d06      	ldr	r5, [pc, #24]	; (80051b0 <_close_r+0x1c>)
 8005198:	2300      	movs	r3, #0
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	602b      	str	r3, [r5, #0]
 80051a0:	f7fb fc79 	bl	8000a96 <_close>
 80051a4:	1c43      	adds	r3, r0, #1
 80051a6:	d102      	bne.n	80051ae <_close_r+0x1a>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	b103      	cbz	r3, 80051ae <_close_r+0x1a>
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
 80051b0:	20000560 	.word	0x20000560

080051b4 <_lseek_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4d07      	ldr	r5, [pc, #28]	; (80051d4 <_lseek_r+0x20>)
 80051b8:	4604      	mov	r4, r0
 80051ba:	4608      	mov	r0, r1
 80051bc:	4611      	mov	r1, r2
 80051be:	2200      	movs	r2, #0
 80051c0:	602a      	str	r2, [r5, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f7fb fc8e 	bl	8000ae4 <_lseek>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d102      	bne.n	80051d2 <_lseek_r+0x1e>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	b103      	cbz	r3, 80051d2 <_lseek_r+0x1e>
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	20000560 	.word	0x20000560

080051d8 <__swhatbuf_r>:
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	460e      	mov	r6, r1
 80051dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e0:	2900      	cmp	r1, #0
 80051e2:	b096      	sub	sp, #88	; 0x58
 80051e4:	4614      	mov	r4, r2
 80051e6:	461d      	mov	r5, r3
 80051e8:	da07      	bge.n	80051fa <__swhatbuf_r+0x22>
 80051ea:	2300      	movs	r3, #0
 80051ec:	602b      	str	r3, [r5, #0]
 80051ee:	89b3      	ldrh	r3, [r6, #12]
 80051f0:	061a      	lsls	r2, r3, #24
 80051f2:	d410      	bmi.n	8005216 <__swhatbuf_r+0x3e>
 80051f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051f8:	e00e      	b.n	8005218 <__swhatbuf_r+0x40>
 80051fa:	466a      	mov	r2, sp
 80051fc:	f000 fb5c 	bl	80058b8 <_fstat_r>
 8005200:	2800      	cmp	r0, #0
 8005202:	dbf2      	blt.n	80051ea <__swhatbuf_r+0x12>
 8005204:	9a01      	ldr	r2, [sp, #4]
 8005206:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800520a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800520e:	425a      	negs	r2, r3
 8005210:	415a      	adcs	r2, r3
 8005212:	602a      	str	r2, [r5, #0]
 8005214:	e7ee      	b.n	80051f4 <__swhatbuf_r+0x1c>
 8005216:	2340      	movs	r3, #64	; 0x40
 8005218:	2000      	movs	r0, #0
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	b016      	add	sp, #88	; 0x58
 800521e:	bd70      	pop	{r4, r5, r6, pc}

08005220 <__smakebuf_r>:
 8005220:	898b      	ldrh	r3, [r1, #12]
 8005222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005224:	079d      	lsls	r5, r3, #30
 8005226:	4606      	mov	r6, r0
 8005228:	460c      	mov	r4, r1
 800522a:	d507      	bpl.n	800523c <__smakebuf_r+0x1c>
 800522c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	6123      	str	r3, [r4, #16]
 8005234:	2301      	movs	r3, #1
 8005236:	6163      	str	r3, [r4, #20]
 8005238:	b002      	add	sp, #8
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	ab01      	add	r3, sp, #4
 800523e:	466a      	mov	r2, sp
 8005240:	f7ff ffca 	bl	80051d8 <__swhatbuf_r>
 8005244:	9900      	ldr	r1, [sp, #0]
 8005246:	4605      	mov	r5, r0
 8005248:	4630      	mov	r0, r6
 800524a:	f7ff fd95 	bl	8004d78 <_malloc_r>
 800524e:	b948      	cbnz	r0, 8005264 <__smakebuf_r+0x44>
 8005250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005254:	059a      	lsls	r2, r3, #22
 8005256:	d4ef      	bmi.n	8005238 <__smakebuf_r+0x18>
 8005258:	f023 0303 	bic.w	r3, r3, #3
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	81a3      	strh	r3, [r4, #12]
 8005262:	e7e3      	b.n	800522c <__smakebuf_r+0xc>
 8005264:	4b0d      	ldr	r3, [pc, #52]	; (800529c <__smakebuf_r+0x7c>)
 8005266:	62b3      	str	r3, [r6, #40]	; 0x28
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	6020      	str	r0, [r4, #0]
 800526c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	9b00      	ldr	r3, [sp, #0]
 8005274:	6163      	str	r3, [r4, #20]
 8005276:	9b01      	ldr	r3, [sp, #4]
 8005278:	6120      	str	r0, [r4, #16]
 800527a:	b15b      	cbz	r3, 8005294 <__smakebuf_r+0x74>
 800527c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005280:	4630      	mov	r0, r6
 8005282:	f000 fb2b 	bl	80058dc <_isatty_r>
 8005286:	b128      	cbz	r0, 8005294 <__smakebuf_r+0x74>
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	89a0      	ldrh	r0, [r4, #12]
 8005296:	4305      	orrs	r5, r0
 8005298:	81a5      	strh	r5, [r4, #12]
 800529a:	e7cd      	b.n	8005238 <__smakebuf_r+0x18>
 800529c:	08004ae5 	.word	0x08004ae5

080052a0 <__malloc_lock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	; (80052a8 <__malloc_lock+0x8>)
 80052a2:	f7ff bd16 	b.w	8004cd2 <__retarget_lock_acquire_recursive>
 80052a6:	bf00      	nop
 80052a8:	20000558 	.word	0x20000558

080052ac <__malloc_unlock>:
 80052ac:	4801      	ldr	r0, [pc, #4]	; (80052b4 <__malloc_unlock+0x8>)
 80052ae:	f7ff bd11 	b.w	8004cd4 <__retarget_lock_release_recursive>
 80052b2:	bf00      	nop
 80052b4:	20000558 	.word	0x20000558

080052b8 <__sfputc_r>:
 80052b8:	6893      	ldr	r3, [r2, #8]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	b410      	push	{r4}
 80052c0:	6093      	str	r3, [r2, #8]
 80052c2:	da08      	bge.n	80052d6 <__sfputc_r+0x1e>
 80052c4:	6994      	ldr	r4, [r2, #24]
 80052c6:	42a3      	cmp	r3, r4
 80052c8:	db01      	blt.n	80052ce <__sfputc_r+0x16>
 80052ca:	290a      	cmp	r1, #10
 80052cc:	d103      	bne.n	80052d6 <__sfputc_r+0x1e>
 80052ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052d2:	f7ff be8d 	b.w	8004ff0 <__swbuf_r>
 80052d6:	6813      	ldr	r3, [r2, #0]
 80052d8:	1c58      	adds	r0, r3, #1
 80052da:	6010      	str	r0, [r2, #0]
 80052dc:	7019      	strb	r1, [r3, #0]
 80052de:	4608      	mov	r0, r1
 80052e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <__sfputs_r>:
 80052e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e8:	4606      	mov	r6, r0
 80052ea:	460f      	mov	r7, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	18d5      	adds	r5, r2, r3
 80052f0:	42ac      	cmp	r4, r5
 80052f2:	d101      	bne.n	80052f8 <__sfputs_r+0x12>
 80052f4:	2000      	movs	r0, #0
 80052f6:	e007      	b.n	8005308 <__sfputs_r+0x22>
 80052f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fc:	463a      	mov	r2, r7
 80052fe:	4630      	mov	r0, r6
 8005300:	f7ff ffda 	bl	80052b8 <__sfputc_r>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d1f3      	bne.n	80052f0 <__sfputs_r+0xa>
 8005308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800530c <_vfiprintf_r>:
 800530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005310:	460d      	mov	r5, r1
 8005312:	b09d      	sub	sp, #116	; 0x74
 8005314:	4614      	mov	r4, r2
 8005316:	4698      	mov	r8, r3
 8005318:	4606      	mov	r6, r0
 800531a:	b118      	cbz	r0, 8005324 <_vfiprintf_r+0x18>
 800531c:	6983      	ldr	r3, [r0, #24]
 800531e:	b90b      	cbnz	r3, 8005324 <_vfiprintf_r+0x18>
 8005320:	f7ff fc14 	bl	8004b4c <__sinit>
 8005324:	4b89      	ldr	r3, [pc, #548]	; (800554c <_vfiprintf_r+0x240>)
 8005326:	429d      	cmp	r5, r3
 8005328:	d11b      	bne.n	8005362 <_vfiprintf_r+0x56>
 800532a:	6875      	ldr	r5, [r6, #4]
 800532c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800532e:	07d9      	lsls	r1, r3, #31
 8005330:	d405      	bmi.n	800533e <_vfiprintf_r+0x32>
 8005332:	89ab      	ldrh	r3, [r5, #12]
 8005334:	059a      	lsls	r2, r3, #22
 8005336:	d402      	bmi.n	800533e <_vfiprintf_r+0x32>
 8005338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800533a:	f7ff fcca 	bl	8004cd2 <__retarget_lock_acquire_recursive>
 800533e:	89ab      	ldrh	r3, [r5, #12]
 8005340:	071b      	lsls	r3, r3, #28
 8005342:	d501      	bpl.n	8005348 <_vfiprintf_r+0x3c>
 8005344:	692b      	ldr	r3, [r5, #16]
 8005346:	b9eb      	cbnz	r3, 8005384 <_vfiprintf_r+0x78>
 8005348:	4629      	mov	r1, r5
 800534a:	4630      	mov	r0, r6
 800534c:	f7ff feb4 	bl	80050b8 <__swsetup_r>
 8005350:	b1c0      	cbz	r0, 8005384 <_vfiprintf_r+0x78>
 8005352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005354:	07dc      	lsls	r4, r3, #31
 8005356:	d50e      	bpl.n	8005376 <_vfiprintf_r+0x6a>
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	b01d      	add	sp, #116	; 0x74
 800535e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005362:	4b7b      	ldr	r3, [pc, #492]	; (8005550 <_vfiprintf_r+0x244>)
 8005364:	429d      	cmp	r5, r3
 8005366:	d101      	bne.n	800536c <_vfiprintf_r+0x60>
 8005368:	68b5      	ldr	r5, [r6, #8]
 800536a:	e7df      	b.n	800532c <_vfiprintf_r+0x20>
 800536c:	4b79      	ldr	r3, [pc, #484]	; (8005554 <_vfiprintf_r+0x248>)
 800536e:	429d      	cmp	r5, r3
 8005370:	bf08      	it	eq
 8005372:	68f5      	ldreq	r5, [r6, #12]
 8005374:	e7da      	b.n	800532c <_vfiprintf_r+0x20>
 8005376:	89ab      	ldrh	r3, [r5, #12]
 8005378:	0598      	lsls	r0, r3, #22
 800537a:	d4ed      	bmi.n	8005358 <_vfiprintf_r+0x4c>
 800537c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800537e:	f7ff fca9 	bl	8004cd4 <__retarget_lock_release_recursive>
 8005382:	e7e9      	b.n	8005358 <_vfiprintf_r+0x4c>
 8005384:	2300      	movs	r3, #0
 8005386:	9309      	str	r3, [sp, #36]	; 0x24
 8005388:	2320      	movs	r3, #32
 800538a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800538e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005392:	2330      	movs	r3, #48	; 0x30
 8005394:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005558 <_vfiprintf_r+0x24c>
 8005398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800539c:	f04f 0901 	mov.w	r9, #1
 80053a0:	4623      	mov	r3, r4
 80053a2:	469a      	mov	sl, r3
 80053a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053a8:	b10a      	cbz	r2, 80053ae <_vfiprintf_r+0xa2>
 80053aa:	2a25      	cmp	r2, #37	; 0x25
 80053ac:	d1f9      	bne.n	80053a2 <_vfiprintf_r+0x96>
 80053ae:	ebba 0b04 	subs.w	fp, sl, r4
 80053b2:	d00b      	beq.n	80053cc <_vfiprintf_r+0xc0>
 80053b4:	465b      	mov	r3, fp
 80053b6:	4622      	mov	r2, r4
 80053b8:	4629      	mov	r1, r5
 80053ba:	4630      	mov	r0, r6
 80053bc:	f7ff ff93 	bl	80052e6 <__sfputs_r>
 80053c0:	3001      	adds	r0, #1
 80053c2:	f000 80aa 	beq.w	800551a <_vfiprintf_r+0x20e>
 80053c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053c8:	445a      	add	r2, fp
 80053ca:	9209      	str	r2, [sp, #36]	; 0x24
 80053cc:	f89a 3000 	ldrb.w	r3, [sl]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80a2 	beq.w	800551a <_vfiprintf_r+0x20e>
 80053d6:	2300      	movs	r3, #0
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295
 80053dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053e0:	f10a 0a01 	add.w	sl, sl, #1
 80053e4:	9304      	str	r3, [sp, #16]
 80053e6:	9307      	str	r3, [sp, #28]
 80053e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053ec:	931a      	str	r3, [sp, #104]	; 0x68
 80053ee:	4654      	mov	r4, sl
 80053f0:	2205      	movs	r2, #5
 80053f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f6:	4858      	ldr	r0, [pc, #352]	; (8005558 <_vfiprintf_r+0x24c>)
 80053f8:	f7fa feea 	bl	80001d0 <memchr>
 80053fc:	9a04      	ldr	r2, [sp, #16]
 80053fe:	b9d8      	cbnz	r0, 8005438 <_vfiprintf_r+0x12c>
 8005400:	06d1      	lsls	r1, r2, #27
 8005402:	bf44      	itt	mi
 8005404:	2320      	movmi	r3, #32
 8005406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800540a:	0713      	lsls	r3, r2, #28
 800540c:	bf44      	itt	mi
 800540e:	232b      	movmi	r3, #43	; 0x2b
 8005410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005414:	f89a 3000 	ldrb.w	r3, [sl]
 8005418:	2b2a      	cmp	r3, #42	; 0x2a
 800541a:	d015      	beq.n	8005448 <_vfiprintf_r+0x13c>
 800541c:	9a07      	ldr	r2, [sp, #28]
 800541e:	4654      	mov	r4, sl
 8005420:	2000      	movs	r0, #0
 8005422:	f04f 0c0a 	mov.w	ip, #10
 8005426:	4621      	mov	r1, r4
 8005428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800542c:	3b30      	subs	r3, #48	; 0x30
 800542e:	2b09      	cmp	r3, #9
 8005430:	d94e      	bls.n	80054d0 <_vfiprintf_r+0x1c4>
 8005432:	b1b0      	cbz	r0, 8005462 <_vfiprintf_r+0x156>
 8005434:	9207      	str	r2, [sp, #28]
 8005436:	e014      	b.n	8005462 <_vfiprintf_r+0x156>
 8005438:	eba0 0308 	sub.w	r3, r0, r8
 800543c:	fa09 f303 	lsl.w	r3, r9, r3
 8005440:	4313      	orrs	r3, r2
 8005442:	9304      	str	r3, [sp, #16]
 8005444:	46a2      	mov	sl, r4
 8005446:	e7d2      	b.n	80053ee <_vfiprintf_r+0xe2>
 8005448:	9b03      	ldr	r3, [sp, #12]
 800544a:	1d19      	adds	r1, r3, #4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	9103      	str	r1, [sp, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	bfbb      	ittet	lt
 8005454:	425b      	neglt	r3, r3
 8005456:	f042 0202 	orrlt.w	r2, r2, #2
 800545a:	9307      	strge	r3, [sp, #28]
 800545c:	9307      	strlt	r3, [sp, #28]
 800545e:	bfb8      	it	lt
 8005460:	9204      	strlt	r2, [sp, #16]
 8005462:	7823      	ldrb	r3, [r4, #0]
 8005464:	2b2e      	cmp	r3, #46	; 0x2e
 8005466:	d10c      	bne.n	8005482 <_vfiprintf_r+0x176>
 8005468:	7863      	ldrb	r3, [r4, #1]
 800546a:	2b2a      	cmp	r3, #42	; 0x2a
 800546c:	d135      	bne.n	80054da <_vfiprintf_r+0x1ce>
 800546e:	9b03      	ldr	r3, [sp, #12]
 8005470:	1d1a      	adds	r2, r3, #4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	9203      	str	r2, [sp, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	bfb8      	it	lt
 800547a:	f04f 33ff 	movlt.w	r3, #4294967295
 800547e:	3402      	adds	r4, #2
 8005480:	9305      	str	r3, [sp, #20]
 8005482:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005568 <_vfiprintf_r+0x25c>
 8005486:	7821      	ldrb	r1, [r4, #0]
 8005488:	2203      	movs	r2, #3
 800548a:	4650      	mov	r0, sl
 800548c:	f7fa fea0 	bl	80001d0 <memchr>
 8005490:	b140      	cbz	r0, 80054a4 <_vfiprintf_r+0x198>
 8005492:	2340      	movs	r3, #64	; 0x40
 8005494:	eba0 000a 	sub.w	r0, r0, sl
 8005498:	fa03 f000 	lsl.w	r0, r3, r0
 800549c:	9b04      	ldr	r3, [sp, #16]
 800549e:	4303      	orrs	r3, r0
 80054a0:	3401      	adds	r4, #1
 80054a2:	9304      	str	r3, [sp, #16]
 80054a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a8:	482c      	ldr	r0, [pc, #176]	; (800555c <_vfiprintf_r+0x250>)
 80054aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ae:	2206      	movs	r2, #6
 80054b0:	f7fa fe8e 	bl	80001d0 <memchr>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d03f      	beq.n	8005538 <_vfiprintf_r+0x22c>
 80054b8:	4b29      	ldr	r3, [pc, #164]	; (8005560 <_vfiprintf_r+0x254>)
 80054ba:	bb1b      	cbnz	r3, 8005504 <_vfiprintf_r+0x1f8>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	3307      	adds	r3, #7
 80054c0:	f023 0307 	bic.w	r3, r3, #7
 80054c4:	3308      	adds	r3, #8
 80054c6:	9303      	str	r3, [sp, #12]
 80054c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ca:	443b      	add	r3, r7
 80054cc:	9309      	str	r3, [sp, #36]	; 0x24
 80054ce:	e767      	b.n	80053a0 <_vfiprintf_r+0x94>
 80054d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80054d4:	460c      	mov	r4, r1
 80054d6:	2001      	movs	r0, #1
 80054d8:	e7a5      	b.n	8005426 <_vfiprintf_r+0x11a>
 80054da:	2300      	movs	r3, #0
 80054dc:	3401      	adds	r4, #1
 80054de:	9305      	str	r3, [sp, #20]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f04f 0c0a 	mov.w	ip, #10
 80054e6:	4620      	mov	r0, r4
 80054e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ec:	3a30      	subs	r2, #48	; 0x30
 80054ee:	2a09      	cmp	r2, #9
 80054f0:	d903      	bls.n	80054fa <_vfiprintf_r+0x1ee>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0c5      	beq.n	8005482 <_vfiprintf_r+0x176>
 80054f6:	9105      	str	r1, [sp, #20]
 80054f8:	e7c3      	b.n	8005482 <_vfiprintf_r+0x176>
 80054fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80054fe:	4604      	mov	r4, r0
 8005500:	2301      	movs	r3, #1
 8005502:	e7f0      	b.n	80054e6 <_vfiprintf_r+0x1da>
 8005504:	ab03      	add	r3, sp, #12
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	462a      	mov	r2, r5
 800550a:	4b16      	ldr	r3, [pc, #88]	; (8005564 <_vfiprintf_r+0x258>)
 800550c:	a904      	add	r1, sp, #16
 800550e:	4630      	mov	r0, r6
 8005510:	f3af 8000 	nop.w
 8005514:	4607      	mov	r7, r0
 8005516:	1c78      	adds	r0, r7, #1
 8005518:	d1d6      	bne.n	80054c8 <_vfiprintf_r+0x1bc>
 800551a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800551c:	07d9      	lsls	r1, r3, #31
 800551e:	d405      	bmi.n	800552c <_vfiprintf_r+0x220>
 8005520:	89ab      	ldrh	r3, [r5, #12]
 8005522:	059a      	lsls	r2, r3, #22
 8005524:	d402      	bmi.n	800552c <_vfiprintf_r+0x220>
 8005526:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005528:	f7ff fbd4 	bl	8004cd4 <__retarget_lock_release_recursive>
 800552c:	89ab      	ldrh	r3, [r5, #12]
 800552e:	065b      	lsls	r3, r3, #25
 8005530:	f53f af12 	bmi.w	8005358 <_vfiprintf_r+0x4c>
 8005534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005536:	e711      	b.n	800535c <_vfiprintf_r+0x50>
 8005538:	ab03      	add	r3, sp, #12
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	462a      	mov	r2, r5
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <_vfiprintf_r+0x258>)
 8005540:	a904      	add	r1, sp, #16
 8005542:	4630      	mov	r0, r6
 8005544:	f000 f880 	bl	8005648 <_printf_i>
 8005548:	e7e4      	b.n	8005514 <_vfiprintf_r+0x208>
 800554a:	bf00      	nop
 800554c:	08005a44 	.word	0x08005a44
 8005550:	08005a64 	.word	0x08005a64
 8005554:	08005a24 	.word	0x08005a24
 8005558:	08005a88 	.word	0x08005a88
 800555c:	08005a92 	.word	0x08005a92
 8005560:	00000000 	.word	0x00000000
 8005564:	080052e7 	.word	0x080052e7
 8005568:	08005a8e 	.word	0x08005a8e

0800556c <_printf_common>:
 800556c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005570:	4616      	mov	r6, r2
 8005572:	4699      	mov	r9, r3
 8005574:	688a      	ldr	r2, [r1, #8]
 8005576:	690b      	ldr	r3, [r1, #16]
 8005578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800557c:	4293      	cmp	r3, r2
 800557e:	bfb8      	it	lt
 8005580:	4613      	movlt	r3, r2
 8005582:	6033      	str	r3, [r6, #0]
 8005584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005588:	4607      	mov	r7, r0
 800558a:	460c      	mov	r4, r1
 800558c:	b10a      	cbz	r2, 8005592 <_printf_common+0x26>
 800558e:	3301      	adds	r3, #1
 8005590:	6033      	str	r3, [r6, #0]
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	0699      	lsls	r1, r3, #26
 8005596:	bf42      	ittt	mi
 8005598:	6833      	ldrmi	r3, [r6, #0]
 800559a:	3302      	addmi	r3, #2
 800559c:	6033      	strmi	r3, [r6, #0]
 800559e:	6825      	ldr	r5, [r4, #0]
 80055a0:	f015 0506 	ands.w	r5, r5, #6
 80055a4:	d106      	bne.n	80055b4 <_printf_common+0x48>
 80055a6:	f104 0a19 	add.w	sl, r4, #25
 80055aa:	68e3      	ldr	r3, [r4, #12]
 80055ac:	6832      	ldr	r2, [r6, #0]
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	42ab      	cmp	r3, r5
 80055b2:	dc26      	bgt.n	8005602 <_printf_common+0x96>
 80055b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055b8:	1e13      	subs	r3, r2, #0
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	bf18      	it	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	0692      	lsls	r2, r2, #26
 80055c2:	d42b      	bmi.n	800561c <_printf_common+0xb0>
 80055c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055c8:	4649      	mov	r1, r9
 80055ca:	4638      	mov	r0, r7
 80055cc:	47c0      	blx	r8
 80055ce:	3001      	adds	r0, #1
 80055d0:	d01e      	beq.n	8005610 <_printf_common+0xa4>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	68e5      	ldr	r5, [r4, #12]
 80055d6:	6832      	ldr	r2, [r6, #0]
 80055d8:	f003 0306 	and.w	r3, r3, #6
 80055dc:	2b04      	cmp	r3, #4
 80055de:	bf08      	it	eq
 80055e0:	1aad      	subeq	r5, r5, r2
 80055e2:	68a3      	ldr	r3, [r4, #8]
 80055e4:	6922      	ldr	r2, [r4, #16]
 80055e6:	bf0c      	ite	eq
 80055e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055ec:	2500      	movne	r5, #0
 80055ee:	4293      	cmp	r3, r2
 80055f0:	bfc4      	itt	gt
 80055f2:	1a9b      	subgt	r3, r3, r2
 80055f4:	18ed      	addgt	r5, r5, r3
 80055f6:	2600      	movs	r6, #0
 80055f8:	341a      	adds	r4, #26
 80055fa:	42b5      	cmp	r5, r6
 80055fc:	d11a      	bne.n	8005634 <_printf_common+0xc8>
 80055fe:	2000      	movs	r0, #0
 8005600:	e008      	b.n	8005614 <_printf_common+0xa8>
 8005602:	2301      	movs	r3, #1
 8005604:	4652      	mov	r2, sl
 8005606:	4649      	mov	r1, r9
 8005608:	4638      	mov	r0, r7
 800560a:	47c0      	blx	r8
 800560c:	3001      	adds	r0, #1
 800560e:	d103      	bne.n	8005618 <_printf_common+0xac>
 8005610:	f04f 30ff 	mov.w	r0, #4294967295
 8005614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005618:	3501      	adds	r5, #1
 800561a:	e7c6      	b.n	80055aa <_printf_common+0x3e>
 800561c:	18e1      	adds	r1, r4, r3
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	2030      	movs	r0, #48	; 0x30
 8005622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005626:	4422      	add	r2, r4
 8005628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800562c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005630:	3302      	adds	r3, #2
 8005632:	e7c7      	b.n	80055c4 <_printf_common+0x58>
 8005634:	2301      	movs	r3, #1
 8005636:	4622      	mov	r2, r4
 8005638:	4649      	mov	r1, r9
 800563a:	4638      	mov	r0, r7
 800563c:	47c0      	blx	r8
 800563e:	3001      	adds	r0, #1
 8005640:	d0e6      	beq.n	8005610 <_printf_common+0xa4>
 8005642:	3601      	adds	r6, #1
 8005644:	e7d9      	b.n	80055fa <_printf_common+0x8e>
	...

08005648 <_printf_i>:
 8005648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800564c:	460c      	mov	r4, r1
 800564e:	4691      	mov	r9, r2
 8005650:	7e27      	ldrb	r7, [r4, #24]
 8005652:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005654:	2f78      	cmp	r7, #120	; 0x78
 8005656:	4680      	mov	r8, r0
 8005658:	469a      	mov	sl, r3
 800565a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800565e:	d807      	bhi.n	8005670 <_printf_i+0x28>
 8005660:	2f62      	cmp	r7, #98	; 0x62
 8005662:	d80a      	bhi.n	800567a <_printf_i+0x32>
 8005664:	2f00      	cmp	r7, #0
 8005666:	f000 80d8 	beq.w	800581a <_printf_i+0x1d2>
 800566a:	2f58      	cmp	r7, #88	; 0x58
 800566c:	f000 80a3 	beq.w	80057b6 <_printf_i+0x16e>
 8005670:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005678:	e03a      	b.n	80056f0 <_printf_i+0xa8>
 800567a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800567e:	2b15      	cmp	r3, #21
 8005680:	d8f6      	bhi.n	8005670 <_printf_i+0x28>
 8005682:	a001      	add	r0, pc, #4	; (adr r0, 8005688 <_printf_i+0x40>)
 8005684:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005688:	080056e1 	.word	0x080056e1
 800568c:	080056f5 	.word	0x080056f5
 8005690:	08005671 	.word	0x08005671
 8005694:	08005671 	.word	0x08005671
 8005698:	08005671 	.word	0x08005671
 800569c:	08005671 	.word	0x08005671
 80056a0:	080056f5 	.word	0x080056f5
 80056a4:	08005671 	.word	0x08005671
 80056a8:	08005671 	.word	0x08005671
 80056ac:	08005671 	.word	0x08005671
 80056b0:	08005671 	.word	0x08005671
 80056b4:	08005801 	.word	0x08005801
 80056b8:	08005725 	.word	0x08005725
 80056bc:	080057e3 	.word	0x080057e3
 80056c0:	08005671 	.word	0x08005671
 80056c4:	08005671 	.word	0x08005671
 80056c8:	08005823 	.word	0x08005823
 80056cc:	08005671 	.word	0x08005671
 80056d0:	08005725 	.word	0x08005725
 80056d4:	08005671 	.word	0x08005671
 80056d8:	08005671 	.word	0x08005671
 80056dc:	080057eb 	.word	0x080057eb
 80056e0:	680b      	ldr	r3, [r1, #0]
 80056e2:	1d1a      	adds	r2, r3, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	600a      	str	r2, [r1, #0]
 80056e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056f0:	2301      	movs	r3, #1
 80056f2:	e0a3      	b.n	800583c <_printf_i+0x1f4>
 80056f4:	6825      	ldr	r5, [r4, #0]
 80056f6:	6808      	ldr	r0, [r1, #0]
 80056f8:	062e      	lsls	r6, r5, #24
 80056fa:	f100 0304 	add.w	r3, r0, #4
 80056fe:	d50a      	bpl.n	8005716 <_printf_i+0xce>
 8005700:	6805      	ldr	r5, [r0, #0]
 8005702:	600b      	str	r3, [r1, #0]
 8005704:	2d00      	cmp	r5, #0
 8005706:	da03      	bge.n	8005710 <_printf_i+0xc8>
 8005708:	232d      	movs	r3, #45	; 0x2d
 800570a:	426d      	negs	r5, r5
 800570c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005710:	485e      	ldr	r0, [pc, #376]	; (800588c <_printf_i+0x244>)
 8005712:	230a      	movs	r3, #10
 8005714:	e019      	b.n	800574a <_printf_i+0x102>
 8005716:	f015 0f40 	tst.w	r5, #64	; 0x40
 800571a:	6805      	ldr	r5, [r0, #0]
 800571c:	600b      	str	r3, [r1, #0]
 800571e:	bf18      	it	ne
 8005720:	b22d      	sxthne	r5, r5
 8005722:	e7ef      	b.n	8005704 <_printf_i+0xbc>
 8005724:	680b      	ldr	r3, [r1, #0]
 8005726:	6825      	ldr	r5, [r4, #0]
 8005728:	1d18      	adds	r0, r3, #4
 800572a:	6008      	str	r0, [r1, #0]
 800572c:	0628      	lsls	r0, r5, #24
 800572e:	d501      	bpl.n	8005734 <_printf_i+0xec>
 8005730:	681d      	ldr	r5, [r3, #0]
 8005732:	e002      	b.n	800573a <_printf_i+0xf2>
 8005734:	0669      	lsls	r1, r5, #25
 8005736:	d5fb      	bpl.n	8005730 <_printf_i+0xe8>
 8005738:	881d      	ldrh	r5, [r3, #0]
 800573a:	4854      	ldr	r0, [pc, #336]	; (800588c <_printf_i+0x244>)
 800573c:	2f6f      	cmp	r7, #111	; 0x6f
 800573e:	bf0c      	ite	eq
 8005740:	2308      	moveq	r3, #8
 8005742:	230a      	movne	r3, #10
 8005744:	2100      	movs	r1, #0
 8005746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800574a:	6866      	ldr	r6, [r4, #4]
 800574c:	60a6      	str	r6, [r4, #8]
 800574e:	2e00      	cmp	r6, #0
 8005750:	bfa2      	ittt	ge
 8005752:	6821      	ldrge	r1, [r4, #0]
 8005754:	f021 0104 	bicge.w	r1, r1, #4
 8005758:	6021      	strge	r1, [r4, #0]
 800575a:	b90d      	cbnz	r5, 8005760 <_printf_i+0x118>
 800575c:	2e00      	cmp	r6, #0
 800575e:	d04d      	beq.n	80057fc <_printf_i+0x1b4>
 8005760:	4616      	mov	r6, r2
 8005762:	fbb5 f1f3 	udiv	r1, r5, r3
 8005766:	fb03 5711 	mls	r7, r3, r1, r5
 800576a:	5dc7      	ldrb	r7, [r0, r7]
 800576c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005770:	462f      	mov	r7, r5
 8005772:	42bb      	cmp	r3, r7
 8005774:	460d      	mov	r5, r1
 8005776:	d9f4      	bls.n	8005762 <_printf_i+0x11a>
 8005778:	2b08      	cmp	r3, #8
 800577a:	d10b      	bne.n	8005794 <_printf_i+0x14c>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	07df      	lsls	r7, r3, #31
 8005780:	d508      	bpl.n	8005794 <_printf_i+0x14c>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	6861      	ldr	r1, [r4, #4]
 8005786:	4299      	cmp	r1, r3
 8005788:	bfde      	ittt	le
 800578a:	2330      	movle	r3, #48	; 0x30
 800578c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005790:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005794:	1b92      	subs	r2, r2, r6
 8005796:	6122      	str	r2, [r4, #16]
 8005798:	f8cd a000 	str.w	sl, [sp]
 800579c:	464b      	mov	r3, r9
 800579e:	aa03      	add	r2, sp, #12
 80057a0:	4621      	mov	r1, r4
 80057a2:	4640      	mov	r0, r8
 80057a4:	f7ff fee2 	bl	800556c <_printf_common>
 80057a8:	3001      	adds	r0, #1
 80057aa:	d14c      	bne.n	8005846 <_printf_i+0x1fe>
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	b004      	add	sp, #16
 80057b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b6:	4835      	ldr	r0, [pc, #212]	; (800588c <_printf_i+0x244>)
 80057b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	680e      	ldr	r6, [r1, #0]
 80057c0:	061f      	lsls	r7, r3, #24
 80057c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80057c6:	600e      	str	r6, [r1, #0]
 80057c8:	d514      	bpl.n	80057f4 <_printf_i+0x1ac>
 80057ca:	07d9      	lsls	r1, r3, #31
 80057cc:	bf44      	itt	mi
 80057ce:	f043 0320 	orrmi.w	r3, r3, #32
 80057d2:	6023      	strmi	r3, [r4, #0]
 80057d4:	b91d      	cbnz	r5, 80057de <_printf_i+0x196>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	f023 0320 	bic.w	r3, r3, #32
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	2310      	movs	r3, #16
 80057e0:	e7b0      	b.n	8005744 <_printf_i+0xfc>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	f043 0320 	orr.w	r3, r3, #32
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	2378      	movs	r3, #120	; 0x78
 80057ec:	4828      	ldr	r0, [pc, #160]	; (8005890 <_printf_i+0x248>)
 80057ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057f2:	e7e3      	b.n	80057bc <_printf_i+0x174>
 80057f4:	065e      	lsls	r6, r3, #25
 80057f6:	bf48      	it	mi
 80057f8:	b2ad      	uxthmi	r5, r5
 80057fa:	e7e6      	b.n	80057ca <_printf_i+0x182>
 80057fc:	4616      	mov	r6, r2
 80057fe:	e7bb      	b.n	8005778 <_printf_i+0x130>
 8005800:	680b      	ldr	r3, [r1, #0]
 8005802:	6826      	ldr	r6, [r4, #0]
 8005804:	6960      	ldr	r0, [r4, #20]
 8005806:	1d1d      	adds	r5, r3, #4
 8005808:	600d      	str	r5, [r1, #0]
 800580a:	0635      	lsls	r5, r6, #24
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	d501      	bpl.n	8005814 <_printf_i+0x1cc>
 8005810:	6018      	str	r0, [r3, #0]
 8005812:	e002      	b.n	800581a <_printf_i+0x1d2>
 8005814:	0671      	lsls	r1, r6, #25
 8005816:	d5fb      	bpl.n	8005810 <_printf_i+0x1c8>
 8005818:	8018      	strh	r0, [r3, #0]
 800581a:	2300      	movs	r3, #0
 800581c:	6123      	str	r3, [r4, #16]
 800581e:	4616      	mov	r6, r2
 8005820:	e7ba      	b.n	8005798 <_printf_i+0x150>
 8005822:	680b      	ldr	r3, [r1, #0]
 8005824:	1d1a      	adds	r2, r3, #4
 8005826:	600a      	str	r2, [r1, #0]
 8005828:	681e      	ldr	r6, [r3, #0]
 800582a:	6862      	ldr	r2, [r4, #4]
 800582c:	2100      	movs	r1, #0
 800582e:	4630      	mov	r0, r6
 8005830:	f7fa fcce 	bl	80001d0 <memchr>
 8005834:	b108      	cbz	r0, 800583a <_printf_i+0x1f2>
 8005836:	1b80      	subs	r0, r0, r6
 8005838:	6060      	str	r0, [r4, #4]
 800583a:	6863      	ldr	r3, [r4, #4]
 800583c:	6123      	str	r3, [r4, #16]
 800583e:	2300      	movs	r3, #0
 8005840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005844:	e7a8      	b.n	8005798 <_printf_i+0x150>
 8005846:	6923      	ldr	r3, [r4, #16]
 8005848:	4632      	mov	r2, r6
 800584a:	4649      	mov	r1, r9
 800584c:	4640      	mov	r0, r8
 800584e:	47d0      	blx	sl
 8005850:	3001      	adds	r0, #1
 8005852:	d0ab      	beq.n	80057ac <_printf_i+0x164>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	079b      	lsls	r3, r3, #30
 8005858:	d413      	bmi.n	8005882 <_printf_i+0x23a>
 800585a:	68e0      	ldr	r0, [r4, #12]
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	4298      	cmp	r0, r3
 8005860:	bfb8      	it	lt
 8005862:	4618      	movlt	r0, r3
 8005864:	e7a4      	b.n	80057b0 <_printf_i+0x168>
 8005866:	2301      	movs	r3, #1
 8005868:	4632      	mov	r2, r6
 800586a:	4649      	mov	r1, r9
 800586c:	4640      	mov	r0, r8
 800586e:	47d0      	blx	sl
 8005870:	3001      	adds	r0, #1
 8005872:	d09b      	beq.n	80057ac <_printf_i+0x164>
 8005874:	3501      	adds	r5, #1
 8005876:	68e3      	ldr	r3, [r4, #12]
 8005878:	9903      	ldr	r1, [sp, #12]
 800587a:	1a5b      	subs	r3, r3, r1
 800587c:	42ab      	cmp	r3, r5
 800587e:	dcf2      	bgt.n	8005866 <_printf_i+0x21e>
 8005880:	e7eb      	b.n	800585a <_printf_i+0x212>
 8005882:	2500      	movs	r5, #0
 8005884:	f104 0619 	add.w	r6, r4, #25
 8005888:	e7f5      	b.n	8005876 <_printf_i+0x22e>
 800588a:	bf00      	nop
 800588c:	08005a99 	.word	0x08005a99
 8005890:	08005aaa 	.word	0x08005aaa

08005894 <_read_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4d07      	ldr	r5, [pc, #28]	; (80058b4 <_read_r+0x20>)
 8005898:	4604      	mov	r4, r0
 800589a:	4608      	mov	r0, r1
 800589c:	4611      	mov	r1, r2
 800589e:	2200      	movs	r2, #0
 80058a0:	602a      	str	r2, [r5, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f7fb f8be 	bl	8000a24 <_read>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_read_r+0x1e>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_read_r+0x1e>
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	20000560 	.word	0x20000560

080058b8 <_fstat_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4d07      	ldr	r5, [pc, #28]	; (80058d8 <_fstat_r+0x20>)
 80058bc:	2300      	movs	r3, #0
 80058be:	4604      	mov	r4, r0
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	602b      	str	r3, [r5, #0]
 80058c6:	f7fb f8f2 	bl	8000aae <_fstat>
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	d102      	bne.n	80058d4 <_fstat_r+0x1c>
 80058ce:	682b      	ldr	r3, [r5, #0]
 80058d0:	b103      	cbz	r3, 80058d4 <_fstat_r+0x1c>
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	bd38      	pop	{r3, r4, r5, pc}
 80058d6:	bf00      	nop
 80058d8:	20000560 	.word	0x20000560

080058dc <_isatty_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4d06      	ldr	r5, [pc, #24]	; (80058f8 <_isatty_r+0x1c>)
 80058e0:	2300      	movs	r3, #0
 80058e2:	4604      	mov	r4, r0
 80058e4:	4608      	mov	r0, r1
 80058e6:	602b      	str	r3, [r5, #0]
 80058e8:	f7fb f8f1 	bl	8000ace <_isatty>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d102      	bne.n	80058f6 <_isatty_r+0x1a>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b103      	cbz	r3, 80058f6 <_isatty_r+0x1a>
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	20000560 	.word	0x20000560

080058fc <_init>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	bf00      	nop
 8005900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005902:	bc08      	pop	{r3}
 8005904:	469e      	mov	lr, r3
 8005906:	4770      	bx	lr

08005908 <_fini>:
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590a:	bf00      	nop
 800590c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590e:	bc08      	pop	{r3}
 8005910:	469e      	mov	lr, r3
 8005912:	4770      	bx	lr
